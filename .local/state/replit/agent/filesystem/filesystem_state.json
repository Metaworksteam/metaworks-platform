{"file_contents":{"README.md":{"content":"# 🚀 MetaWorks - Cybersecurity Compliance Platform\n\n**One-Click Cybersecurity Compliance Solution**\n\nMetaWorks is a comprehensive SaaS-based compliance platform with an intuitive UI/UX that helps organizations achieve and maintain cybersecurity compliance across multiple frameworks.\n\n## ✨ Features\n\n- **🔐 Multi-Framework Support**\n  - NCA ECC (Saudi National Cybersecurity Authority)\n  - SAMA CSF (Saudi Central Bank)\n  - ISO 27001\n  - PDPA (Personal Data Protection Act)\n\n- **🎯 Risk Management**\n  - Risk assessment and prediction\n  - Real-time risk scoring\n  - Automated risk monitoring\n\n- **📋 Policy Management**\n  - Document upload and management\n  - Policy compliance tracking\n  - Automated policy updates\n\n- **🤖 AI-Powered Assistant**\n  - Virtual cybersecurity consultant\n  - Compliance guidance and recommendations\n  - Automated compliance reporting\n\n- **📊 Dashboard & Analytics**\n  - Real-time compliance scoring\n  - Risk heatmaps and visualizations\n  - Progress tracking and timelines\n\n## 🛠️ Tech Stack\n\n- **Frontend**: React 18 + TypeScript + Tailwind CSS\n- **Backend**: Node.js + Express.js\n- **Database**: PostgreSQL + Drizzle ORM\n- **Authentication**: Clerk + Custom Auth\n- **UI Components**: shadcn/ui + Radix UI\n- **Build Tool**: Vite\n- **Deployment**: Ready for Vercel, Netlify, or any cloud platform\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn\n- PostgreSQL (optional for development)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/yourusername/metaworks.git\n   cd metaworks\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Environment Setup**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n4. **Run the application**\n   ```bash\n   # Development mode\n   npm run dev\n   \n   # Production build\n   npm run build\n   npm start\n   ```\n\n5. **Open your browser**\n   Navigate to `http://localhost:5000`\n\n## 🔧 Configuration\n\n### Environment Variables\n\n```env\n# Database (optional for development)\nDATABASE_URL=postgresql://username:password@localhost:5432/metaworks\n\n# Clerk Authentication (optional)\nCLERK_PUBLISHABLE_KEY=pk_live_your_key_here\nCLERK_SECRET_KEY=sk_live_your_secret_here\n\n# Session Configuration\nSESSION_SECRET=your-session-secret-here\n\n# OpenAI (optional)\nOPENAI_API_KEY=your-openai-key-here\n\n# DID Agent (optional)\nDID_AGENT_ID=your-did-agent-id\nDID_API_KEY=your-did-api-key\n```\n\n## 📁 Project Structure\n\n```\nMetaWorks/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/    # UI components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # Custom hooks\n│   │   └── lib/           # Utilities\n├── server/                 # Express.js backend\n│   ├── api/               # API endpoints\n│   ├── auth.ts            # Authentication\n│   └── db.ts              # Database connection\n├── shared/                 # Shared schemas\n├── scripts/                # Database scripts\n└── public/                 # Static assets\n```\n\n## 🌐 Available Routes\n\n- **Home**: `/` - Landing page\n- **Dashboard**: `/dashboard` - User dashboard\n- **Admin**: `/admin-dashboard` - Admin panel\n- **Frameworks**: `/frameworks/*` - Compliance frameworks\n- **Risk Management**: `/risk-management`\n- **Virtual Assistant**: `/virtual-assistant`\n- **Company Dashboard**: `/company`\n\n## 🚀 Deployment\n\n### Vercel (Recommended)\n\n1. **Install Vercel CLI**\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Deploy**\n   ```bash\n   vercel\n   ```\n\n### Netlify\n\n1. **Build the project**\n   ```bash\n   npm run build\n   ```\n\n2. **Deploy to Netlify**\n   - Drag and drop the `dist/public` folder to Netlify\n   - Or use Netlify CLI\n\n### Docker\n\n1. **Build image**\n   ```bash\n   docker build -t metaworks .\n   ```\n\n2. **Run container**\n   ```bash\n   docker run -p 5000:5000 metaworks\n   ```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🆘 Support\n\n- **Documentation**: [Wiki](https://github.com/yourusername/metaworks/wiki)\n- **Issues**: [GitHub Issues](https://github.com/yourusername/metaworks/issues)\n- **Discussions**: [GitHub Discussions](https://github.com/yourusername/metaworks/discussions)\n\n## 🙏 Acknowledgments\n\n- Built with modern web technologies\n- Designed for cybersecurity professionals\n- Inspired by industry best practices\n\n---\n\n**Made with ❤️ for the cybersecurity community**\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![React](https://img.shields.io/badge/React-18-blue.svg)](https://reactjs.org/)\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.6-blue.svg)](https://www.typescriptlang.org/)\n[![Node.js](https://img.shields.io/badge/Node.js-20-green.svg)](https://nodejs.org/)\n","size_bytes":5211},"deploy.sh":{"content":"#!/bin/bash\n\n# MetaWorks Deployment Script\n# This script helps you deploy your MetaWorks application to various platforms\n\nset -e\n\necho \"🚀 MetaWorks Deployment Script\"\necho \"================================\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Check if required tools are installed\ncheck_requirements() {\n    print_status \"Checking requirements...\"\n    \n    if ! command -v node &> /dev/null; then\n        print_error \"Node.js is not installed. Please install Node.js 18+ first.\"\n        exit 1\n    fi\n    \n    if ! command -v npm &> /dev/null; then\n        print_error \"npm is not installed. Please install npm first.\"\n        exit 1\n    fi\n    \n    print_success \"Requirements check passed!\"\n}\n\n# Build the application\nbuild_app() {\n    print_status \"Building MetaWorks application...\"\n    \n    # Clean previous builds\n    rm -rf dist/\n    \n    # Install dependencies if needed\n    if [ ! -d \"node_modules\" ]; then\n        print_status \"Installing dependencies...\"\n        npm install\n    fi\n    \n    # Build the application\n    npm run build\n    \n    if [ $? -eq 0 ]; then\n        print_success \"Build completed successfully!\"\n    else\n        print_error \"Build failed!\"\n        exit 1\n    fi\n}\n\n# Deploy to Vercel\ndeploy_vercel() {\n    print_status \"Deploying to Vercel...\"\n    \n    if ! command -v vercel &> /dev/null; then\n        print_warning \"Vercel CLI not found. Installing...\"\n        npm install -g vercel\n    fi\n    \n    vercel --prod\n    \n    print_success \"Deployed to Vercel successfully!\"\n}\n\n# Deploy to Netlify\ndeploy_netlify() {\n    print_status \"Deploying to Netlify...\"\n    \n    if ! command -v netlify &> /dev/null; then\n        print_warning \"Netlify CLI not found. Installing...\"\n        npm install -g netlify-cli\n    fi\n    \n    # Build the app first\n    build_app\n    \n    # Deploy to Netlify\n    netlify deploy --prod --dir=dist/public\n    \n    print_success \"Deployed to Netlify successfully!\"\n}\n\n# Deploy using Docker\ndeploy_docker() {\n    print_status \"Deploying using Docker...\"\n    \n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker is not installed. Please install Docker first.\"\n        exit 1\n    fi\n    \n    # Build the Docker image\n    docker build -t metaworks .\n    \n    # Stop existing container if running\n    docker stop metaworks-container 2>/dev/null || true\n    docker rm metaworks-container 2>/dev/null || true\n    \n    # Run the new container\n    docker run -d --name metaworks-container -p 5000:5000 metaworks\n    \n    print_success \"Deployed using Docker successfully!\"\n    print_status \"Your app is running at: http://localhost:5000\"\n}\n\n# Deploy using docker-compose\ndeploy_docker_compose() {\n    print_status \"Deploying using Docker Compose...\"\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose is not installed. Please install Docker Compose first.\"\n        exit 1\n    fi\n    \n    # Build and start services\n    docker-compose up -d --build\n    \n    print_success \"Deployed using Docker Compose successfully!\"\n    print_status \"Your app is running at: http://localhost:5000\"\n}\n\n# Show deployment options\nshow_menu() {\n    echo \"\"\n    echo \"Choose your deployment method:\"\n    echo \"1) Deploy to Vercel (Recommended - Free hosting)\"\n    echo \"2) Deploy to Netlify (Free hosting)\"\n    echo \"3) Deploy using Docker (Local deployment)\"\n    echo \"4) Deploy using Docker Compose (Local deployment with database)\"\n    echo \"5) Just build the application\"\n    echo \"6) Exit\"\n    echo \"\"\n    read -p \"Enter your choice (1-6): \" choice\n    \n    case $choice in\n        1)\n            build_app\n            deploy_vercel\n            ;;\n        2)\n            deploy_netlify\n            ;;\n        3)\n            build_app\n            deploy_docker\n            ;;\n        4)\n            build_app\n            deploy_docker_compose\n            ;;\n        5)\n            build_app\n            print_success \"Application built successfully!\"\n            print_status \"You can run it locally with: npm start\"\n            ;;\n        6)\n            print_status \"Goodbye!\"\n            exit 0\n            ;;\n        *)\n            print_error \"Invalid choice. Please try again.\"\n            show_menu\n            ;;\n    esac\n}\n\n# Main execution\nmain() {\n    echo \"Welcome to MetaWorks deployment!\"\n    echo \"\"\n    \n    check_requirements\n    \n    if [ \"$1\" = \"--vercel\" ]; then\n        build_app\n        deploy_vercel\n    elif [ \"$1\" = \"--netlify\" ]; then\n        deploy_netlify\n    elif [ \"$1\" = \"--docker\" ]; then\n        build_app\n        deploy_docker\n    elif [ \"$1\" = \"--docker-compose\" ]; then\n        build_app\n        deploy_docker_compose\n    elif [ \"$1\" = \"--build-only\" ]; then\n        build_app\n    else\n        show_menu\n    fi\n}\n\n# Run main function with all arguments\nmain \"$@\"\n","size_bytes":5157},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1069},"attached_assets/DID Agent Script.js":{"content":"","size_bytes":0},"attached_assets/script agent.js":{"content":"","size_bytes":0},"scripts/import-risks.ts":{"content":"/**\n * Risk Import Script\n * \n * This script imports the 47 IT and cybersecurity risks from the Saudi Ceramics risk assessment\n * into the MetaWorks platform database.\n */\n\nimport { db } from '../server/db';\nimport { risks } from '../shared/schema';\n\nconst allRisks = [\n  {\n    title: \"Absence of IT Strategy\",\n    description: \"Unclear IT governance for business goals.\",\n    cause: \"Lack of cybersecurity strategy.\",\n    category: \"Strategic\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Develop IT strategy and roadmap.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Periodic IT Policy Reviews\",\n    description: \"Outdated policies lead to inefficiencies.\",\n    cause: \"No review process.\",\n    category: \"Strategic\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"Last reviewed in 2020.\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Regular policy updates.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Missing IT Steering Committee\",\n    description: \"No oversight for IT operations.\",\n    cause: \"No committee/charter.\",\n    category: \"Strategic\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Establish committee and charter.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Absence of Job Descriptions\",\n    description: \"Unclear IT staff roles.\",\n    cause: \"No documented JD.\",\n    category: \"Strategic\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Serious\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"JDs exist\",\n    controlEffectiveness: \"Effective\",\n    residualRiskLevel: \"Medium\",\n    mitigationActions: \"Create and maintain job descriptions.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Manual IT Asset Management\",\n    description: \"Errors in asset tracking.\",\n    cause: \"No centralized tool.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Possible\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Implement asset management tool.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No IT Asset Classification\",\n    description: \"Can't prioritize critical assets.\",\n    cause: \"No classification process.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Classify all assets.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"EOL/EOS Assets in Use\",\n    description: \"Vulnerable outdated systems.\",\n    cause: \"No EOL tracking.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Maintain EOL records.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No IT Asset Disposal Records\",\n    description: \"Risk of data breaches.\",\n    cause: \"No disposal docs.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Possible\",\n    impact: \"Medium\",\n    inherentRiskLevel: \"Medium\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"Medium\",\n    mitigationActions: \"Document disposals.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Technical Evaluation for IT Purchases\",\n    description: \"Compatibility issues.\",\n    cause: \"No evaluation process.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Possible\",\n    impact: \"Medium\",\n    inherentRiskLevel: \"Medium\",\n    existingControls: \"Evaluations done\",\n    controlEffectiveness: \"Effective\",\n    residualRiskLevel: \"Low\",\n    mitigationActions: \"Implement formal technical evaluation.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Manual Change Management\",\n    description: \"Approval delays/errors.\",\n    cause: \"No automation.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"Manual process\",\n    controlEffectiveness: \"Needs Improvement\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Implement change management tool.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No DR Plan or BCP\",\n    description: \"Extended outages possible.\",\n    cause: \"No DR planning.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Possible\",\n    impact: \"Catastrophic\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Create and test DR/BCP.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Missing Backup Strategy\",\n    description: \"Data loss risk.\",\n    cause: \"No formal backup plan.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Possible\",\n    impact: \"Catastrophic\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"Ad-hoc backups\",\n    controlEffectiveness: \"Needs Improvement\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Implement comprehensive backup strategy.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Smoke/Fire Detection in Server Room\",\n    description: \"Physical damage risk.\",\n    cause: \"No detection systems.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Unlikely\",\n    impact: \"Catastrophic\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\", \n    residualRiskLevel: \"High\",\n    mitigationActions: \"Install detection systems.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Data Classification\",\n    description: \"Improper data handling.\",\n    cause: \"No classification scheme.\",\n    category: \"Compliance\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Serious\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Implement data classification.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Missing SLAs for Third Parties\",\n    description: \"Unmanaged vendor performance.\",\n    cause: \"No SLA requirements.\",\n    category: \"Compliance\",\n    owner: \"IT Department\",\n    likelihood: \"Likely\",\n    impact: \"Medium\",\n    inherentRiskLevel: \"Medium\",\n    existingControls: \"Some SLAs exist\",\n    controlEffectiveness: \"Needs Improvement\",\n    residualRiskLevel: \"Medium\",\n    mitigationActions: \"Implement SLAs for all vendors.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No SIEM Solution\",\n    description: \"Can't correlate security events.\",\n    cause: \"No SIEM deployed.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Deploy SIEM.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Cybersecurity Team\",\n    description: \"Inconsistent security measures.\",\n    cause: \"No dedicated team.\",\n    category: \"Strategic\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Establish cybersecurity function.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Security Training\",\n    description: \"Employees vulnerable to phishing.\",\n    cause: \"No awareness program.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Very Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"None\",\n    controlEffectiveness: \"None\",\n    residualRiskLevel: \"High\",\n    mitigationActions: \"Conduct regular security training.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"No Privileged Access Management\",\n    description: \"Abuse of privileges possible.\",\n    cause: \"No PAM solution.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"Manual controls\",\n    controlEffectiveness: \"Needs Improvement\",\n    residualRiskLevel: \"Medium\",\n    mitigationActions: \"Implement PAM solution.\",\n    isAccepted: false,\n    companyId: 1\n  },\n  {\n    title: \"Weak Password Policy\",\n    description: \"Easily guessed passwords.\",\n    cause: \"Insufficient password requirements.\",\n    category: \"Operational\",\n    owner: \"IT Department\",\n    likelihood: \"Likely\",\n    impact: \"Major\",\n    inherentRiskLevel: \"High\",\n    existingControls: \"Basic policy exists\",\n    controlEffectiveness: \"Needs Improvement\",\n    residualRiskLevel: \"Medium\",\n    mitigationActions: \"Strengthen password policy.\",\n    isAccepted: false,\n    companyId: 1\n  }\n];\n\nasync function importRisks() {\n  console.log(\"Starting risk import...\");\n  \n  try {\n    // Import each risk\n    for (const risk of allRisks) {\n      await db.insert(risks).values({\n        ...risk,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n    \n    console.log(`Successfully imported ${allRisks.length} risks!`);\n  } catch (error) {\n    console.error(\"Error importing risks:\", error);\n  }\n}\n\n// Run the import function\nimportRisks()\n  .then(() => {\n    console.log(\"Import complete!\");\n    process.exit(0);\n  })\n  .catch(err => {\n    console.error(\"Import failed:\", err);\n    process.exit(1);\n  });","size_bytes":10352},"scripts/init-db.js":{"content":"#!/usr/bin/env node\n\nimport { exec } from 'child_process';\nimport { createRequire } from 'module';\nimport * as url from 'url';\nimport * as path from 'path';\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\nconst require = createRequire(import.meta.url);\n\nconsole.log('Initializing database...');\n\n// Run drizzle-kit push with yes pipe for auto-confirmation\nexec('echo \"yes\" | npx drizzle-kit push', { cwd: path.resolve(__dirname, '..') }, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`Error: ${error.message}`);\n    return;\n  }\n  \n  if (stderr) {\n    console.error(`stderr: ${stderr}`);\n    return;\n  }\n  \n  console.log(`Database schema pushed successfully: ${stdout}`);\n  \n  // Optional: Add admin user or initial data\n  console.log('Database initialization completed');\n});","size_bytes":812},"scripts/migrate-onboarding-gamification.ts":{"content":"import { db } from \"../server/db\";\nimport { pgTable, serial, text, integer, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\n\nasync function createOnboardingTables() {\n  console.log(\"Creating onboarding and gamification tables...\");\n\n  try {\n    // Create onboarding_steps table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS onboarding_steps (\n        id SERIAL PRIMARY KEY,\n        title TEXT NOT NULL,\n        description TEXT,\n        type TEXT NOT NULL,\n        content JSONB NOT NULL,\n        \"order\" INTEGER NOT NULL,\n        estimated_duration INTEGER NOT NULL,\n        points INTEGER,\n        prerequisite_step_ids JSONB,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n    console.log(\"Created onboarding_steps table\");\n\n    // Create user_progress table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS user_progress (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER NOT NULL,\n        step_id INTEGER NOT NULL,\n        status TEXT NOT NULL,\n        started_at TIMESTAMPTZ NOT NULL,\n        completed_at TIMESTAMPTZ,\n        user_data JSONB,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        UNIQUE(user_id, step_id)\n      )\n    `);\n    console.log(\"Created user_progress table\");\n\n    // Create badges table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS badges (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT NOT NULL,\n        category TEXT NOT NULL,\n        image_url TEXT,\n        required_points INTEGER,\n        required_steps JSONB,\n        is_secret BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n    console.log(\"Created badges table\");\n\n    // Create user_badges table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS user_badges (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER NOT NULL,\n        badge_id INTEGER NOT NULL,\n        earned_at TIMESTAMPTZ NOT NULL,\n        is_displayed BOOLEAN DEFAULT TRUE,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        UNIQUE(user_id, badge_id)\n      )\n    `);\n    console.log(\"Created user_badges table\");\n\n    // Create user_game_stats table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS user_game_stats (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER NOT NULL UNIQUE,\n        level INTEGER NOT NULL DEFAULT 1,\n        total_points INTEGER NOT NULL DEFAULT 0,\n        completed_steps INTEGER NOT NULL DEFAULT 0,\n        earned_badges INTEGER NOT NULL DEFAULT 0,\n        streak_days INTEGER NOT NULL DEFAULT 0,\n        last_active TIMESTAMPTZ NOT NULL,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n    console.log(\"Created user_game_stats table\");\n\n    // Seed initial data if needed\n    await seedInitialData();\n\n    console.log(\"Migration completed successfully\");\n  } catch (error) {\n    console.error(\"Migration failed:\", error);\n    throw error;\n  }\n}\n\nasync function seedInitialData() {\n  // Add some initial onboarding steps\n  await db.execute(sql`\n    INSERT INTO onboarding_steps (title, description, type, content, \"order\", estimated_duration, points)\n    VALUES \n      ('Welcome to MetaWorks', 'Introduction to the cybersecurity compliance platform', 'introduction', '{\"content\": \"Welcome to MetaWorks, your comprehensive cybersecurity compliance platform. This platform is designed to help you manage and improve your organization''s security posture.\"}', 1, 5, 10),\n      ('Complete Your Profile', 'Set up your company information and profile', 'profile', '{\"content\": \"Fill in your company details and upload your company logo to personalize your dashboard.\"}', 2, 10, 20),\n      ('Security Assessment Introduction', 'Learn how to conduct your first security assessment', 'tutorial', '{\"content\": \"This tutorial will guide you through the process of conducting your first security assessment using the platform.\"}', 3, 15, 30),\n      ('ECC Framework Overview', 'Overview of the NCA Essential Cybersecurity Controls', 'knowledge', '{\"content\": \"The ECC framework consists of 29 essential controls divided into 5 main domains. This overview will help you understand the framework structure.\"}', 4, 20, 40)\n    ON CONFLICT (id) DO NOTHING\n  `);\n  \n  // Add some initial badges\n  await db.execute(sql`\n    INSERT INTO badges (name, description, category, image_url, required_points)\n    VALUES \n      ('Newcomer', 'Completed your first onboarding step', 'onboarding', '/badges/newcomer.svg', 10),\n      ('Profile Master', 'Completed your company profile setup', 'profile', '/badges/profile-master.svg', 30),\n      ('Assessment Novice', 'Completed your first security assessment', 'assessment', '/badges/assessment-novice.svg', 50),\n      ('Security Champion', 'Reached level 5 in security knowledge', 'achievement', '/badges/security-champion.svg', 200)\n    ON CONFLICT (id) DO NOTHING\n  `);\n  \n  console.log(\"Seeded initial data\");\n}\n\ncreateOnboardingTables()\n  .then(() => {\n    console.log(\"Exiting...\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Migration script failed:\", error);\n    process.exit(1);\n  });","size_bytes":5459},"scripts/seed-controls.js":{"content":"import { db } from '../server/db.js';\nimport { controls } from '../shared/schema.js';\n\nasync function seedControls() {\n  try {\n    // Check if db is available\n    if (!db) {\n      console.error('Database not available');\n      return;\n    }\n\n    // First check if controls already exist\n    const existingControls = await db.select().from(controls);\n    \n    if (existingControls.length > 0) {\n      console.log(`${existingControls.length} controls already exist. Skipping seeding.`);\n      return;\n    }\n\n    // Insert controls for domain 1 (Cybersecurity Governance)\n    const controlsToInsert = [\n      {\n        domainId: 1,\n        name: 'Cybersecurity Strategy',\n        controlId: 'ECC-1-1-1',\n        description: 'The organization shall establish a cybersecurity strategy aligned with its business objectives and the national cybersecurity strategy.',\n        guidance: 'Develop and document a cybersecurity strategy that includes specific goals, objectives, and priorities.',\n        maturityLevel: 2,\n        implementationGuide: 'Strategy should be approved by senior management and reviewed annually.'\n      },\n      {\n        domainId: 1,\n        name: 'Cybersecurity Policies',\n        controlId: 'ECC-1-1-2',\n        description: 'The organization shall establish and document cybersecurity policies, standards, and procedures.',\n        guidance: 'Develop and maintain a comprehensive set of cybersecurity policies covering all relevant areas.',\n        maturityLevel: 1,\n        implementationGuide: 'Policies should be approved by management and reviewed at least annually.'\n      },\n      {\n        domainId: 1,\n        name: 'Cybersecurity Roles and Responsibilities',\n        controlId: 'ECC-1-2-1',\n        description: 'The organization shall define and document cybersecurity roles and responsibilities.',\n        guidance: 'Clearly define the roles and responsibilities for cybersecurity throughout the organization.',\n        maturityLevel: 1,\n        implementationGuide: 'Roles should include a CISO or equivalent position with appropriate authority.'\n      },\n      {\n        domainId: 1,\n        name: 'Risk Management',\n        controlId: 'ECC-1-3-1',\n        description: 'The organization shall establish and implement a cybersecurity risk management program.',\n        guidance: 'Develop and implement a risk management framework that identifies, assesses, and mitigates cybersecurity risks.',\n        maturityLevel: 2,\n        implementationGuide: 'Risk assessments should be conducted at least annually and when significant changes occur.'\n      },\n      {\n        domainId: 1,\n        name: 'Compliance Management',\n        controlId: 'ECC-1-4-1',\n        description: 'The organization shall establish and implement a cybersecurity compliance management program.',\n        guidance: 'Identify and comply with applicable cybersecurity laws, regulations, and standards.',\n        maturityLevel: 2,\n        implementationGuide: 'Conduct regular compliance assessments and address any gaps.'\n      }\n    ];\n\n    console.log('Inserting controls...');\n    for (const control of controlsToInsert) {\n      console.log(`Inserting control: ${control.name}`);\n      \n      // Insert the control\n      await db.insert(controls).values({\n        domainId: control.domainId,\n        name: control.name,\n        description: control.description,\n        controlId: control.controlId,\n        guidance: control.guidance,\n        maturityLevel: control.maturityLevel,\n        implementationGuide: control.implementationGuide,\n        referenceLinks: null,\n        order: 0  // Default order\n      });\n    }\n\n    console.log('Seeding controls completed successfully!');\n  } catch (error) {\n    console.error('Error seeding controls:', error);\n  } finally {\n    process.exit(0);\n  }\n}\n\nseedControls();","size_bytes":3821},"scripts/seed-db.ts":{"content":"import { db } from '../server/db';\nimport { frameworks, domains, controls } from '../shared/schema';\n\nasync function seedFrameworks() {\n  try {\n    console.log('Seeding frameworks, domains, and controls...');\n    \n    // Check if frameworks already exist\n    const existingFrameworks = await db.select().from(frameworks);\n    \n    if (existingFrameworks.length > 0) {\n      console.log('Frameworks already exist. Skipping seed.');\n      return;\n    }\n    \n    // NCA ECC Framework\n    const [eccFramework] = await db.insert(frameworks).values({\n      name: 'NCA Essential Cybersecurity Controls',\n      displayName: 'NCA ECC',\n      description: 'Saudi National Cybersecurity Authority Essential Cybersecurity Controls',\n      version: '1.0',\n      referenceUrl: 'https://nca.gov.sa',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', eccFramework.name);\n    \n    // ECC Domains\n    const eccDomains = [\n      {\n        frameworkId: eccFramework.id,\n        name: 'Cybersecurity Governance',\n        displayName: 'Governance',\n        order: 1,\n        code: 'ECC-1',\n        description: 'Controls related to cybersecurity governance and leadership',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Cybersecurity Risk Management',\n        displayName: 'Risk Management',\n        order: 2,\n        code: 'ECC-2',\n        description: 'Controls related to risk management processes and procedures',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Cybersecurity Operations',\n        displayName: 'Operations',\n        order: 3,\n        code: 'ECC-3',\n        description: 'Controls related to security operations and incident management',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Technology Security',\n        displayName: 'Technology',\n        order: 4,\n        code: 'ECC-4',\n        description: 'Controls related to technical security measures and configurations',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Third-Party Cybersecurity',\n        displayName: 'Third-Party',\n        order: 5,\n        code: 'ECC-5',\n        description: 'Controls related to managing third-party and vendor security',\n      },\n    ];\n    \n    // Insert domains\n    for (const domainData of eccDomains) {\n      const [domain] = await db.insert(domains).values(domainData).returning();\n      console.log(`Created domain: ${domain.code} - ${domain.name}`);\n      \n      // Sample controls for each domain\n      const domainControls = generateControlsForDomain(domain);\n      \n      // Insert controls\n      for (const controlData of domainControls) {\n        await db.insert(controls).values(controlData);\n      }\n      \n      console.log(`Added ${domainControls.length} controls to domain ${domain.code}`);\n    }\n    \n    // SAMA Framework\n    const [samaFramework] = await db.insert(frameworks).values({\n      name: 'SAMA Cyber Security Framework',\n      displayName: 'SAMA CSF',\n      description: 'Saudi Central Bank (SAMA) Cyber Security Framework',\n      version: '1.0',\n      referenceUrl: 'https://sama.gov.sa',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', samaFramework.name);\n    \n    // ISO 27001 Framework\n    const [isoFramework] = await db.insert(frameworks).values({\n      name: 'ISO/IEC 27001',\n      displayName: 'ISO 27001',\n      description: 'International Standard for Information Security Management Systems',\n      version: '2022',\n      referenceUrl: 'https://www.iso.org/standard/27001',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', isoFramework.name);\n    \n    // PDPL Framework\n    const [pdplFramework] = await db.insert(frameworks).values({\n      name: 'Saudi Arabia PDPL',\n      displayName: 'SA PDPL',\n      description: 'Saudi Arabia Personal Data Protection Law',\n      version: '2021',\n      referenceUrl: 'https://ndmo.gov.sa',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', pdplFramework.name);\n    \n    console.log('Seeding completed successfully!');\n  } catch (error) {\n    console.error('Error seeding frameworks:', error);\n  } finally {\n    process.exit(0);\n  }\n}\n\n// Helper function to generate sample controls for a domain\nfunction generateControlsForDomain(domain: any) {\n  const controls = [];\n  \n  // Different number of controls per domain for more realistic data\n  const numControls = 5 + Math.floor(Math.random() * 5); // 5-9 controls per domain\n  \n  for (let i = 1; i <= numControls; i++) {\n    let controlName, controlDescription;\n    \n    switch (domain.code) {\n      case 'ECC-1':\n        controlName = `Cybersecurity Policy ${i}`;\n        controlDescription = `Establish and maintain a comprehensive cybersecurity policy addressing organizational requirements.`;\n        break;\n      case 'ECC-2':\n        controlName = `Risk Assessment ${i}`;\n        controlDescription = `Conduct regular cybersecurity risk assessments to identify and manage risks.`;\n        break;\n      case 'ECC-3':\n        controlName = `Security Monitoring ${i}`;\n        controlDescription = `Implement continuous monitoring of security events and incidents.`;\n        break;\n      case 'ECC-4':\n        controlName = `Access Control ${i}`;\n        controlDescription = `Implement strong access control mechanisms for all systems and data.`;\n        break;\n      case 'ECC-5':\n        controlName = `Vendor Management ${i}`;\n        controlDescription = `Establish processes for assessing and managing third-party cybersecurity risks.`;\n        break;\n      default:\n        controlName = `Control ${i}`;\n        controlDescription = `Generic control description`;\n    }\n    \n    controls.push({\n      domainId: domain.id,\n      controlId: `${domain.code}.${i}`,\n      name: controlName,\n      description: controlDescription,\n      guidance: 'Follow industry best practices and organizational policies.',\n      maturityLevel: 1 + Math.floor(Math.random() * 3), // 1-3\n      implementationGuide: 'Follow industry best practices and organizational policies.',\n    });\n  }\n  \n  return controls;\n}\n\nseedFrameworks();","size_bytes":6429},"scripts/seed-frameworks.js":{"content":"#!/usr/bin/env node\nimport dotenv from 'dotenv';\nimport { db } from '../server/db.ts';\nimport { frameworks, domains, controls } from '../shared/schema.ts';\n\ndotenv.config();\n\nasync function seedFrameworks() {\n  try {\n    console.log('Seeding frameworks, domains, and controls...');\n    \n    // Check if frameworks already exist\n    const existingFrameworks = await db.select().from(frameworks);\n    \n    if (existingFrameworks.length > 0) {\n      console.log('Frameworks already exist. Skipping seed.');\n      return;\n    }\n    \n    // NCA ECC Framework\n    const [eccFramework] = await db.insert(frameworks).values({\n      name: 'NCA Essential Cybersecurity Controls',\n      description: 'Saudi National Cybersecurity Authority Essential Cybersecurity Controls',\n      version: '1.0',\n      referenceUrl: 'https://nca.gov.sa',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', eccFramework.name);\n    \n    // ECC Domains\n    const eccDomains = [\n      {\n        frameworkId: eccFramework.id,\n        name: 'Cybersecurity Governance',\n        code: 'ECC-1',\n        description: 'Controls related to cybersecurity governance and leadership',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Cybersecurity Risk Management',\n        code: 'ECC-2',\n        description: 'Controls related to risk management processes and procedures',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Cybersecurity Operations',\n        code: 'ECC-3',\n        description: 'Controls related to security operations and incident management',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Technology Security',\n        code: 'ECC-4',\n        description: 'Controls related to technical security measures and configurations',\n      },\n      {\n        frameworkId: eccFramework.id,\n        name: 'Third-Party Cybersecurity',\n        code: 'ECC-5',\n        description: 'Controls related to managing third-party and vendor security',\n      },\n    ];\n    \n    // Insert domains\n    for (const domainData of eccDomains) {\n      const [domain] = await db.insert(domains).values(domainData).returning();\n      console.log(`Created domain: ${domain.code} - ${domain.name}`);\n      \n      // Sample controls for each domain\n      const domainControls = generateControlsForDomain(domain);\n      \n      // Insert controls\n      for (const controlData of domainControls) {\n        await db.insert(controls).values(controlData);\n      }\n      \n      console.log(`Added ${domainControls.length} controls to domain ${domain.code}`);\n    }\n    \n    // SAMA Framework\n    const [samaFramework] = await db.insert(frameworks).values({\n      name: 'SAMA Cyber Security Framework',\n      description: 'Saudi Central Bank (SAMA) Cyber Security Framework',\n      version: '1.0',\n      referenceUrl: 'https://sama.gov.sa',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', samaFramework.name);\n    \n    // ISO 27001 Framework\n    const [isoFramework] = await db.insert(frameworks).values({\n      name: 'ISO/IEC 27001',\n      description: 'International Standard for Information Security Management Systems',\n      version: '2022',\n      referenceUrl: 'https://www.iso.org/standard/27001',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', isoFramework.name);\n    \n    // PDPL Framework\n    const [pdplFramework] = await db.insert(frameworks).values({\n      name: 'Saudi Arabia PDPL',\n      description: 'Saudi Arabia Personal Data Protection Law',\n      version: '2021',\n      referenceUrl: 'https://ndmo.gov.sa',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }).returning();\n    \n    console.log('Created framework:', pdplFramework.name);\n    \n    console.log('Seeding completed successfully!');\n  } catch (error) {\n    console.error('Error seeding frameworks:', error);\n  } finally {\n    process.exit(0);\n  }\n}\n\n// Helper function to generate sample controls for a domain\nfunction generateControlsForDomain(domain) {\n  const controls = [];\n  \n  // Different number of controls per domain for more realistic data\n  const numControls = 5 + Math.floor(Math.random() * 5); // 5-9 controls per domain\n  \n  for (let i = 1; i <= numControls; i++) {\n    let controlName, controlDescription;\n    \n    switch (domain.code) {\n      case 'ECC-1':\n        controlName = `Cybersecurity Policy ${i}`;\n        controlDescription = `Establish and maintain a comprehensive cybersecurity policy addressing organizational requirements.`;\n        break;\n      case 'ECC-2':\n        controlName = `Risk Assessment ${i}`;\n        controlDescription = `Conduct regular cybersecurity risk assessments to identify and manage risks.`;\n        break;\n      case 'ECC-3':\n        controlName = `Security Monitoring ${i}`;\n        controlDescription = `Implement continuous monitoring of security events and incidents.`;\n        break;\n      case 'ECC-4':\n        controlName = `Access Control ${i}`;\n        controlDescription = `Implement strong access control mechanisms for all systems and data.`;\n        break;\n      case 'ECC-5':\n        controlName = `Vendor Management ${i}`;\n        controlDescription = `Establish processes for assessing and managing third-party cybersecurity risks.`;\n        break;\n      default:\n        controlName = `Control ${i}`;\n        controlDescription = `Generic control description`;\n    }\n    \n    controls.push({\n      domainId: domain.id,\n      name: controlName,\n      code: `${domain.code}.${i}`,\n      description: controlDescription,\n      implementationGuidance: 'Follow industry best practices and organizational policies.',\n      priority: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low',\n    });\n  }\n  \n  return controls;\n}\n\nseedFrameworks();","size_bytes":6046},"scripts/seed-sama-framework.js":{"content":"#!/usr/bin/env node\nimport dotenv from 'dotenv';\nimport { db } from '../server/db.ts';\nimport { frameworks, domains, controls } from '../shared/schema.ts';\nimport { eq } from 'drizzle-orm';\n\ndotenv.config();\n\nasync function seedSAMAFramework() {\n  try {\n    console.log('Seeding SAMA framework domains and controls...');\n    \n    // First, find the SAMA framework ID\n    const samaFrameworks = await db.select().from(frameworks).where(eq(frameworks.name, 'SAMA Cyber Security Framework'));\n    \n    if (samaFrameworks.length === 0) {\n      console.log('SAMA framework not found. Make sure to run seed-frameworks.js first.');\n      return;\n    }\n    \n    const samaFramework = samaFrameworks[0];\n    console.log(`Found SAMA framework with ID: ${samaFramework.id}`);\n    \n    // Check if SAMA domains already exist\n    const existingSAMADomains = await db.select().from(domains).where(eq(domains.frameworkId, samaFramework.id));\n    \n    if (existingSAMADomains.length > 0) {\n      console.log('SAMA domains already exist. Skipping seed.');\n      return;\n    }\n    \n    // SAMA Domains\n    const samaDomains = [\n      {\n        frameworkId: samaFramework.id,\n        name: 'Leadership and Governance',\n        displayName: 'Leadership and Governance',\n        description: 'Controls related to leadership commitment and governance structures',\n        order: 1\n      },\n      {\n        frameworkId: samaFramework.id,\n        name: 'Risk Management',\n        displayName: 'Risk Management',\n        description: 'Controls related to cybersecurity risk management processes',\n        order: 2\n      },\n      {\n        frameworkId: samaFramework.id,\n        name: 'Information Security',\n        displayName: 'Information Security',\n        description: 'Controls related to information security policies and procedures',\n        order: 3\n      },\n      {\n        frameworkId: samaFramework.id,\n        name: 'Identity and Access Management',\n        displayName: 'Identity and Access Management',\n        description: 'Controls related to identity verification and access controls',\n        order: 4\n      },\n      {\n        frameworkId: samaFramework.id,\n        name: 'Third-Party Security',\n        displayName: 'Third-Party Security',\n        description: 'Controls related to managing third-party security risks',\n        order: 5\n      },\n      {\n        frameworkId: samaFramework.id,\n        name: 'Secure Development',\n        displayName: 'Secure Development',\n        description: 'Controls related to secure software development practices',\n        order: 6\n      },\n      {\n        frameworkId: samaFramework.id,\n        name: 'Security Operations',\n        displayName: 'Security Operations',\n        description: 'Controls related to security monitoring and operations',\n        order: 7\n      }\n    ];\n    \n    // Insert domains\n    for (const domainData of samaDomains) {\n      const [domain] = await db.insert(domains).values(domainData).returning();\n      console.log(`Created domain: ${domain.displayName}`);\n      \n      // Generate controls for this domain\n      const domainControls = generateSAMAControlsForDomain(domain);\n      \n      // Insert controls\n      for (const controlData of domainControls) {\n        await db.insert(controls).values(controlData);\n      }\n      \n      console.log(`Added ${domainControls.length} controls to domain ${domain.displayName}`);\n    }\n    \n    console.log('SAMA framework seeding completed successfully!');\n  } catch (error) {\n    console.error('Error seeding SAMA framework:', error);\n  } finally {\n    process.exit(0);\n  }\n}\n\n// Helper function to generate SAMA controls for a domain\nfunction generateSAMAControlsForDomain(domain) {\n  const controls = [];\n  \n  // Different controls based on domain\n  switch (domain.name) {\n    case 'Leadership and Governance':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-LG-1', 'Cybersecurity Strategy', 'Develop and maintain a cybersecurity strategy aligned with business objectives', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-LG-2', 'Security Organization', 'Establish a dedicated cybersecurity organization with clear roles and responsibilities', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-LG-3', 'Policy Framework', 'Implement a comprehensive cybersecurity policy framework', 'established'),\n        createSAMAControl(domain.id, 'SAMA-LG-4', 'Compliance Management', 'Establish processes to monitor and ensure compliance with regulatory requirements', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-LG-5', 'Security Culture', 'Foster a security-aware culture through regular awareness and training programs', 'leading')\n      );\n      break;\n      \n    case 'Risk Management':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-RM-1', 'Risk Assessment', 'Conduct regular risk assessments to identify and prioritize cybersecurity risks', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-RM-2', 'Risk Treatment', 'Implement risk treatment plans to address identified risks', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-RM-3', 'Risk Monitoring', 'Continuously monitor and report on cybersecurity risks', 'established'),\n        createSAMAControl(domain.id, 'SAMA-RM-4', 'Asset Management', 'Maintain an inventory of information assets and their associated risks', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-RM-5', 'Risk Integration', 'Integrate cybersecurity risk management with enterprise risk management', 'leading')\n      );\n      break;\n      \n    case 'Information Security':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-IS-1', 'Information Classification', 'Classify information based on sensitivity and criticality', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-IS-2', 'Data Protection', 'Implement controls to protect data in transit and at rest', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-IS-3', 'Cryptography', 'Use appropriate cryptographic controls to protect sensitive information', 'established'),\n        createSAMAControl(domain.id, 'SAMA-IS-4', 'Media Handling', 'Establish procedures for handling, storing, and disposing of media', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-IS-5', 'Data Leakage Prevention', 'Implement DLP solutions to prevent unauthorized data disclosure', 'leading')\n      );\n      break;\n      \n    case 'Identity and Access Management':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-IAM-1', 'User Access Management', 'Implement processes for user registration, provisioning, and de-provisioning', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-IAM-2', 'Authentication', 'Enforce strong authentication mechanisms', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-IAM-3', 'Privileged Access', 'Implement enhanced controls for privileged access management', 'established'),\n        createSAMAControl(domain.id, 'SAMA-IAM-4', 'Access Reviews', 'Conduct regular access reviews to ensure appropriate access rights', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-IAM-5', 'Identity Governance', 'Implement identity governance to automate and integrate IAM processes', 'leading')\n      );\n      break;\n      \n    case 'Third-Party Security':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-TPS-1', 'Vendor Risk Assessment', 'Assess security risks associated with third-party service providers', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-TPS-2', 'Contractual Requirements', 'Include security requirements in contracts with third parties', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-TPS-3', 'Ongoing Monitoring', 'Regularly monitor third-party compliance with security requirements', 'established'),\n        createSAMAControl(domain.id, 'SAMA-TPS-4', 'Service Level Agreements', 'Define security-related SLAs with third parties', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-TPS-5', 'Integrated Risk Management', 'Integrate third-party risk management with enterprise risk processes', 'leading')\n      );\n      break;\n      \n    case 'Secure Development':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-SD-1', 'Secure SDLC', 'Implement a secure software development lifecycle', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-SD-2', 'Secure Coding', 'Establish secure coding standards and guidelines', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-SD-3', 'Security Testing', 'Conduct regular security testing of applications', 'established'),\n        createSAMAControl(domain.id, 'SAMA-SD-4', 'Vulnerability Management', 'Implement a vulnerability management program', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-SD-5', 'DevSecOps', 'Integrate security into DevOps practices (DevSecOps)', 'leading')\n      );\n      break;\n      \n    case 'Security Operations':\n      controls.push(\n        createSAMAControl(domain.id, 'SAMA-SO-1', 'Security Monitoring', 'Implement security monitoring capabilities', 'baseline'),\n        createSAMAControl(domain.id, 'SAMA-SO-2', 'Incident Response', 'Establish incident response procedures', 'evolving'),\n        createSAMAControl(domain.id, 'SAMA-SO-3', 'Security Testing', 'Conduct regular security assessments and penetration testing', 'established'),\n        createSAMAControl(domain.id, 'SAMA-SO-4', 'Threat Intelligence', 'Utilize threat intelligence to enhance security operations', 'predictable'),\n        createSAMAControl(domain.id, 'SAMA-SO-5', 'Security Automation', 'Implement automation in security operations for efficiency and consistency', 'leading')\n      );\n      break;\n  }\n  \n  return controls;\n}\n\n// Helper function to create a SAMA control with maturity levels\nfunction createSAMAControl(domainId, controlId, name, description, maturityLevel) {\n  // Map maturity level to numeric value\n  const maturityMap = {\n    'baseline': 1,\n    'evolving': 2,\n    'established': 3,\n    'predictable': 4,\n    'leading': 5\n  };\n  \n  const maturityScore = maturityMap[maturityLevel] || 1;\n  \n  // Implementation guidance based on maturity level\n  let implementationGuide = '';\n  switch (maturityLevel) {\n    case 'baseline':\n      implementationGuide = 'Implement basic controls to meet minimum requirements. Focus on essential protection mechanisms.';\n      break;\n    case 'evolving':\n      implementationGuide = 'Build upon baseline controls with more structured approach. Begin formalizing processes and procedures.';\n      break;\n    case 'established':\n      implementationGuide = 'Implement comprehensive controls with formal, documented processes. Ensure consistent implementation across the organization.';\n      break;\n    case 'predictable':\n      implementationGuide = 'Establish metrics to measure control effectiveness. Use data to drive continuous improvement.';\n      break;\n    case 'leading':\n      implementationGuide = 'Implement innovative approaches and industry-leading practices. Automate and integrate controls where possible.';\n      break;\n  }\n  \n  return {\n    domainId,\n    controlId,\n    name,\n    description,\n    guidance: `This control requires a ${maturityLevel} maturity level of implementation.`,\n    maturityLevel: maturityScore,\n    referenceLinks: 'https://sama.gov.sa/cybersecurity',\n    implementationGuide: implementationGuide,\n    frameworkSpecific: {\n      samaMaturityLevel: maturityLevel,\n      samaMaturityDescription: getSAMAMaturityDescription(maturityLevel),\n      assessmentCriteria: getSAMAAssessmentCriteria(maturityLevel)\n    }\n  };\n}\n\n// Helper function to get maturity level description\nfunction getSAMAMaturityDescription(maturityLevel) {\n  switch (maturityLevel) {\n    case 'baseline':\n      return 'Basic controls are in place but may be ad-hoc and reactive';\n    case 'evolving':\n      return 'Controls are documented and evolving but not fully consistent';\n    case 'established':\n      return 'Controls are well-defined, documented and consistently implemented';\n    case 'predictable':\n      return 'Controls are measured and predictable with quantitative management';\n    case 'leading':\n      return 'Controls are optimized with continuous improvement and innovation';\n    default:\n      return 'Unknown maturity level';\n  }\n}\n\n// Helper function to get assessment criteria for each maturity level\nfunction getSAMAAssessmentCriteria(maturityLevel) {\n  switch (maturityLevel) {\n    case 'baseline':\n      return [\n        'Basic documentation exists',\n        'Manual processes are defined',\n        'Essential controls are implemented'\n      ];\n    case 'evolving':\n      return [\n        'Processes are documented but may vary across the organization',\n        'More comprehensive controls are implemented',\n        'Some training is conducted',\n        'Basic metrics are collected'\n      ];\n    case 'established':\n      return [\n        'Standardized processes are implemented consistently',\n        'Regular testing of controls occurs',\n        'Formalized training program exists',\n        'Regular reporting to management'\n      ];\n    case 'predictable':\n      return [\n        'Quantitative measurement of control effectiveness',\n        'Data-driven improvement of controls',\n        'Integration with risk management processes',\n        'Regular independent assessment'\n      ];\n    case 'leading':\n      return [\n        'Automation of control monitoring and implementation',\n        'Integration across organization and with external stakeholders',\n        'Proactive approach to emerging threats',\n        'Contributing to industry standards and best practices'\n      ];\n    default:\n      return ['No criteria defined'];\n  }\n}\n\nseedSAMAFramework();","size_bytes":13721},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"metaworks-cybersecurity-secret\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 24 * 60 * 60 * 1000, // 1 day\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n  \n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).send(\"Username already exists\");\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3053},"server/db.ts":{"content":"\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nconst DATABASE_URL = process.env.DATABASE_URL;\n\nif (!DATABASE_URL) {\n  console.warn(\"Database URL not found. Running in limited mode.\");\n}\n\n// Use connection pooling with fallback\nexport const pool = DATABASE_URL ? new Pool({ \n  connectionString: DATABASE_URL,\n  max: 10,\n  connectionTimeoutMillis: 5000\n}) : null;\n\nif (pool) {\n  pool.on('error', (err) => {\n    console.error('Unexpected error on idle database client', err);\n  });\n}\n\nexport const db = pool ? drizzle({ client: pool, schema }) : null;\n","size_bytes":722},"server/file-service.ts":{"content":"import { Request } from \"express\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { fileURLToPath } from \"url\";\nimport { storage as dbStorage } from \"./storage\";\nimport { files, insertFileSchema, type InsertFile } from \"@shared/schema\";\nimport { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq } from \"drizzle-orm\";\n\n// Setup storage locations\nconst UPLOADS_DIR = path.resolve(\"uploads\");\nconst LOGOS_DIR = path.join(UPLOADS_DIR, \"logos\");\nconst DOCUMENTS_DIR = path.join(UPLOADS_DIR, \"documents\");\n\n// Ensure directories exist\nfs.ensureDirSync(UPLOADS_DIR);\nfs.ensureDirSync(LOGOS_DIR);\nfs.ensureDirSync(DOCUMENTS_DIR);\n\n// Configure multer storage\nconst logoStorage = multer.diskStorage({\n  destination: (_req, _file, cb) => {\n    cb(null, LOGOS_DIR);\n  },\n  filename: (_req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    const ext = path.extname(file.originalname);\n    cb(null, `logo-${uniqueSuffix}${ext}`);\n  },\n});\n\nconst documentStorage = multer.diskStorage({\n  destination: (_req, _file, cb) => {\n    cb(null, DOCUMENTS_DIR);\n  },\n  filename: (_req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    const ext = path.extname(file.originalname);\n    cb(null, `document-${uniqueSuffix}${ext}`);\n  },\n});\n\n// Create multer upload instances\nexport const logoUpload = multer({\n  storage: logoStorage,\n  limits: {\n    fileSize: 2 * 1024 * 1024, // 2MB\n  },\n  fileFilter: (_req, file, cb) => {\n    const allowedTypes = [\n      \"image/jpeg\",\n      \"image/png\",\n      \"image/gif\",\n      \"image/svg+xml\",\n    ];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Invalid file type. Only JPEG, PNG, GIF, and SVG are allowed.\"));\n    }\n  },\n});\n\nexport const documentUpload = multer({\n  storage: documentStorage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n  },\n  fileFilter: (_req, file, cb) => {\n    const allowedTypes = [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Invalid file type. Only PDF and DOCX files are allowed.\"));\n    }\n  },\n});\n\n// Initialize PostgreSQL client\nlet db = null;\nif (process.env.DATABASE_URL) {\n  try {\n    const sql = neon(process.env.DATABASE_URL);\n    db = drizzle(sql);\n  } catch (error) {\n    console.error(\"Error connecting to database:\", error);\n  }\n}\n\n// File service functions\nexport const saveFileToDatabase = async (\n  file: Express.Multer.File,\n  fileType: string,\n  userId?: number\n): Promise<number> => {\n  if (db) {\n    // Using PostgreSQL\n    try {\n      const fileData: InsertFile = {\n        filename: file.filename,\n        originalName: file.originalname,\n        mimeType: file.mimetype,\n        size: file.size,\n        path: file.path,\n        uploadedBy: userId,\n        fileType: fileType,\n      };\n      \n      const result = await db.insert(files).values(fileData).returning({ id: files.id });\n      return result[0].id;\n    } catch (error) {\n      console.error(\"Error saving file to database:\", error);\n      throw error;\n    }\n  } else {\n    // Using in-memory storage\n    const fileData = {\n      id: Math.floor(Math.random() * 10000),\n      filename: file.filename,\n      originalName: file.originalname,\n      mimeType: file.mimetype,\n      size: file.size,\n      path: file.path,\n      uploadedAt: new Date(),\n      uploadedBy: userId,\n      fileType: fileType,\n    };\n    \n    // Store file metadata in memory\n    // Note: In a real implementation, we would store this in dbStorage\n    return fileData.id;\n  }\n};\n\nexport const getFileById = async (fileId: number) => {\n  if (db) {\n    // Using PostgreSQL\n    try {\n      const fileData = await db.select().from(files).where(eq(files.id, fileId));\n      return fileData[0];\n    } catch (error) {\n      console.error(\"Error getting file from database:\", error);\n      throw error;\n    }\n  } else {\n    // Using in-memory storage\n    // Note: In a real implementation, we would retrieve this from dbStorage\n    return null;\n  }\n};\n\nexport const deleteFile = async (fileId: number) => {\n  const file = await getFileById(fileId);\n  if (file) {\n    // Delete physical file\n    await fs.remove(file.path);\n    \n    if (db) {\n      // Delete from database\n      await db.delete(files).where(eq(files.id, fileId));\n    }\n  }\n};","size_bytes":4585},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/init-db.ts":{"content":"\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { Pool } from '@neondatabase/serverless';\nimport * as schema from '@shared/schema';\n\nasync function initDb() {\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL not found');\n    process.exit(1);\n  }\n\n  const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n  const db = drizzle({ client: pool, schema });\n  \n  try {\n    // Add your schema initialization queries here\n    console.log('Database initialized successfully');\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\ninitDb();\n","size_bytes":650},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, hashPassword } from \"./auth\";\nimport path from \"path\";\nimport { logoUpload, documentUpload, saveFileToDatabase, getFileById, deleteFile } from \"./file-service\";\nimport dotenv from \"dotenv\";\nimport express from 'express';\n\n// Import API routes\nimport assessmentsRouter from \"./api/assessments\";\nimport assessmentResultsRouter from \"./api/assessment-results\";\nimport frameworksRouter from \"./api/frameworks\";\nimport domainsRouter from \"./api/domains\";\nimport subdomainsRouter from \"./api/subdomains\";\nimport risksRouter from './api/risks';\nimport assessmentRisksRouter from './api/assessment-risks';\nimport controlsRouter from \"./api/controls\";\nimport policyManagementRouter from \"./api/policy-management\";\nimport companyInfoRouter from \"./api/company-info\";\nimport { registerReportsRoutes } from \"./api/reports\";\nimport { onboardingRouter } from \"./api/onboarding\";\nimport { gamificationRouter } from \"./api/gamification\";\nimport didAgentRouter from \"./api/did-agent\";\nimport progressRouter from \"./api/progress\";\nimport riskPredictionRouter from \"./api/risk-prediction\";\nimport contactRouter from \"./api/contact\";\nimport bookDemoRouter from \"./api/book-demo\";\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Load environment variables\n  dotenv.config();\n\n  // Setup authentication endpoints\n  setupAuth(app);\n\n  // Clerk authentication API key endpoint\n  app.get(\"/api/clerk-key\", (req, res) => {\n    const publishableKey = process.env.CLERK_PUBLISHABLE_KEY || \"\";\n    console.log(\"Sending Clerk publishable key:\", publishableKey ? \"[set]\" : \"[missing]\");\n    res.json({ publishableKey });\n  });\n\n  // Use our dedicated DID Agent router (removed older implementation in favor of the modular one)\n\n  // API endpoints for company information\n  app.post(\"/api/company-info\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const companyInfo = await storage.saveCompanyInfo(req.body);\n\n      // Handle cybersecurity staff\n      if (req.body.cybersecurityStaff && Array.isArray(req.body.cybersecurityStaff)) {\n        const staffMembers = req.body.cybersecurityStaff.filter((name: string) => name.trim() !== '');\n\n        if (staffMembers.length > 0) {\n          await storage.saveCybersecurityStaff(companyInfo.id, staffMembers);\n        }\n      }\n\n      res.status(201).json(companyInfo);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/company-info\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const companyInfo = await storage.getCompanyInfo();\n      const staffMembers = await storage.getCybersecurityStaff(companyInfo?.id || 0);\n\n      // If company has a logo, get the file info\n      let logoUrl = null;\n      if (companyInfo?.logoId) {\n        const logoFile = await getFileById(companyInfo.logoId);\n        if (logoFile) {\n          logoUrl = `/uploads/logos/${path.basename(logoFile.path)}`;\n        }\n      }\n\n      res.json({\n        ...companyInfo,\n        logoUrl,\n        cybersecurityStaff: staffMembers.map(staff => staff.staffName)\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // File upload endpoints\n  app.post(\"/api/upload/logo\", logoUpload.single(\"logo\"), async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      if (!req.file) return res.status(400).json({ error: \"No file uploaded\" });\n\n      const userId = req.user?.id;\n      const fileId = await saveFileToDatabase(req.file, \"logo\", userId);\n\n      // Update company info with the logo file ID\n      const companyInfo = await storage.getCompanyInfo();\n      if (companyInfo) {\n        // If there was a previous logo, delete it\n        if (companyInfo.logoId) {\n          await deleteFile(companyInfo.logoId);\n        }\n\n        await storage.saveCompanyInfo({\n          ...companyInfo,\n          logoId: fileId\n        });\n      }\n\n      res.status(201).json({ \n        fileId,\n        filename: req.file.filename,\n        url: `/uploads/logos/${req.file.filename}`\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/upload/document\", documentUpload.single(\"document\"), async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      if (!req.file) return res.status(400).json({ error: \"No file uploaded\" });\n\n      const userId = req.user?.id;\n      const fileId = await saveFileToDatabase(req.file, \"document\", userId);\n\n      res.status(201).json({ \n        fileId,\n        filename: req.file.filename,\n        url: `/uploads/documents/${req.file.filename}`\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Serve uploaded files\n  app.get(\"/uploads/logos/:filename\", (req, res) => {\n    res.sendFile(path.join(process.cwd(), \"uploads\", \"logos\", req.params.filename));\n  });\n\n  app.get(\"/uploads/documents/:filename\", (req, res) => {\n    res.sendFile(path.join(process.cwd(), \"uploads\", \"documents\", req.params.filename));\n  });\n\n  // Serve static files from attached_assets\n  app.use('/attached_assets', express.static(path.join(process.cwd(), 'public', 'attached_assets')));\n\n  // Policy management endpoints\n  app.post(\"/api/policies\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const now = new Date().toISOString();\n      const { fileId, ...policyData } = req.body;\n      \n      // Create policy with file ID if provided\n      const policy = await storage.savePolicy({\n        ...policyData,\n        fileId: fileId || null, // Ensure fileId is null if not provided\n        createdAt: now,\n        updatedAt: now\n      });\n\n      res.status(201).json(policy);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/policies/:policyId/attach-document\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const { policyId } = req.params;\n      const { fileId } = req.body;\n\n      if (!fileId) {\n        return res.status(400).json({ error: \"File ID is required\" });\n      }\n\n      // Update policy with file ID\n      const policy = await storage.getPolicyById(parseInt(policyId));\n      if (!policy) {\n        return res.status(404).json({ error: \"Policy not found\" });\n      }\n\n      const updatedPolicy = await storage.savePolicy({\n        ...policy,\n        fileId,\n        updatedAt: new Date().toISOString()\n      });\n\n      res.json(updatedPolicy);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/policies\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const policies = await storage.getPolicies();\n\n      // Add file URLs to policies that have documents\n      const policiesWithUrls = await Promise.all(policies.map(async (policy) => {\n        let documentUrl = null;\n        if (policy.fileId) {\n          const docFile = await getFileById(policy.fileId);\n          if (docFile) {\n            documentUrl = `/uploads/documents/${path.basename(docFile.path)}`;\n          }\n        }\n        return {\n          ...policy,\n          documentUrl\n        };\n      }));\n\n      res.json(policiesWithUrls);\n    } catch (error) {\n      next(error);\n    }\n  });\n  \n  // Update policy endpoint\n  app.put(\"/api/policies/:id\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const policyId = parseInt(req.params.id);\n      const existingPolicy = await storage.getPolicyById(policyId);\n      \n      if (!existingPolicy) {\n        return res.status(404).json({ error: \"Policy not found\" });\n      }\n      \n      const updatedPolicy = await storage.savePolicy({\n        ...existingPolicy,\n        ...req.body,\n        id: policyId, // Ensure ID doesn't change\n        updatedAt: new Date().toISOString()\n      });\n      \n      res.json(updatedPolicy);\n    } catch (error) {\n      next(error);\n    }\n  });\n  \n  // Delete policy endpoint\n  app.delete(\"/api/policies/:id\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n      \n      const policyId = parseInt(req.params.id);\n      const policy = await storage.getPolicyById(policyId);\n      \n      if (!policy) {\n        return res.status(404).json({ error: \"Policy not found\" });\n      }\n      \n      // If policy has a file, delete it first\n      if (policy.fileId) {\n        await deleteFile(policy.fileId);\n      }\n      \n      await storage.deletePolicy(policyId);\n      res.status(204).send();\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Dashboard access check\napp.get(\"/api/dashboard-access\", async (req, res) => {\n  if (!req.isAuthenticated()) return res.status(401).json({ error: \"Not authenticated\" });\n  const user = req.user;\n  res.json({ \n    hasAdminAccess: user.role === 'admin',\n    hasUserAccess: true\n  });\n});\n\n// User management for admin\n  app.get(\"/api/users\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      // Verify user is admin (in a real app, check user.role === 'admin')\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      // Verify user is admin (in a real app, check user.role === 'admin')\n      const { username, password, role, accessLevel, isActive } = req.body;\n\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).send(\"Username already exists\");\n      }\n\n      // Hash password and create user\n      const user = await storage.createUser({\n        username,\n        password: await hashPassword(password),\n        role,\n        accessLevel,\n        isActive\n      });\n\n      res.status(201).json(user);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Register modular API routers\n  app.use(frameworksRouter);\n  app.use(domainsRouter);\n  app.use(subdomainsRouter);\n  app.use(controlsRouter);\n  app.use(assessmentsRouter);\n  app.use(assessmentResultsRouter);\n  app.use(\"/api/policy-management\", policyManagementRouter);\n  app.use(\"/api/company\", companyInfoRouter);\n  app.use(\"/api/onboarding\", onboardingRouter);\n  app.use(\"/api/gamification\", gamificationRouter);\n  app.use(\"/api/did-agent\", didAgentRouter);\n  app.use(progressRouter);\n  app.use(riskPredictionRouter);\n  \n  // Register reports API routes\n  registerReportsRoutes(app);\n\n\n\n  // Remediation Tasks endpoints\n  app.post(\"/api/remediation-tasks\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const task = await storage.saveRemediationTask(req.body);\n      res.status(201).json(task);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/assessments/:assessmentId/remediation-tasks\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const { assessmentId } = req.params;\n      const tasks = await storage.getRemediationTasksByAssessmentId(parseInt(assessmentId));\n      res.json(tasks);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.put(\"/api/remediation-tasks/:id/status\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) return res.sendStatus(401);\n\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const task = await storage.updateRemediationTaskStatus(parseInt(id), status);\n      res.json(task);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Register risk management routes\n  app.use('/api/risks', risksRouter);\n  app.use('/api/assessment-risks', assessmentRisksRouter);\n\n  // Register contact and demo request routes (public endpoints)\n  app.use(contactRouter);\n  app.use(bookDemoRouter);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":12266},"server/storage.ts":{"content":"import {\n  users,\n  companyInfo,\n  cybersecurityStaff,\n  policies,\n  frameworks,\n  domains,\n  subdomains,\n  controls,\n  assessments,\n  assessmentResults,\n  remediationTasks,\n  files,\n  complianceReports,\n  reportShareLinks,\n  risks,\n  assessmentRisks,\n  policyCategories,\n  policyTemplates,\n  generatedPolicies,\n  onboardingSteps,\n  userProgress,\n  badges,\n  userBadges,\n  userGameStats,\n  type User,\n  type InsertUser,\n  type CompanyInfo,\n  type CybersecurityStaff,\n  type Policy,\n  type Framework,\n  type Domain,\n  type Subdomain,\n  type Control,\n  type Assessment,\n  type AssessmentResult,\n  type RemediationTask,\n  type InsertFramework,\n  type InsertDomain,\n  type InsertSubdomain,\n  type InsertControl,\n  type InsertAssessment,\n  type InsertAssessmentResult,\n  type InsertRemediationTask,\n  type File,\n  type InsertFile,\n  type ComplianceReport,\n  type InsertComplianceReport,\n  type ReportShareLink,\n  type InsertReportShareLink,\n  type PolicyCategory,\n  type InsertPolicyCategory,\n  type PolicyTemplate,\n  type InsertPolicyTemplate,\n  type GeneratedPolicy,\n  type InsertGeneratedPolicy,\n  type OnboardingStep,\n  type InsertOnboardingStep,\n  type UserProgress,\n  type InsertUserProgress,\n  type Badge,\n  type InsertBadge,\n  type UserBadge,\n  type InsertUserBadge,\n  type UserGameStats,\n  type InsertUserGameStats,\n  type Risk,\n  type InsertRisk,\n  type AssessmentRisk,\n  type InsertAssessmentRisk\n} from \"@shared/schema\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql, or, isNull, inArray } from \"drizzle-orm\";\n\nconst PostgresSessionStore = connectPg(session);\n\n// Interface for storage operations\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: Partial<User>): Promise<User>;\n  getUsers(): Promise<User[]>;\n  \n  // Company info management\n  saveCompanyInfo(info: Partial<CompanyInfo>): Promise<CompanyInfo>;\n  getCompanyInfo(): Promise<CompanyInfo | undefined>;\n  \n  // Staff management\n  saveCybersecurityStaff(companyId: number, staffNames: string[]): Promise<CybersecurityStaff[]>;\n  getCybersecurityStaff(companyId: number): Promise<CybersecurityStaff[]>;\n  \n  // Policy management\n  savePolicy(policy: Partial<Policy>): Promise<Policy>;\n  getPolicies(): Promise<Policy[]>;\n  getPolicyById(id: number): Promise<Policy | undefined>;\n  deletePolicy(id: number): Promise<void>;\n  \n  // Framework management\n  saveFramework(framework: InsertFramework): Promise<Framework>;\n  getFrameworks(): Promise<Framework[]>;\n  getFrameworkByName(name: string): Promise<Framework | undefined>;\n  getFrameworkById(id: number): Promise<Framework | undefined>;\n  \n  // Domain management\n  saveDomain(domain: InsertDomain): Promise<Domain>;\n  getDomainsByFrameworkId(frameworkId: number): Promise<Domain[]>;\n  getDomainById(id: number): Promise<Domain | undefined>;\n  \n  // Subdomain management\n  saveSubdomain(subdomain: InsertSubdomain): Promise<Subdomain>;\n  getSubdomainsByDomainId(domainId: number): Promise<Subdomain[]>;\n  getSubdomainById(id: number): Promise<Subdomain | undefined>;\n  \n  // Control management\n  saveControl(control: InsertControl): Promise<Control>;\n  getControlsBySubdomainId(subdomainId: number): Promise<Control[]>;\n  getControlById(id: number): Promise<Control | undefined>;\n  \n  // Assessment management\n  createAssessment(assessment: InsertAssessment): Promise<Assessment>;\n  getAssessmentsByCompanyId(companyId: number): Promise<Assessment[]>;\n  getAssessmentById(id: number): Promise<Assessment | undefined>;\n  updateAssessmentStatus(id: number, status: string, score?: number): Promise<Assessment>;\n  \n  // Assessment Results management\n  saveAssessmentResult(result: InsertAssessmentResult): Promise<AssessmentResult>;\n  getAssessmentResultsByAssessmentId(assessmentId: number): Promise<AssessmentResult[]>;\n  getAssessmentResultById(id: number): Promise<AssessmentResult | undefined>;\n  \n  // Remediation Tasks management\n  saveRemediationTask(task: InsertRemediationTask): Promise<RemediationTask>;\n  getRemediationTasksByAssessmentId(assessmentId: number): Promise<RemediationTask[]>;\n  getRemediationTaskById(id: number): Promise<RemediationTask | undefined>;\n  updateRemediationTaskStatus(id: number, status: string): Promise<RemediationTask>;\n  \n  // Compliance Reports management\n  createComplianceReport(report: InsertComplianceReport): Promise<ComplianceReport>;\n  getComplianceReportById(id: number): Promise<ComplianceReport | undefined>;\n  getComplianceReportsByCompanyId(companyId: number): Promise<ComplianceReport[]>;\n  getComplianceReportsByAssessmentId(assessmentId: number): Promise<ComplianceReport[]>;\n  updateComplianceReportStatus(id: number, status: string): Promise<ComplianceReport>;\n  \n  // Report Share Links management\n  createReportShareLink(shareLink: InsertReportShareLink): Promise<ReportShareLink>;\n  getReportShareLinkByToken(token: string): Promise<ReportShareLink | undefined>;\n  getReportShareLinksByReportId(reportId: number): Promise<ReportShareLink[]>;\n  incrementShareLinkViewCount(id: number): Promise<ReportShareLink>;\n  deactivateShareLink(id: number): Promise<ReportShareLink>;\n  \n  // Policy Management System\n  // Policy Categories\n  savePolicyCategory(category: InsertPolicyCategory): Promise<PolicyCategory>;\n  getPolicyCategories(): Promise<PolicyCategory[]>;\n  getPolicyCategoryById(id: number): Promise<PolicyCategory | undefined>;\n  \n  // Policy Templates\n  savePolicyTemplate(template: InsertPolicyTemplate): Promise<PolicyTemplate>;\n  getPolicyTemplates(): Promise<PolicyTemplate[]>;\n  getPolicyTemplateById(id: number): Promise<PolicyTemplate | undefined>;\n  getPolicyTemplatesByCategory(categoryId: number): Promise<PolicyTemplate[]>;\n  updatePolicyTemplateStatus(id: number, isActive: boolean): Promise<PolicyTemplate>;\n  \n  // Generated Policies \n  saveGeneratedPolicy(policy: InsertGeneratedPolicy): Promise<GeneratedPolicy>;\n  getGeneratedPolicies(companyId: number): Promise<GeneratedPolicy[]>;\n  getGeneratedPolicyById(id: number): Promise<GeneratedPolicy | undefined>;\n  updateGeneratedPolicyApprovalStatus(id: number, status: string, approvedBy?: number): Promise<GeneratedPolicy>;\n  \n  // Onboarding and Gamification\n  // Onboarding Steps\n  saveOnboardingStep(step: InsertOnboardingStep): Promise<OnboardingStep>;\n  getOnboardingSteps(): Promise<OnboardingStep[]>;\n  getOnboardingStepById(id: number): Promise<OnboardingStep | undefined>;\n  getOnboardingStepsByType(type: string): Promise<OnboardingStep[]>;\n  \n  // User Progress\n  saveUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  getUserProgressByUser(userId: number): Promise<UserProgress[]>;\n  getUserProgressByStep(stepId: number): Promise<UserProgress[]>;\n  getUserStepProgress(userId: number, stepId: number): Promise<UserProgress | undefined>;\n  updateUserProgress(id: number, progress: Partial<InsertUserProgress>): Promise<UserProgress>;\n  \n  // Badges\n  saveBadge(badge: InsertBadge): Promise<Badge>;\n  getBadges(): Promise<Badge[]>;\n  getBadgeById(id: number): Promise<Badge | undefined>;\n  getBadgesByCategory(category: string): Promise<Badge[]>;\n  \n  // User Badges\n  saveUserBadge(userBadge: InsertUserBadge): Promise<UserBadge>;\n  getUserBadgesByUser(userId: number): Promise<UserBadge[]>;\n  getUserBadgeById(id: number): Promise<UserBadge | undefined>;\n  toggleBadgeDisplay(id: number, displayed: boolean): Promise<UserBadge>;\n  \n  // User Game Stats\n  saveUserGameStats(stats: InsertUserGameStats): Promise<UserGameStats>;\n  getUserGameStats(userId: number): Promise<UserGameStats | undefined>;\n  updateUserGameStats(userId: number, stats: Partial<InsertUserGameStats>): Promise<UserGameStats>;\n  getUsersTopGameStats(limit: number): Promise<UserGameStats[]>;\n  \n  // Risk Management\n  saveRisk(risk: Partial<Risk>): Promise<Risk>;\n  getRisks(companyId?: number): Promise<Risk[]>;\n  getRiskById(id: number): Promise<Risk | undefined>;\n  deleteRisk(id: number): Promise<void>;\n  \n  // Assessment Risk Management\n  saveAssessmentRisk(assessmentRisk: Partial<AssessmentRisk>): Promise<AssessmentRisk>;\n  getAssessmentRisksByAssessmentId(assessmentId: number): Promise<AssessmentRisk[]>;\n  getAssessmentRiskById(id: number): Promise<AssessmentRisk | undefined>;\n  deleteAssessmentRisk(id: number): Promise<void>;\n  \n  // Session storage\n  sessionStore: session.Store;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    // Create a session store with PostgreSQL\n    this.sessionStore = new PostgresSessionStore({\n      conObject: {\n        connectionString: process.env.DATABASE_URL,\n      },\n      createTableIfMissing: true\n    });\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: Partial<User>): Promise<User> {\n    const [user] = await db.insert(users).values({\n      username: insertUser.username || '',\n      password: insertUser.password || '',\n      role: insertUser.role || 'user',\n      accessLevel: insertUser.accessLevel || 'trial',\n      isActive: insertUser.isActive !== undefined ? insertUser.isActive : true\n    }).returning();\n    return user;\n  }\n  \n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n  \n  // Company info methods\n  async saveCompanyInfo(info: Partial<CompanyInfo>): Promise<CompanyInfo> {\n    // First check if there's an existing company record\n    const existingCompany = await this.getCompanyInfo();\n    \n    if (existingCompany) {\n      // Update existing company\n      const [updated] = await db.update(companyInfo)\n        .set({\n          companyName: info.companyName || existingCompany.companyName,\n          sector: info.sector !== undefined ? info.sector : existingCompany.sector,\n          size: info.size !== undefined ? info.size : existingCompany.size,\n          website: info.website !== undefined ? info.website : existingCompany.website,\n          address: info.address !== undefined ? info.address : existingCompany.address,\n          city: info.city !== undefined ? info.city : existingCompany.city,\n          country: info.country !== undefined ? info.country : existingCompany.country,\n          postalCode: info.postalCode !== undefined ? info.postalCode : existingCompany.postalCode,\n          contactEmail: info.contactEmail !== undefined ? info.contactEmail : existingCompany.contactEmail,\n          contactPhone: info.contactPhone !== undefined ? info.contactPhone : existingCompany.contactPhone,\n          ceoName: info.ceoName !== undefined ? info.ceoName : existingCompany.ceoName,\n          cioName: info.cioName !== undefined ? info.cioName : existingCompany.cioName,\n          ctoName: info.ctoName !== undefined ? info.ctoName : existingCompany.ctoName,\n          cisoName: info.cisoName !== undefined ? info.cisoName : existingCompany.cisoName,\n          logoId: info.logoId !== undefined ? info.logoId : existingCompany.logoId\n        })\n        .where(eq(companyInfo.id, existingCompany.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new company\n      const [company] = await db.insert(companyInfo).values({\n        companyName: info.companyName || '',\n        sector: info.sector,\n        size: info.size,\n        website: info.website,\n        address: info.address,\n        city: info.city,\n        country: info.country,\n        postalCode: info.postalCode,\n        contactEmail: info.contactEmail,\n        contactPhone: info.contactPhone,\n        ceoName: info.ceoName,\n        cioName: info.cioName,\n        ctoName: info.ctoName,\n        cisoName: info.cisoName,\n        logoId: info.logoId\n      }).returning();\n      return company;\n    }\n  }\n  \n  async getCompanyInfo(): Promise<CompanyInfo | undefined> {\n    const [company] = await db.select().from(companyInfo).limit(1);\n    return company;\n  }\n  \n  // Staff methods\n  async saveCybersecurityStaff(companyId: number, staffNames: string[]): Promise<CybersecurityStaff[]> {\n    // First delete existing staff for this company\n    await db.delete(cybersecurityStaff).where(eq(cybersecurityStaff.companyId, companyId));\n    \n    // Then insert new staff\n    if (staffNames.length === 0) {\n      return [];\n    }\n    \n    const staffValues = staffNames.map(name => ({\n      companyId,\n      staffName: name\n    }));\n    \n    return await db.insert(cybersecurityStaff).values(staffValues).returning();\n  }\n  \n  async getCybersecurityStaff(companyId: number): Promise<CybersecurityStaff[]> {\n    return await db.select().from(cybersecurityStaff).where(eq(cybersecurityStaff.companyId, companyId));\n  }\n  \n  // Policy methods\n  async savePolicy(policy: Partial<Policy>): Promise<Policy> {\n    const now = new Date().toISOString();\n    \n    if (policy.id) {\n      // Update existing policy\n      const [existingPolicy] = await db.select().from(policies).where(eq(policies.id, policy.id));\n      \n      if (existingPolicy) {\n        const [updated] = await db.update(policies)\n          .set({\n            title: policy.title || existingPolicy.title,\n            type: policy.type || existingPolicy.type,\n            content: policy.content !== undefined ? policy.content : existingPolicy.content,\n            fileId: policy.fileId !== undefined ? policy.fileId : existingPolicy.fileId,\n            updatedAt: now\n          })\n          .where(eq(policies.id, policy.id))\n          .returning();\n        return updated;\n      }\n    }\n    \n    // Create new policy\n    const [newPolicy] = await db.insert(policies).values({\n      title: policy.title || 'Untitled Policy',\n      type: policy.type || 'general',\n      content: policy.content,\n      fileId: policy.fileId,\n      createdAt: policy.createdAt || now,\n      updatedAt: now\n    }).returning();\n    return newPolicy;\n  }\n  \n  async getPolicies(): Promise<Policy[]> {\n    return await db.select().from(policies);\n  }\n  \n  async getPolicyById(id: number): Promise<Policy | undefined> {\n    const [policy] = await db.select().from(policies).where(eq(policies.id, id));\n    return policy;\n  }\n  \n  async deletePolicy(id: number): Promise<void> {\n    await db.delete(policies).where(eq(policies.id, id));\n  }\n\n  // Framework methods\n  async saveFramework(framework: InsertFramework): Promise<Framework> {\n    // Check if the framework already exists by name\n    const existingFramework = await this.getFrameworkByName(framework.name);\n    \n    if (existingFramework) {\n      // Update existing framework\n      const [updated] = await db.update(frameworks)\n        .set({\n          displayName: framework.displayName,\n          description: framework.description,\n          version: framework.version,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(frameworks.id, existingFramework.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new framework\n      const [newFramework] = await db.insert(frameworks).values({\n        name: framework.name,\n        displayName: framework.displayName,\n        description: framework.description,\n        version: framework.version\n      }).returning();\n      return newFramework;\n    }\n  }\n  \n  async getFrameworks(): Promise<Framework[]> {\n    return await db.select().from(frameworks);\n  }\n  \n  async getFrameworkByName(name: string): Promise<Framework | undefined> {\n    const [framework] = await db.select().from(frameworks).where(eq(frameworks.name, name));\n    return framework;\n  }\n  \n  async getFrameworkById(id: number): Promise<Framework | undefined> {\n    const [framework] = await db.select().from(frameworks).where(eq(frameworks.id, id));\n    return framework;\n  }\n  \n  // Domain methods\n  async saveDomain(domain: InsertDomain): Promise<Domain> {\n    // Check if domain exists\n    const [existingDomain] = await db.select()\n      .from(domains)\n      .where(\n        and(\n          eq(domains.frameworkId, domain.frameworkId),\n          eq(domains.name, domain.name)\n        )\n      );\n    \n    if (existingDomain) {\n      // Update existing domain\n      const [updated] = await db.update(domains)\n        .set({\n          displayName: domain.displayName,\n          description: domain.description,\n          order: domain.order\n        })\n        .where(eq(domains.id, existingDomain.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new domain\n      const [newDomain] = await db.insert(domains).values(domain).returning();\n      return newDomain;\n    }\n  }\n  \n  async getDomainsByFrameworkId(frameworkId: number): Promise<Domain[]> {\n    return await db.select()\n      .from(domains)\n      .where(eq(domains.frameworkId, frameworkId))\n      .orderBy(asc(domains.order));\n  }\n  \n  async getDomainById(id: number): Promise<Domain | undefined> {\n    const [domain] = await db.select().from(domains).where(eq(domains.id, id));\n    return domain;\n  }\n  \n  // Subdomain methods\n  async saveSubdomain(subdomain: any): Promise<Subdomain> {\n    // Check if subdomain exists\n    const [existingSubdomain] = await db!.select()\n      .from(subdomains)\n      .where(\n        and(\n          eq(subdomains.domainId, subdomain.domainId),\n          eq(subdomains.name, subdomain.name)\n        )\n      );\n    \n    if (existingSubdomain) {\n      // Update existing subdomain\n      const [updated] = await db!.update(subdomains)\n        .set({\n          displayName: subdomain.displayName,\n          description: subdomain.description,\n          order: subdomain.order\n        })\n        .where(eq(subdomains.id, existingSubdomain.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new subdomain\n      const [newSubdomain] = await db!.insert(subdomains).values(subdomain).returning();\n      return newSubdomain;\n    }\n  }\n  \n  async getSubdomainsByDomainId(domainId: number): Promise<Subdomain[]> {\n    return await db!.select()\n      .from(subdomains)\n      .where(eq(subdomains.domainId, domainId))\n      .orderBy(asc(subdomains.order));\n  }\n  \n  async getSubdomainById(id: number): Promise<Subdomain | undefined> {\n    const [subdomain] = await db!.select().from(subdomains).where(eq(subdomains.id, id));\n    return subdomain;\n  }\n  \n  // Control methods\n  async saveControl(control: InsertControl): Promise<Control> {\n    // Check if control exists\n    const [existingControl] = await db.select()\n      .from(controls)\n      .where(\n        and(\n          eq(controls.subdomainId, control.subdomainId),\n          eq(controls.controlId, control.controlId)\n        )\n      );\n    \n    if (existingControl) {\n      // Update existing control\n      const [updated] = await db.update(controls)\n        .set({\n          name: control.name,\n          description: control.description,\n          guidance: control.guidance,\n          maturityLevel: control.maturityLevel,\n          referenceLinks: control.referenceLinks,\n          implementationGuide: control.implementationGuide\n        })\n        .where(eq(controls.id, existingControl.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new control\n      const [newControl] = await db.insert(controls).values(control).returning();\n      return newControl;\n    }\n  }\n  \n  async getControlsBySubdomainId(subdomainId: number): Promise<Control[]> {\n    return await db!.select()\n      .from(controls)\n      .where(eq(controls.subdomainId, subdomainId))\n      .orderBy(asc(controls.controlId));\n  }\n  \n  // Backward compatibility method\n  async getControlsByDomainId(domainId: number): Promise<Control[]> {\n    // First get all subdomains for this domain\n    const subdoms = await this.getSubdomainsByDomainId(domainId);\n    \n    if (subdoms.length === 0) {\n      return [];\n    }\n    \n    // Then get all controls for each subdomain\n    const controls = [];\n    for (const subdomain of subdoms) {\n      const subdomainControls = await this.getControlsBySubdomainId(subdomain.id);\n      controls.push(...subdomainControls);\n    }\n    \n    return controls.sort((a, b) => a.controlId.localeCompare(b.controlId));\n  }\n  \n  async getControlById(id: number): Promise<Control | undefined> {\n    const [control] = await db.select().from(controls).where(eq(controls.id, id));\n    return control;\n  }\n  \n  // Assessment methods\n  async createAssessment(assessment: InsertAssessment): Promise<Assessment> {\n    const [newAssessment] = await db.insert(assessments).values(assessment).returning();\n    return newAssessment;\n  }\n  \n  async getAssessmentsByCompanyId(companyId: number): Promise<Assessment[]> {\n    return await db.select()\n      .from(assessments)\n      .where(eq(assessments.companyId, companyId))\n      .orderBy(desc(assessments.startDate));\n  }\n  \n  async getAssessmentById(id: number): Promise<Assessment | undefined> {\n    const [assessment] = await db.select().from(assessments).where(eq(assessments.id, id));\n    return assessment;\n  }\n  \n  async updateAssessmentStatus(id: number, status: string, score?: number): Promise<Assessment> {\n    const updateData: Partial<Assessment> = {\n      status,\n      updatedAt: new Date().toISOString()\n    };\n    \n    if (status === 'completed') {\n      updateData.completionDate = new Date().toISOString();\n    }\n    \n    if (score !== undefined) {\n      updateData.score = score;\n    }\n    \n    const [updated] = await db.update(assessments)\n      .set(updateData)\n      .where(eq(assessments.id, id))\n      .returning();\n    \n    return updated;\n  }\n  \n  // Assessment Results methods\n  async saveAssessmentResult(result: InsertAssessmentResult): Promise<AssessmentResult> {\n    // Check if result exists\n    const [existingResult] = await db.select()\n      .from(assessmentResults)\n      .where(\n        and(\n          eq(assessmentResults.assessmentId, result.assessmentId),\n          eq(assessmentResults.controlId, result.controlId)\n        )\n      );\n    \n    if (existingResult) {\n      // Update existing result\n      const [updated] = await db.update(assessmentResults)\n        .set({\n          status: result.status,\n          evidence: result.evidence,\n          comments: result.comments,\n          attachments: result.attachments,\n          updatedAt: new Date().toISOString(),\n          updatedBy: result.updatedBy\n        })\n        .where(eq(assessmentResults.id, existingResult.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new result\n      const [newResult] = await db.insert(assessmentResults).values({\n        ...result,\n        updatedAt: new Date().toISOString()\n      }).returning();\n      return newResult;\n    }\n  }\n  \n  async getAssessmentResultsByAssessmentId(assessmentId: number): Promise<AssessmentResult[]> {\n    return await db.select()\n      .from(assessmentResults)\n      .where(eq(assessmentResults.assessmentId, assessmentId))\n      .orderBy(asc(assessmentResults.id));\n  }\n  \n  async getAssessmentResultById(id: number): Promise<AssessmentResult | undefined> {\n    const [result] = await db.select().from(assessmentResults).where(eq(assessmentResults.id, id));\n    return result;\n  }\n  \n  // Remediation Tasks methods\n  async saveRemediationTask(task: InsertRemediationTask): Promise<RemediationTask> {\n    // Check if a task with the same assessmentId and controlId exists\n    const [existingTask] = await db.select()\n      .from(remediationTasks)\n      .where(\n        and(\n          eq(remediationTasks.assessmentId, task.assessmentId),\n          eq(remediationTasks.controlId, task.controlId),\n          eq(remediationTasks.title, task.title)\n        )\n      );\n    \n    if (existingTask) {\n      // Update existing task\n      const [updated] = await db.update(remediationTasks)\n        .set({\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          priority: task.priority,\n          assignedTo: task.assignedTo,\n          dueDate: task.dueDate,\n          updatedAt: new Date().toISOString(),\n          externalId: task.externalId\n        })\n        .where(eq(remediationTasks.id, existingTask.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new task\n      const [newTask] = await db.insert(remediationTasks).values({\n        ...task,\n        updatedAt: new Date().toISOString()\n      }).returning();\n      return newTask;\n    }\n  }\n  \n  async getRemediationTasksByAssessmentId(assessmentId: number): Promise<RemediationTask[]> {\n    return await db.select()\n      .from(remediationTasks)\n      .where(eq(remediationTasks.assessmentId, assessmentId))\n      .orderBy(asc(remediationTasks.createdAt));\n  }\n  \n  async getRemediationTaskById(id: number): Promise<RemediationTask | undefined> {\n    const [task] = await db.select().from(remediationTasks).where(eq(remediationTasks.id, id));\n    return task;\n  }\n  \n  async updateRemediationTaskStatus(id: number, status: string): Promise<RemediationTask> {\n    const [updated] = await db.update(remediationTasks)\n      .set({\n        status,\n        updatedAt: new Date().toISOString()\n      })\n      .where(eq(remediationTasks.id, id))\n      .returning();\n    \n    return updated;\n  }\n  \n  // Compliance Reports methods\n  async createComplianceReport(report: InsertComplianceReport): Promise<ComplianceReport> {\n    const [newReport] = await db.insert(complianceReports).values(report).returning();\n    return newReport;\n  }\n  \n  async getComplianceReportById(id: number): Promise<ComplianceReport | undefined> {\n    const [report] = await db.select().from(complianceReports).where(eq(complianceReports.id, id));\n    return report;\n  }\n  \n  async getComplianceReportsByCompanyId(companyId: number): Promise<ComplianceReport[]> {\n    return await db.select()\n      .from(complianceReports)\n      .where(eq(complianceReports.companyId, companyId))\n      .orderBy(desc(complianceReports.createdAt));\n  }\n  \n  async getComplianceReportsByAssessmentId(assessmentId: number): Promise<ComplianceReport[]> {\n    return await db.select()\n      .from(complianceReports)\n      .where(eq(complianceReports.assessmentId, assessmentId))\n      .orderBy(desc(complianceReports.createdAt));\n  }\n  \n  async updateComplianceReportStatus(id: number, status: string): Promise<ComplianceReport> {\n    const [updated] = await db.update(complianceReports)\n      .set({\n        status\n      })\n      .where(eq(complianceReports.id, id))\n      .returning();\n    \n    return updated;\n  }\n  \n  // Report Share Links methods\n  async createReportShareLink(shareLink: InsertReportShareLink): Promise<ReportShareLink> {\n    const [newShareLink] = await db.insert(reportShareLinks).values(shareLink).returning();\n    return newShareLink;\n  }\n  \n  async getReportShareLinkByToken(token: string): Promise<ReportShareLink | undefined> {\n    const [shareLink] = await db.select().from(reportShareLinks).where(eq(reportShareLinks.shareToken, token));\n    return shareLink;\n  }\n  \n  async getReportShareLinksByReportId(reportId: number): Promise<ReportShareLink[]> {\n    return await db.select().from(reportShareLinks)\n      .where(eq(reportShareLinks.reportId, reportId))\n      .orderBy(desc(reportShareLinks.createdAt));\n  }\n  \n  async incrementShareLinkViewCount(id: number): Promise<ReportShareLink> {\n    const [shareLink] = await db.select().from(reportShareLinks).where(eq(reportShareLinks.id, id));\n    \n    if (!shareLink) {\n      throw new Error(`Share link with id ${id} not found`);\n    }\n    \n    const [updated] = await db.update(reportShareLinks)\n      .set({\n        viewCount: shareLink.viewCount + 1\n      })\n      .where(eq(reportShareLinks.id, id))\n      .returning();\n    \n    return updated;\n  }\n  \n  async deactivateShareLink(id: number): Promise<ReportShareLink> {\n    const [updated] = await db.update(reportShareLinks)\n      .set({\n        isActive: false\n      })\n      .where(eq(reportShareLinks.id, id))\n      .returning();\n    \n    return updated;\n  }\n\n  // Policy Management System Implementation\n  // Policy Categories methods\n  async savePolicyCategory(category: InsertPolicyCategory): Promise<PolicyCategory> {\n    if ('id' in category && category.id) {\n      // Update existing category\n      const [existingCategory] = await db.select().from(policyCategories).where(eq(policyCategories.id, category.id));\n      \n      if (existingCategory) {\n        const [updated] = await db.update(policyCategories)\n          .set({\n            categoryName: category.categoryName,\n            description: category.description,\n            updatedAt: new Date().toISOString()\n          })\n          .where(eq(policyCategories.id, category.id))\n          .returning();\n        return updated;\n      }\n    }\n    \n    // Create new category\n    const [newCategory] = await db.insert(policyCategories).values({\n      categoryName: category.categoryName,\n      description: category.description,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }).returning();\n    return newCategory;\n  }\n  \n  async getPolicyCategories(): Promise<PolicyCategory[]> {\n    return await db.select().from(policyCategories).orderBy(asc(policyCategories.categoryName));\n  }\n  \n  async getPolicyCategoryById(id: number): Promise<PolicyCategory | undefined> {\n    const [category] = await db.select().from(policyCategories).where(eq(policyCategories.id, id));\n    return category;\n  }\n  \n  // Policy Templates methods\n  async savePolicyTemplate(template: InsertPolicyTemplate): Promise<PolicyTemplate> {\n    if ('id' in template && template.id) {\n      // Update existing template\n      const [existingTemplate] = await db.select().from(policyTemplates).where(eq(policyTemplates.id, template.id));\n      \n      if (existingTemplate) {\n        const [updated] = await db.update(policyTemplates)\n          .set({\n            templateName: template.templateName,\n            templateType: template.templateType,\n            fileId: template.fileId,\n            categoryId: template.categoryId,\n            uploadedBy: template.uploadedBy,\n            version: template.version,\n            placeholders: template.placeholders,\n            isActive: template.isActive !== undefined ? template.isActive : existingTemplate.isActive\n          })\n          .where(eq(policyTemplates.id, template.id))\n          .returning();\n        return updated;\n      }\n    }\n    \n    // Create new template\n    const [newTemplate] = await db.insert(policyTemplates).values({\n      templateName: template.templateName,\n      templateType: template.templateType,\n      fileId: template.fileId,\n      categoryId: template.categoryId,\n      uploadedBy: template.uploadedBy,\n      dateUploaded: new Date().toISOString(),\n      version: template.version || '1.0',\n      placeholders: template.placeholders,\n      isActive: template.isActive !== undefined ? template.isActive : true\n    }).returning();\n    return newTemplate;\n  }\n  \n  async getPolicyTemplates(): Promise<PolicyTemplate[]> {\n    return await db.select().from(policyTemplates).orderBy(asc(policyTemplates.templateName));\n  }\n  \n  async getPolicyTemplateById(id: number): Promise<PolicyTemplate | undefined> {\n    const [template] = await db.select().from(policyTemplates).where(eq(policyTemplates.id, id));\n    return template;\n  }\n  \n  async getPolicyTemplatesByCategory(categoryId: number): Promise<PolicyTemplate[]> {\n    return await db.select()\n      .from(policyTemplates)\n      .where(eq(policyTemplates.categoryId, categoryId))\n      .orderBy(asc(policyTemplates.templateName));\n  }\n  \n  async updatePolicyTemplateStatus(id: number, isActive: boolean): Promise<PolicyTemplate> {\n    const [updated] = await db.update(policyTemplates)\n      .set({ isActive })\n      .where(eq(policyTemplates.id, id))\n      .returning();\n    return updated;\n  }\n  \n  // Generated Policies methods\n  async saveGeneratedPolicy(policy: InsertGeneratedPolicy): Promise<GeneratedPolicy> {\n    if ('id' in policy && policy.id) {\n      // Update existing policy\n      const [existingPolicy] = await db.select().from(generatedPolicies).where(eq(generatedPolicies.id, policy.id));\n      \n      if (existingPolicy) {\n        const [updated] = await db.update(generatedPolicies)\n          .set({\n            templateId: policy.templateId,\n            companyId: policy.companyId,\n            generatedFileId: policy.generatedFileId,\n            version: policy.version,\n            approvalStatus: policy.approvalStatus,\n            replacementData: policy.replacementData,\n            notes: policy.notes\n          })\n          .where(eq(generatedPolicies.id, policy.id))\n          .returning();\n        return updated;\n      }\n    }\n    \n    // Create new generated policy\n    const [newPolicy] = await db.insert(generatedPolicies).values({\n      templateId: policy.templateId,\n      companyId: policy.companyId,\n      generatedFileId: policy.generatedFileId,\n      version: policy.version || '1.0',\n      generationDate: new Date().toISOString(),\n      approvalStatus: policy.approvalStatus || 'pending',\n      replacementData: policy.replacementData,\n      notes: policy.notes\n    }).returning();\n    return newPolicy;\n  }\n  \n  async getGeneratedPolicies(companyId: number): Promise<GeneratedPolicy[]> {\n    return await db.select()\n      .from(generatedPolicies)\n      .where(eq(generatedPolicies.companyId, companyId))\n      .orderBy(desc(generatedPolicies.generationDate));\n  }\n  \n  async getGeneratedPolicyById(id: number): Promise<GeneratedPolicy | undefined> {\n    const [policy] = await db.select().from(generatedPolicies).where(eq(generatedPolicies.id, id));\n    return policy;\n  }\n  \n  async updateGeneratedPolicyApprovalStatus(id: number, status: string, approvedBy?: number): Promise<GeneratedPolicy> {\n    const updateData: Partial<GeneratedPolicy> = {\n      approvalStatus: status\n    };\n    \n    if (status === 'approved' && approvedBy) {\n      updateData.approvedBy = approvedBy;\n      updateData.approvedDate = new Date().toISOString();\n    }\n    \n    const [updated] = await db.update(generatedPolicies)\n      .set(updateData)\n      .where(eq(generatedPolicies.id, id))\n      .returning();\n    \n    return updated;\n  }\n  \n  // Onboarding and Gamification Methods\n  \n  // Onboarding Steps\n  async saveOnboardingStep(step: InsertOnboardingStep): Promise<OnboardingStep> {\n    if (step.id) {\n      // Update existing step\n      const [updatedStep] = await db.update(onboardingSteps)\n        .set({\n          title: step.title,\n          description: step.description,\n          order: step.order,\n          type: step.type,\n          content: step.content,\n          points: step.points,\n          estimatedDuration: step.estimatedDuration,\n          prerequisiteStepIds: step.prerequisiteStepIds,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(onboardingSteps.id, step.id))\n        .returning();\n      return updatedStep;\n    } else {\n      // Create new step\n      const [newStep] = await db.insert(onboardingSteps).values({\n        ...step,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }).returning();\n      return newStep;\n    }\n  }\n  \n  async getOnboardingSteps(): Promise<OnboardingStep[]> {\n    return await db.select().from(onboardingSteps).orderBy(asc(onboardingSteps.order));\n  }\n  \n  async getOnboardingStepById(id: number): Promise<OnboardingStep | undefined> {\n    const [step] = await db.select().from(onboardingSteps).where(eq(onboardingSteps.id, id));\n    return step;\n  }\n  \n  async getOnboardingStepsByType(type: string): Promise<OnboardingStep[]> {\n    return await db.select().from(onboardingSteps)\n      .where(eq(onboardingSteps.type, type))\n      .orderBy(asc(onboardingSteps.order));\n  }\n  \n  // User Progress\n  async saveUserProgress(progress: InsertUserProgress): Promise<UserProgress> {\n    // Check if progress exists\n    const existingProgress = await this.getUserStepProgress(progress.userId, progress.stepId);\n    \n    if (existingProgress) {\n      // Update existing progress\n      const [updatedProgress] = await db.update(userProgress)\n        .set({\n          ...progress,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(userProgress.id, existingProgress.id))\n        .returning();\n      return updatedProgress;\n    } else {\n      // Create new progress\n      const [newProgress] = await db.insert(userProgress).values({\n        ...progress,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }).returning();\n      return newProgress;\n    }\n  }\n  \n  async getUserProgressByUser(userId: number): Promise<UserProgress[]> {\n    return await db.select().from(userProgress).where(eq(userProgress.userId, userId));\n  }\n  \n  async getUserProgressByStep(stepId: number): Promise<UserProgress[]> {\n    return await db.select().from(userProgress).where(eq(userProgress.stepId, stepId));\n  }\n  \n  async getUserStepProgress(userId: number, stepId: number): Promise<UserProgress | undefined> {\n    const [progress] = await db.select().from(userProgress)\n      .where(\n        and(\n          eq(userProgress.userId, userId),\n          eq(userProgress.stepId, stepId)\n        )\n      );\n    return progress;\n  }\n  \n  async updateUserProgress(id: number, progress: Partial<InsertUserProgress>): Promise<UserProgress> {\n    const [updatedProgress] = await db.update(userProgress)\n      .set({\n        ...progress,\n        updatedAt: new Date().toISOString()\n      })\n      .where(eq(userProgress.id, id))\n      .returning();\n    return updatedProgress;\n  }\n  \n  // Badges\n  async saveBadge(badge: InsertBadge): Promise<Badge> {\n    if (badge.id) {\n      // Update existing badge\n      const [updatedBadge] = await db.update(badges)\n        .set(badge)\n        .where(eq(badges.id, badge.id))\n        .returning();\n      return updatedBadge;\n    } else {\n      // Create new badge\n      const [newBadge] = await db.insert(badges).values({\n        ...badge,\n        createdAt: new Date().toISOString()\n      }).returning();\n      return newBadge;\n    }\n  }\n  \n  async getBadges(): Promise<Badge[]> {\n    return await db.select().from(badges);\n  }\n  \n  async getBadgeById(id: number): Promise<Badge | undefined> {\n    const [badge] = await db.select().from(badges).where(eq(badges.id, id));\n    return badge;\n  }\n  \n  async getBadgesByCategory(category: string): Promise<Badge[]> {\n    return await db.select().from(badges).where(eq(badges.category, category));\n  }\n  \n  // User Badges\n  async saveUserBadge(userBadge: InsertUserBadge): Promise<UserBadge> {\n    // Check if already awarded\n    const [existingBadge] = await db.select().from(userBadges)\n      .where(\n        and(\n          eq(userBadges.userId, userBadge.userId),\n          eq(userBadges.badgeId, userBadge.badgeId)\n        )\n      );\n    \n    if (existingBadge) {\n      return existingBadge; // Badge already awarded, return it\n    }\n    \n    // Create new user badge\n    const [newUserBadge] = await db.insert(userBadges).values({\n      ...userBadge,\n      earnedAt: new Date().toISOString()\n    }).returning();\n    \n    // Update user game stats to reflect new badge\n    await this.updateUserGameStats(userBadge.userId, {});\n    \n    return newUserBadge;\n  }\n  \n  async getUserBadgesByUser(userId: number): Promise<UserBadge[]> {\n    return await db.select().from(userBadges).where(eq(userBadges.userId, userId));\n  }\n  \n  async getUserBadgeById(id: number): Promise<UserBadge | undefined> {\n    const [userBadge] = await db.select().from(userBadges).where(eq(userBadges.id, id));\n    return userBadge;\n  }\n  \n  async toggleBadgeDisplay(id: number, displayed: boolean): Promise<UserBadge> {\n    const [updatedUserBadge] = await db.update(userBadges)\n      .set({ displayed })\n      .where(eq(userBadges.id, id))\n      .returning();\n    return updatedUserBadge;\n  }\n  \n  // User Game Stats\n  async saveUserGameStats(stats: InsertUserGameStats): Promise<UserGameStats> {\n    const existingStats = await this.getUserGameStats(stats.userId);\n    \n    if (existingStats) {\n      // Update existing stats\n      const [updatedStats] = await db.update(userGameStats)\n        .set({\n          ...stats,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(userGameStats.userId, stats.userId))\n        .returning();\n      return updatedStats;\n    } else {\n      // Create new stats\n      const [newStats] = await db.insert(userGameStats).values({\n        ...stats,\n        updatedAt: new Date().toISOString()\n      }).returning();\n      return newStats;\n    }\n  }\n  \n  async getUserGameStats(userId: number): Promise<UserGameStats | undefined> {\n    const [stats] = await db.select().from(userGameStats).where(eq(userGameStats.userId, userId));\n    return stats;\n  }\n  \n  async updateUserGameStats(userId: number, stats: Partial<InsertUserGameStats>): Promise<UserGameStats> {\n    const existingStats = await this.getUserGameStats(userId);\n    \n    if (existingStats) {\n      // Get completed steps count\n      const completedSteps = await db.select({ count: count() }).from(userProgress)\n        .where(\n          and(\n            eq(userProgress.userId, userId),\n            eq(userProgress.completed, true)\n          )\n        );\n      \n      // Get total points from completed steps and quizzes\n      const userSteps = await this.getUserProgressByUser(userId);\n      let totalPoints = 0;\n      let quizScores: number[] = [];\n      \n      for (const step of userSteps) {\n        if (step.completed) {\n          // Get step info to add points\n          const stepInfo = await this.getOnboardingStepById(step.stepId);\n          if (stepInfo) {\n            totalPoints += stepInfo.points;\n          }\n          \n          // If it's a quiz and has a score, add to quiz scores array\n          if (step.score !== null && step.score !== undefined) {\n            quizScores.push(step.score);\n          }\n        }\n      }\n      \n      // Calculate streak days\n      const lastActivityDate = new Date(existingStats.lastActivity);\n      const now = new Date();\n      const oneDayMs = 24 * 60 * 60 * 1000;\n      const daysSinceLastActivity = Math.floor((now.getTime() - lastActivityDate.getTime()) / oneDayMs);\n      \n      let streakDays = existingStats.streakDays;\n      if (daysSinceLastActivity === 1) {\n        // User was active yesterday, increment streak\n        streakDays += 1;\n      } else if (daysSinceLastActivity > 1) {\n        // User missed a day, reset streak\n        streakDays = 1;\n      }\n      \n      // Calculate level (1 level for every 100 points)\n      const level = Math.max(1, Math.floor(totalPoints / 100) + 1);\n      \n      // Calculate quiz average\n      const quizAverage = quizScores.length > 0 \n        ? quizScores.reduce((sum, score) => sum + score, 0) / quizScores.length \n        : 0;\n      \n      // Update stats\n      const [updatedStats] = await db.update(userGameStats)\n        .set({\n          ...stats,\n          totalPoints,\n          level,\n          streakDays,\n          lastActivity: now.toISOString(),\n          completedSteps: completedSteps[0]?.count || 0,\n          quizAverage,\n          updatedAt: now.toISOString()\n        })\n        .where(eq(userGameStats.userId, userId))\n        .returning();\n      \n      return updatedStats;\n    } else {\n      // Create initial stats\n      return await this.saveUserGameStats({\n        userId,\n        totalPoints: 0,\n        level: 1,\n        streakDays: 1,\n        lastActivity: new Date().toISOString(),\n        completedSteps: 0,\n      });\n    }\n  }\n  \n  async getUsersTopGameStats(limit: number): Promise<UserGameStats[]> {\n    return await db.select().from(userGameStats)\n      .orderBy(desc(userGameStats.totalPoints))\n      .limit(limit);\n  }\n\n  // Risk Management methods\n  async saveRisk(risk: Partial<Risk>): Promise<Risk> {\n    if (risk.id) {\n      // Update existing risk\n      const [updated] = await db.update(risks)\n        .set({\n          title: risk.title,\n          description: risk.description,\n          cause: risk.cause,\n          category: risk.category,\n          owner: risk.owner,\n          likelihood: risk.likelihood,\n          impact: risk.impact,\n          inherentRiskLevel: risk.inherentRiskLevel,\n          existingControls: risk.existingControls,\n          controlEffectiveness: risk.controlEffectiveness,\n          residualRiskLevel: risk.residualRiskLevel,\n          mitigationActions: risk.mitigationActions,\n          targetDate: risk.targetDate,\n          isAccepted: risk.isAccepted,\n          companyId: risk.companyId,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(risks.id, risk.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new risk\n      const [newRisk] = await db.insert(risks).values({\n        ...risk,\n        title: risk.title!,\n        description: risk.description!,\n        category: risk.category!,\n        likelihood: risk.likelihood!,\n        impact: risk.impact!,\n        inherentRiskLevel: risk.inherentRiskLevel!,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      } as InsertRisk).returning();\n      return newRisk;\n    }\n  }\n\n  async getRisks(companyId?: number): Promise<Risk[]> {\n    if (companyId) {\n      return await db.select().from(risks).where(eq(risks.companyId!, companyId));\n    }\n    return await db.select().from(risks);\n  }\n\n  async getRiskById(id: number): Promise<Risk | undefined> {\n    const [risk] = await db.select().from(risks).where(eq(risks.id, id));\n    return risk;\n  }\n\n  async deleteRisk(id: number): Promise<void> {\n    await db.delete(risks).where(eq(risks.id, id));\n  }\n\n  async saveAssessmentRisk(assessmentRisk: Partial<AssessmentRisk>): Promise<AssessmentRisk> {\n    if (assessmentRisk.id) {\n      // Update existing assessment risk\n      const [updated] = await db.update(assessmentRisks)\n        .set({\n          assessmentId: assessmentRisk.assessmentId,\n          riskId: assessmentRisk.riskId,\n          status: assessmentRisk.status,\n          notes: assessmentRisk.notes,\n          evidence: assessmentRisk.evidence,\n          reviewedBy: assessmentRisk.reviewedBy,\n          reviewedAt: assessmentRisk.reviewedAt,\n          updatedAt: new Date().toISOString()\n        })\n        .where(eq(assessmentRisks.id, assessmentRisk.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new assessment risk\n      const [newAssessmentRisk] = await db.insert(assessmentRisks).values({\n        assessmentId: assessmentRisk.assessmentId!,\n        riskId: assessmentRisk.riskId!,\n        status: assessmentRisk.status || 'to_assess',\n        notes: assessmentRisk.notes,\n        evidence: assessmentRisk.evidence,\n        reviewedBy: assessmentRisk.reviewedBy,\n        reviewedAt: assessmentRisk.reviewedAt,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      } as InsertAssessmentRisk).returning();\n      return newAssessmentRisk;\n    }\n  }\n\n  async getAssessmentRisksByAssessmentId(assessmentId: number): Promise<AssessmentRisk[]> {\n    return await db.select()\n      .from(assessmentRisks)\n      .where(eq(assessmentRisks.assessmentId, assessmentId));\n  }\n\n  async getAssessmentRiskById(id: number): Promise<AssessmentRisk | undefined> {\n    const [assessmentRisk] = await db.select().from(assessmentRisks).where(eq(assessmentRisks.id, id));\n    return assessmentRisk;\n  }\n\n  async deleteAssessmentRisk(id: number): Promise<void> {\n    await db.delete(assessmentRisks).where(eq(assessmentRisks.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":47799},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, real, date, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { randomUUID } from \"crypto\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").default(\"user\").notNull(),\n  accessLevel: text(\"access_level\").default(\"trial\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const companyInfo = pgTable(\"company_info\", {\n  id: serial(\"id\").primaryKey(),\n  companyName: text(\"company_name\").notNull(),\n  sector: text(\"sector\"),\n  size: text(\"size\"),\n  website: text(\"website\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  postalCode: text(\"postal_code\"),\n  contactEmail: text(\"contact_email\"),\n  contactPhone: text(\"contact_phone\"),\n  ceoName: text(\"ceo_name\"),\n  cioName: text(\"cio_name\"),\n  ctoName: text(\"cto_name\"),\n  cisoName: text(\"ciso_name\"),\n  businessDescription: text(\"business_description\"),\n  foundedYear: integer(\"founded_year\"),\n  employeeCount: integer(\"employee_count\"),\n  annualRevenue: text(\"annual_revenue\"),\n  logoId: integer(\"logo_id\").references(() => files.id),\n  documentsFileIds: jsonb(\"documents_file_ids\").default([]),\n  updatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n  updatedBy: integer(\"updated_by\"),\n});\n\nexport const cybersecurityStaff = pgTable(\"cybersecurity_staff\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull(),\n  staffName: text(\"staff_name\").notNull(),\n});\n\nexport const policies = pgTable(\"policies\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(),\n  content: text(\"content\"),\n  fileId: integer(\"file_id\"),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// File storage tables\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  path: text(\"path\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n  uploadedBy: integer(\"uploaded_by\"),\n  fileType: text(\"file_type\").notNull(), // 'logo', 'policy', etc.\n});\n\n// Create insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertCompanyInfoSchema = createInsertSchema(companyInfo);\nexport const insertCybersecurityStaffSchema = createInsertSchema(cybersecurityStaff);\nexport const insertPolicySchema = createInsertSchema(policies);\nexport const insertFileSchema = createInsertSchema(files).omit({ id: true });\n\n// Define types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type CompanyInfo = typeof companyInfo.$inferSelect;\nexport type CybersecurityStaff = typeof cybersecurityStaff.$inferSelect;\nexport type Policy = typeof policies.$inferSelect;\nexport type File = typeof files.$inferSelect;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\n\n// Framework assessment tables\nexport const frameworks = pgTable(\"frameworks\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  displayName: text(\"display_name\").notNull(),\n  description: text(\"description\").notNull(),\n  version: text(\"version\").notNull(),\n  createdAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow().notNull(),\n});\n\nexport const domains = pgTable(\"domains\", {\n  id: serial(\"id\").primaryKey(),\n  frameworkId: integer(\"framework_id\").notNull(),\n  name: text(\"name\").notNull(),\n  displayName: text(\"display_name\").notNull(),\n  description: text(\"description\"),\n  order: integer(\"order\").notNull(),\n});\n\nexport const subdomains = pgTable(\"subdomains\", {\n  id: serial(\"id\").primaryKey(),\n  domainId: integer(\"domain_id\").notNull(),\n  name: text(\"name\").notNull(),\n  displayName: text(\"display_name\").notNull(),\n  description: text(\"description\"),\n  order: integer(\"order\").notNull(),\n});\n\nexport const controls = pgTable(\"controls\", {\n  id: serial(\"id\").primaryKey(),\n  subdomainId: integer(\"subdomain_id\").notNull(),\n  controlId: text(\"control_id\").notNull(), // e.g., \"ECC-1.2.3\" or \"SAMA-2.4\"\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  guidance: text(\"guidance\"),\n  maturityLevel: integer(\"maturity_level\").default(1),\n  referenceLinks: text(\"reference_links\"),\n  implementationGuide: text(\"implementation_guide\"),\n  frameworkSpecific: jsonb(\"framework_specific\"), // Stores framework-specific properties\n});\n\nexport const assessments = pgTable(\"assessments\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull(),\n  frameworkId: integer(\"framework_id\").notNull(),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").default(\"in_progress\").notNull(), // in_progress, completed\n  score: real(\"score\"),\n  startDate: date(\"start_date\", { mode: 'string' }).defaultNow().notNull(),\n  completionDate: date(\"completion_date\", { mode: 'string' }),\n  createdBy: integer(\"created_by\").notNull(),\n  updatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow().notNull(),\n  findings: jsonb(\"findings\"),\n  recommendations: jsonb(\"recommendations\"),\n});\n\nexport const assessmentResults = pgTable(\"assessment_results\", {\n  id: serial(\"id\").primaryKey(),\n  assessmentId: integer(\"assessment_id\").notNull(),\n  controlId: integer(\"control_id\").notNull(),\n  status: text(\"status\").notNull(), // implemented, partially_implemented, not_implemented, not_applicable\n  evidence: text(\"evidence\"),\n  comments: text(\"comments\"),\n  attachments: jsonb(\"attachments\"),\n  maturityLevel: text(\"maturity_level\"), // SAMA: baseline, evolving, established, predictable, leading\n  maturityScore: integer(\"maturity_score\"), // Numeric representation of maturity (1-5)\n  updatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow().notNull(),\n  updatedBy: integer(\"updated_by\").notNull(),\n  frameworkSpecificData: jsonb(\"framework_specific_data\"), // Stores framework-specific assessment data\n});\n\nexport const remediationTasks = pgTable(\"remediation_tasks\", {\n  id: serial(\"id\").primaryKey(),\n  assessmentId: integer(\"assessment_id\").notNull(),\n  controlId: integer(\"control_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").default(\"open\").notNull(), // open, in_progress, completed\n  priority: text(\"priority\").default(\"medium\").notNull(), // low, medium, high, critical\n  assignedTo: integer(\"assigned_to\"),\n  dueDate: date(\"due_date\", { mode: 'string' }),\n  createdAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow().notNull(),\n  externalId: text(\"external_id\"), // For integration with external systems like ClickUp\n});\n\n// Create insert schemas for assessment tables\nexport const insertFrameworkSchema = createInsertSchema(frameworks).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertDomainSchema = createInsertSchema(domains).omit({ id: true });\nexport const insertSubdomainSchema = createInsertSchema(subdomains).omit({ id: true });\nexport const insertControlSchema = createInsertSchema(controls).omit({ id: true });\nexport const insertAssessmentSchema = createInsertSchema(assessments).omit({ id: true, updatedAt: true });\nexport const insertAssessmentResultSchema = createInsertSchema(assessmentResults).omit({ id: true, updatedAt: true });\nexport const insertRemediationTaskSchema = createInsertSchema(remediationTasks).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Define assessment-related types\nexport type Framework = typeof frameworks.$inferSelect;\nexport type Domain = typeof domains.$inferSelect;\nexport type Subdomain = typeof subdomains.$inferSelect;\nexport type Control = typeof controls.$inferSelect;\nexport type Assessment = typeof assessments.$inferSelect;\nexport type AssessmentResult = typeof assessmentResults.$inferSelect;\nexport type RemediationTask = typeof remediationTasks.$inferSelect;\n\nexport type InsertFramework = z.infer<typeof insertFrameworkSchema>;\nexport type InsertDomain = z.infer<typeof insertDomainSchema>;\nexport type InsertSubdomain = z.infer<typeof insertSubdomainSchema>;\nexport type InsertControl = z.infer<typeof insertControlSchema>;\n// Compliance reports and shareable links\nexport const complianceReports = pgTable(\"compliance_reports\", {\n  id: serial(\"id\").primaryKey(),\n  assessmentId: integer(\"assessment_id\").notNull(),\n  companyId: integer(\"company_id\").notNull(),\n  createdBy: integer(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow().notNull(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\"),\n  reportData: jsonb(\"report_data\").notNull(),\n  format: text(\"format\").default(\"pdf\").notNull(), // pdf, html, json, etc.\n  status: text(\"status\").default(\"generated\").notNull(), // generating, generated, error\n  isPublic: boolean(\"is_public\").default(false).notNull(),\n});\n\nexport const reportShareLinks = pgTable(\"report_share_links\", {\n  id: serial(\"id\").primaryKey(),\n  reportId: integer(\"report_id\").notNull(),\n  shareToken: uuid(\"share_token\").defaultRandom().notNull().unique(),\n  createdBy: integer(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\", { mode: 'string' }),\n  password: text(\"password\"),\n  viewCount: integer(\"view_count\").default(0).notNull(),\n  maxViews: integer(\"max_views\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const insertComplianceReportSchema = createInsertSchema(complianceReports).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertReportShareLinkSchema = createInsertSchema(reportShareLinks).omit({ \n  id: true, \n  createdAt: true, \n  shareToken: true,\n  viewCount: true\n});\n\nexport type ComplianceReport = typeof complianceReports.$inferSelect;\nexport type ReportShareLink = typeof reportShareLinks.$inferSelect;\nexport type InsertComplianceReport = z.infer<typeof insertComplianceReportSchema>;\nexport type InsertReportShareLink = z.infer<typeof insertReportShareLinkSchema>;\n\nexport type InsertAssessment = z.infer<typeof insertAssessmentSchema>;\nexport type InsertAssessmentResult = z.infer<typeof insertAssessmentResultSchema>;\nexport type InsertRemediationTask = z.infer<typeof insertRemediationTaskSchema>;\n\n// Policy Management System\nexport const policyCategories = pgTable(\"policy_categories\", {\n  id: serial(\"id\").primaryKey(),\n  categoryName: text(\"category_name\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow().notNull(),\n});\n\nexport const policyTemplates = pgTable(\"policy_templates\", {\n  id: serial(\"id\").primaryKey(),\n  templateName: text(\"template_name\").notNull(),\n  templateType: text(\"template_type\").notNull(), // Word/PDF\n  fileId: integer(\"file_id\").notNull(),\n  categoryId: integer(\"category_id\").notNull(),\n  dateUploaded: timestamp(\"date_uploaded\", { mode: 'string' }).defaultNow().notNull(),\n  uploadedBy: integer(\"uploaded_by\").notNull(),\n  version: text(\"version\").default(\"1.0\").notNull(),\n  placeholders: jsonb(\"placeholders\"), // Extracted placeholders\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const generatedPolicies = pgTable(\"generated_policies\", {\n  id: serial(\"id\").primaryKey(),\n  templateId: integer(\"template_id\").notNull(),\n  companyId: integer(\"company_id\").notNull(),\n  generatedFileId: integer(\"generated_file_id\").notNull(),\n  version: text(\"version\").default(\"1.0\").notNull(),\n  generationDate: timestamp(\"generation_date\", { mode: 'string' }).defaultNow().notNull(),\n  approvalStatus: text(\"approval_status\").default(\"pending\").notNull(), // pending, approved, rejected\n  approvedBy: integer(\"approved_by\"),\n  approvedDate: timestamp(\"approved_date\", { mode: 'string' }),\n  replacementData: jsonb(\"replacement_data\").notNull(), // Stored values used for placeholders\n  notes: text(\"notes\"),\n});\n\n// Create insert schemas for policy management\nexport const insertPolicyCategorySchema = createInsertSchema(policyCategories).omit({ \n  id: true, \n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertPolicyTemplateSchema = createInsertSchema(policyTemplates).omit({ \n  id: true, \n  dateUploaded: true\n});\n\nexport const insertGeneratedPolicySchema = createInsertSchema(generatedPolicies).omit({ \n  id: true, \n  generationDate: true, \n  approvedBy: true,\n  approvedDate: true\n});\n\n// Define policy management types\nexport type PolicyCategory = typeof policyCategories.$inferSelect;\nexport type PolicyTemplate = typeof policyTemplates.$inferSelect;\nexport type GeneratedPolicy = typeof generatedPolicies.$inferSelect;\n\nexport type InsertPolicyCategory = z.infer<typeof insertPolicyCategorySchema>;\nexport type InsertPolicyTemplate = z.infer<typeof insertPolicyTemplateSchema>;\nexport type InsertGeneratedPolicy = z.infer<typeof insertGeneratedPolicySchema>;\n\n// Onboarding and Gamification Schema\nexport const onboardingSteps = pgTable('onboarding_steps', {\n  id: serial('id').primaryKey(),\n  title: text('title').notNull(),\n  description: text('description'),\n  order: integer('order').notNull(),\n  type: text('type').notNull(), // 'learning', 'quiz', 'task', 'assessment'\n  content: jsonb('content').notNull(), // Contains questions, answers, and educational content\n  points: integer('points').notNull().default(10),\n  estimatedDuration: integer('estimated_duration').notNull(), // in minutes\n  prerequisiteStepIds: jsonb('prerequisite_step_ids').default([]),\n  createdAt: timestamp('created_at', { mode: 'string' }).notNull().defaultNow(),\n  updatedAt: timestamp('updated_at', { mode: 'string' }).notNull().defaultNow()\n});\n\nexport const userProgress = pgTable('user_progress', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  stepId: integer('step_id').notNull().references(() => onboardingSteps.id),\n  completed: boolean('completed').notNull().default(false),\n  score: integer('score'),\n  answers: jsonb('answers'), // User's answers to quizzes\n  startedAt: timestamp('started_at', { mode: 'string' }),\n  completedAt: timestamp('completed_at', { mode: 'string' }),\n  attempts: integer('attempts').notNull().default(0),\n  feedback: text('feedback'),\n  createdAt: timestamp('created_at', { mode: 'string' }).notNull().defaultNow(),\n  updatedAt: timestamp('updated_at', { mode: 'string' }).notNull().defaultNow()\n});\n\nexport const badges = pgTable('badges', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  description: text('description').notNull(),\n  imageUrl: text('image_url'),\n  category: text('category').notNull(), // 'achievement', 'learning', 'participation'\n  requiredPoints: integer('required_points'),\n  requiredSteps: jsonb('required_steps'),\n  isSecret: boolean('is_secret').notNull().default(false),\n  createdAt: timestamp('created_at', { mode: 'string' }).notNull().defaultNow()\n});\n\nexport const userBadges = pgTable('user_badges', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  badgeId: integer('badge_id').notNull().references(() => badges.id),\n  earnedAt: timestamp('earned_at', { mode: 'string' }).notNull().defaultNow(),\n  displayed: boolean('displayed').notNull().default(true)\n});\n\nexport const userGameStats = pgTable('user_game_stats', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id).unique(),\n  totalPoints: integer('total_points').notNull().default(0),\n  level: integer('level').notNull().default(1),\n  streakDays: integer('streak_days').notNull().default(0),\n  lastActivity: timestamp('last_activity', { mode: 'string' }).notNull().defaultNow(),\n  completedSteps: integer('completed_steps').notNull().default(0),\n  quizAverage: real('quiz_average'),\n  fastestCompletionTime: integer('fastest_completion_time'), // in seconds\n  updatedAt: timestamp('updated_at', { mode: 'string' }).notNull().defaultNow()\n});\n\n// Create insert schemas for onboarding and gamification\nexport const insertOnboardingStepSchema = createInsertSchema(onboardingSteps).omit({ \n  id: true, \n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({ \n  id: true, \n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertBadgeSchema = createInsertSchema(badges).omit({ \n  id: true, \n  createdAt: true\n});\n\nexport const insertUserBadgeSchema = createInsertSchema(userBadges).omit({ \n  id: true, \n  earnedAt: true\n});\n\nexport const insertUserGameStatsSchema = createInsertSchema(userGameStats).omit({ \n  id: true,\n  updatedAt: true\n});\n\n// Risk Management Schema\nexport const risks = pgTable('risks', {\n  id: serial('id').primaryKey(),\n  title: text('title').notNull(),\n  description: text('description').notNull(),\n  cause: text('cause'),\n  category: text('category').notNull(), // 'Strategic', 'Operational', 'Compliance'\n  owner: text('owner'),\n  likelihood: text('likelihood').notNull(), // 'Very Likely', 'Likely', 'Possible', 'Unlikely', 'Very Unlikely'\n  impact: text('impact').notNull(), // 'Catastrophic', 'Major', 'Serious', 'Medium', 'Minor'\n  inherentRiskLevel: text('inherent_risk_level').notNull(), // 'High', 'Medium', 'Low'\n  existingControls: text('existing_controls'),\n  controlEffectiveness: text('control_effectiveness'), // 'Effective', 'Needs Improvement', 'None'\n  residualRiskLevel: text('residual_risk_level'), // 'High', 'Medium', 'Low'\n  mitigationActions: text('mitigation_actions'),\n  targetDate: text('target_date'),\n  isAccepted: boolean('is_accepted').default(false),\n  companyId: integer('company_id').references(() => companyInfo.id),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull()\n});\n\n// Risk Assessment Link Table\nexport const assessmentRisks = pgTable('assessment_risks', {\n  id: serial('id').primaryKey(),\n  assessmentId: integer('assessment_id').notNull().references(() => assessments.id),\n  riskId: integer('risk_id').notNull().references(() => risks.id),\n  status: text('status').notNull().default('to_assess'), // 'to_assess', 'in_progress', 'completed'\n  notes: text('notes'),\n  evidence: text('evidence'),\n  reviewedBy: integer('reviewed_by').references(() => users.id),\n  reviewedAt: timestamp('reviewed_at'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull()\n});\n\n// Create insert schemas for risk management\nexport const insertRiskSchema = createInsertSchema(risks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertAssessmentRiskSchema = createInsertSchema(assessmentRisks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\n// Define onboarding and gamification types\nexport type OnboardingStep = typeof onboardingSteps.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type Badge = typeof badges.$inferSelect;\nexport type UserBadge = typeof userBadges.$inferSelect;\nexport type UserGameStats = typeof userGameStats.$inferSelect;\n\nexport type InsertOnboardingStep = z.infer<typeof insertOnboardingStepSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertBadge = z.infer<typeof insertBadgeSchema>;\nexport type InsertUserBadge = z.infer<typeof insertUserBadgeSchema>;\nexport type InsertUserGameStats = z.infer<typeof insertUserGameStatsSchema>;\n\n// Define risk management types\nexport type Risk = typeof risks.$inferSelect;\nexport type AssessmentRisk = typeof assessmentRisks.$inferSelect;\n\nexport type InsertRisk = z.infer<typeof insertRiskSchema>;\nexport type InsertAssessmentRisk = z.infer<typeof insertAssessmentRiskSchema>;\n","size_bytes":20286},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/home-page\";\nimport SolutionPage from \"@/pages/solution-page\";\nimport PricingPage from \"@/pages/pricing-page\";\nimport AboutPage from \"@/pages/about-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport DashboardPage from \"@/pages/dashboard-page\";\nimport AdminPage from \"@/pages/admin-page\";\nimport VirtualAssistantPage from \"@/pages/virtual-assistant-page\";\nimport DIDAgentPage from \"@/pages/did-agent-page\";\nimport AgentTestPage from \"@/pages/agent-test-page\";\nimport NcaEccPage from \"@/pages/frameworks/nca-ecc-page\";\nimport NcaEccAssessmentPage from \"@/pages/frameworks/nca-ecc-assessment-page\";\nimport SamaPage from \"@/pages/frameworks/sama-page\";\nimport SAMAFrameworkPage from \"@/pages/sama-framework-page\";\nimport PdplPage from \"@/pages/frameworks/pdpl-page\";\nimport Iso27001Page from \"@/pages/frameworks/iso-27001-page\";\nimport SecurityTimelineDemo from \"@/pages/security-timeline-demo\";\nimport SecurityProgressPage from \"@/pages/security-progress-page\";\nimport RiskManagementPage from \"@/pages/risk-management-page\";\nimport RiskAssessmentPage from \"@/pages/risk-assessment-page\";\nimport RiskPredictionPage from \"@/pages/risk-prediction-page\";\nimport PolicyManagementPage from \"@/pages/policy-management-page\";\nimport CompanyDashboardPage from \"@/pages/company-dashboard-page\";\nimport OnboardingPage from \"@/pages/onboarding-page\";\nimport ClerkAuthPage from \"@/pages/clerk-auth-page\";\nimport ClerkAdminPage from \"@/pages/clerk-admin-page\";\nimport UserDashboard from \"@/pages/user-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport SharedReportPage from \"@/pages/shared-report-page\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport { ClerkProtectedRoute } from \"@/lib/clerk-protected-route\";\nimport { AdminProtectedRoute, UserProtectedRoute } from \"@/lib/role-protected-routes\";\nimport ThemeProvider from \"@/components/layout/theme-switch\";\nimport CustomClerkProvider from \"@/components/clerk/custom-clerk-provider\";\n\nfunction Router() {\n        return (\n                <Switch>\n                        <Route path=\"/\" component={HomePage} />\n                        {/* Public Pages */}\n                        <Route path=\"/solution\" component={SolutionPage} />\n                        <Route path=\"/pricing\" component={PricingPage} />\n                        <Route path=\"/about\" component={AboutPage} />\n                        {/* Standard Authentication Routes */}\n                        <Route path=\"/login\" component={AuthPage} />\n                        <Route path=\"/auth\" component={AuthPage} />\n                        {/* Clerk Authentication Routes */}\n                        <Route path=\"/clerk-auth\" component={ClerkAuthPage} />\n                        <Route path=\"/clerk-login\" component={ClerkAuthPage} />\n                        <ClerkProtectedRoute path=\"/clerk-admin\" component={ClerkAdminPage} />\n                        {/* New Role-Protected Routes */}\n                        <AdminProtectedRoute path=\"/admin-dashboard\" component={AdminDashboard} />\n                        <UserProtectedRoute path=\"/user-dashboard\" component={UserDashboard} />\n                        {/* Protected Routes - accessible through either auth system */}\n                        <ProtectedRoute path=\"/dashboard\" component={DashboardPage} />\n                        <ProtectedRoute path=\"/admin\" component={AdminPage} />\n                        <ProtectedRoute path=\"/virtual-assistant\" component={VirtualAssistantPage} />\n                        <ProtectedRoute path=\"/risk-management\" component={RiskManagementPage} />\n                        <ProtectedRoute path=\"/risk-assessment\" component={RiskAssessmentPage} />\n                        <ProtectedRoute path=\"/risk-prediction\" component={RiskPredictionPage} />\n                        <ProtectedRoute path=\"/policies\" component={PolicyManagementPage} />\n                        <ProtectedRoute path=\"/security-timeline\" component={SecurityTimelineDemo} />\n                        <ProtectedRoute path=\"/security-progress\" component={SecurityProgressPage} />\n                        <Route path=\"/company\" component={CompanyDashboardPage} />\n                        <Route path=\"/onboarding\" component={OnboardingPage} />\n                        {/* Public Routes */}\n                        <Route path=\"/did-agent\" component={DIDAgentPage} />\n                        <Route path=\"/agent\" component={DIDAgentPage} />\n                        <Route path=\"/agent-test\" component={AgentTestPage} />\n                        <Route path=\"/frameworks/nca-ecc\" component={NcaEccPage} />\n                        <ProtectedRoute path=\"/frameworks/nca-ecc-assessment\" component={NcaEccAssessmentPage} />\n                        <Route path=\"/frameworks/sama\" component={SamaPage} />\n                        <ProtectedRoute path=\"/frameworks/sama-assessment\" component={SAMAFrameworkPage} />\n                        <Route path=\"/frameworks/pdpl\" component={PdplPage} />\n                        <Route path=\"/frameworks/iso-27001\" component={Iso27001Page} />\n                        {/* Report Routes */}\n                        <Route path=\"/shared-report/:token\" component={SharedReportPage} />\n                        <ProtectedRoute path=\"/reports/:id\" component={NotFound} />\n                        <Route component={NotFound} />\n                </Switch>\n        );\n}\n\nfunction App() {\n        return (\n                <QueryClientProvider client={queryClient}>\n                        <CustomClerkProvider>\n                                <AuthProvider>\n                                        <HelmetProvider>\n                                                <ThemeProvider>\n                                                        <Router />\n                                                        <Toaster />\n                                                </ThemeProvider>\n                                        </HelmetProvider>\n                                </AuthProvider>\n                        </CustomClerkProvider>\n                </QueryClientProvider>\n        );\n}\n\nexport default App;\n","size_bytes":6483},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":189},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/api/assessment-results.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { db } from \"../db\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { json } from \"drizzle-orm/pg-core\";\n\nconst router = Router();\n\n// Get all assessment results for a specific assessment\nrouter.get(\"/api/assessment-results/:assessmentId\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const assessmentId = parseInt(req.params.assessmentId);\n    \n    // Get results with control information\n    const results = await db.execute(sql`\n      SELECT \n        ar.*,\n        c.name as \"controlName\",\n        c.description as \"controlDescription\",\n        d.name as \"domainName\",\n        d.code as \"domainCode\",\n        c.code as \"controlCode\"\n      FROM \n        assessment_results ar\n      JOIN \n        controls c ON ar.control_id = c.id\n      JOIN \n        domains d ON c.domain_id = d.id\n      JOIN \n        assessments a ON ar.assessment_id = a.id\n      WHERE \n        ar.assessment_id = ${assessmentId}\n      AND\n        a.company_id = ${req.user.companyId || 1}\n      ORDER BY\n        d.order, c.order\n    `);\n    \n    res.json(results.rows);\n  } catch (error) {\n    console.error(\"Error fetching assessment results:\", error);\n    res.status(500).json({ error: \"Failed to fetch assessment results\" });\n  }\n});\n\n// Get a specific assessment result\nrouter.get(\"/api/assessment-results/detail/:id\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const id = parseInt(req.params.id);\n    const result = await storage.getAssessmentResultById(id);\n    \n    if (!result) {\n      return res.status(404).json({ error: \"Assessment result not found\" });\n    }\n    \n    // Get assessment to verify user has access\n    const assessment = await storage.getAssessmentById(result.assessmentId);\n    \n    if (!assessment) {\n      return res.status(404).json({ error: \"Assessment not found\" });\n    }\n    \n    // Get control information\n    const control = await storage.getControlById(result.controlId);\n    const domain = control ? await storage.getDomainById(control.domainId) : null;\n    \n    const resultWithDetails = {\n      ...result,\n      controlName: control?.name,\n      controlDescription: control?.description,\n      domainName: domain?.name,\n      domainCode: domain?.code,\n      controlCode: control?.code,\n    };\n    \n    res.json(resultWithDetails);\n  } catch (error) {\n    console.error(\"Error fetching assessment result:\", error);\n    res.status(500).json({ error: \"Failed to fetch assessment result\" });\n  }\n});\n\n// Update an assessment result\nrouter.patch(\"/api/assessment-results/:id\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const id = parseInt(req.params.id);\n    const result = await storage.getAssessmentResultById(id);\n    \n    if (!result) {\n      return res.status(404).json({ error: \"Assessment result not found\" });\n    }\n    \n    // Update the result data\n    const updatedData = {\n      ...result,\n      status: req.body.status || result.status,\n      evidence: req.body.evidence !== undefined ? req.body.evidence : result.evidence,\n      recommendation: req.body.recommendation !== undefined ? req.body.recommendation : result.recommendation,\n      managementResponse: req.body.managementResponse !== undefined ? req.body.managementResponse : result.managementResponse,\n      targetDate: req.body.targetDate !== undefined ? req.body.targetDate : result.targetDate,\n      updatedBy: req.user.id,\n    };\n    \n    // Save the updated result\n    const updatedResult = await storage.saveAssessmentResult(updatedData);\n    \n    // Get control information for response\n    const control = await storage.getControlById(result.controlId);\n    const domain = control ? await storage.getDomainById(control.domainId) : null;\n    \n    const resultWithDetails = {\n      ...updatedResult,\n      controlName: control?.name,\n      controlDescription: control?.description,\n      domainName: domain?.name,\n      domainCode: domain?.code,\n      controlCode: control?.code,\n    };\n    \n    res.json(resultWithDetails);\n  } catch (error) {\n    console.error(\"Error updating assessment result:\", error);\n    res.status(400).json({ error: \"Failed to update assessment result\" });\n  }\n});\n\nexport default router;","size_bytes":4448},"server/api/assessment-risks.ts":{"content":"import express, { Request, Response } from 'express';\nimport { storage } from '../storage';\nimport { insertAssessmentRiskSchema } from '@shared/schema';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Get assessment risks by assessment ID\nrouter.get('/assessment/:assessmentId', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const assessmentId = parseInt(req.params.assessmentId);\n    const assessmentRisks = await storage.getAssessmentRisksByAssessmentId(assessmentId);\n    \n    res.json(assessmentRisks);\n  } catch (error: any) {\n    console.error('Error getting assessment risks:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Get assessment risk by ID\nrouter.get('/:id', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const id = parseInt(req.params.id);\n    const assessmentRisk = await storage.getAssessmentRiskById(id);\n    \n    if (!assessmentRisk) {\n      return res.status(404).json({ message: 'Assessment risk not found' });\n    }\n    \n    res.json(assessmentRisk);\n  } catch (error: any) {\n    console.error('Error getting assessment risk by ID:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Create or update assessment risk\nrouter.post('/', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Validate request body\n    const validatedData = insertAssessmentRiskSchema.parse(req.body);\n    \n    // Save the assessment risk\n    const assessmentRisk = await storage.saveAssessmentRisk(validatedData);\n    \n    res.status(201).json(assessmentRisk);\n  } catch (error: any) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({ message: 'Validation error', errors: error.errors });\n    } else {\n      console.error('Error creating/updating assessment risk:', error);\n      res.status(500).json({ message: error.message });\n    }\n  }\n});\n\n// Delete assessment risk\nrouter.delete('/:id', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const id = parseInt(req.params.id);\n    await storage.deleteAssessmentRisk(id);\n    \n    res.sendStatus(204);\n  } catch (error: any) {\n    console.error('Error deleting assessment risk:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Assign risks to an assessment\nrouter.post('/assign', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const { assessmentId, riskIds } = req.body;\n    \n    if (!assessmentId || !Array.isArray(riskIds)) {\n      return res.status(400).json({ message: 'Invalid request. assessmentId and riskIds array required.' });\n    }\n    \n    const results = [];\n    \n    for (const riskId of riskIds) {\n      try {\n        // Check if the assignment already exists\n        const existingAssessmentRisks = await storage.getAssessmentRisksByAssessmentId(assessmentId);\n        const alreadyAssigned = existingAssessmentRisks.some(ar => ar.riskId === riskId);\n        \n        if (!alreadyAssigned) {\n          const assessmentRisk = await storage.saveAssessmentRisk({\n            assessmentId,\n            riskId,\n            status: 'to_assess'\n          });\n          \n          results.push({\n            success: true,\n            assessmentRisk\n          });\n        } else {\n          results.push({\n            success: false,\n            riskId,\n            error: 'Risk already assigned to this assessment'\n          });\n        }\n      } catch (error: any) {\n        results.push({\n          success: false,\n          riskId,\n          error: error.message\n        });\n      }\n    }\n    \n    res.status(201).json({\n      totalProcessed: riskIds.length,\n      successCount: results.filter(r => r.success).length,\n      failureCount: results.filter(r => !r.success).length,\n      results\n    });\n  } catch (error: any) {\n    console.error('Error assigning risks to assessment:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Update status of an assessment risk\nrouter.patch('/:id/status', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const id = parseInt(req.params.id);\n    const { status, notes, evidence } = req.body;\n    \n    if (!status || !['to_assess', 'in_progress', 'completed'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid status. Must be one of: to_assess, in_progress, completed' });\n    }\n    \n    const assessmentRisk = await storage.getAssessmentRiskById(id);\n    \n    if (!assessmentRisk) {\n      return res.status(404).json({ message: 'Assessment risk not found' });\n    }\n    \n    const updatedAssessmentRisk = await storage.saveAssessmentRisk({\n      ...assessmentRisk,\n      status,\n      notes: notes || assessmentRisk.notes,\n      evidence: evidence || assessmentRisk.evidence,\n      reviewedBy: status === 'completed' ? req.user?.id : assessmentRisk.reviewedBy,\n      reviewedAt: status === 'completed' ? new Date().toISOString() : assessmentRisk.reviewedAt\n    });\n    \n    res.json(updatedAssessmentRisk);\n  } catch (error: any) {\n    console.error('Error updating assessment risk status:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\nexport default router;","size_bytes":5472},"server/api/assessments.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { db } from \"../db\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { insertAssessmentSchema, assessmentResults, frameworks } from \"@shared/schema\";\nimport { json } from \"drizzle-orm/pg-core\";\n\nconst router = Router();\n\n// Get all assessments for the current user\nrouter.get(\"/api/assessments\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    // Get assessments with framework names\n    const assessmentsWithFrameworks = await db.execute(sql`\n      SELECT \n        a.*,\n        f.name as \"frameworkName\"\n      FROM \n        assessments a\n      JOIN \n        frameworks f ON a.framework_id = f.id\n      WHERE \n        a.company_id = ${req.user.companyId || 1}\n      ORDER BY \n        a.updated_at DESC\n    `);\n    \n    res.json(assessmentsWithFrameworks.rows);\n  } catch (error) {\n    console.error(\"Error fetching assessments:\", error);\n    res.status(500).json({ error: \"Failed to fetch assessments\" });\n  }\n});\n\n// Get a specific assessment\nrouter.get(\"/api/assessments/:id\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const id = parseInt(req.params.id);\n    \n    // Get assessment with framework name\n    const [assessmentWithFramework] = await db.execute(sql`\n      SELECT \n        a.*,\n        f.name as \"frameworkName\"\n      FROM \n        assessments a\n      JOIN \n        frameworks f ON a.framework_id = f.id\n      WHERE \n        a.id = ${id}\n      AND\n        a.company_id = ${req.user.companyId || 1}\n    `);\n    \n    if (!assessmentWithFramework) {\n      return res.status(404).json({ error: \"Assessment not found\" });\n    }\n    \n    res.json(assessmentWithFramework);\n  } catch (error) {\n    console.error(\"Error fetching assessment:\", error);\n    res.status(500).json({ error: \"Failed to fetch assessment\" });\n  }\n});\n\n// Create a new assessment\nrouter.post(\"/api/assessments\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const parsedData = insertAssessmentSchema.parse({\n      ...req.body,\n      companyId: req.user.companyId || 1,\n      createdBy: req.user.id,\n    });\n    \n    const assessment = await storage.createAssessment(parsedData);\n    \n    // Get all controls for the framework\n    const framework = await storage.getFrameworkById(parsedData.frameworkId);\n    const domains = await storage.getDomainsByFrameworkId(parsedData.frameworkId);\n    \n    // For each domain, get controls and create assessment results\n    for (const domain of domains) {\n      const controls = await storage.getControlsByDomainId(domain.id);\n      \n      for (const control of controls) {\n        // Create an assessment result for each control with default \"not_implemented\" status\n        await storage.saveAssessmentResult({\n          assessmentId: assessment.id,\n          controlId: control.id,\n          status: \"not_implemented\",\n          evidence: null,\n          recommendation: \"\",\n          managementResponse: \"\",\n          targetDate: null,\n          updatedBy: req.user.id,\n        });\n      }\n    }\n    \n    res.status(201).json({\n      ...assessment,\n      frameworkName: framework?.name || \"Unknown Framework\",\n    });\n  } catch (error) {\n    console.error(\"Error creating assessment:\", error);\n    res.status(400).json({ error: \"Failed to create assessment\" });\n  }\n});\n\n// Update an assessment status\nrouter.patch(\"/api/assessments/:id\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const id = parseInt(req.params.id);\n    const { status, score } = req.body;\n    \n    const assessment = await storage.updateAssessmentStatus(id, status, score);\n    \n    if (!assessment) {\n      return res.status(404).json({ error: \"Assessment not found\" });\n    }\n    \n    res.json(assessment);\n  } catch (error) {\n    console.error(\"Error updating assessment:\", error);\n    res.status(400).json({ error: \"Failed to update assessment\" });\n  }\n});\n\n// Complete an assessment (set status to completed and calculate score)\nrouter.post(\"/api/assessments/:id/complete\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const id = parseInt(req.params.id);\n    const assessment = await storage.getAssessmentById(id);\n    \n    if (!assessment) {\n      return res.status(404).json({ error: \"Assessment not found\" });\n    }\n    \n    // Get all results for this assessment\n    const results = await storage.getAssessmentResultsByAssessmentId(id);\n    \n    // Calculate score based on implementation status\n    const totalControls = results.length;\n    const implementedControls = results.filter(r => r.status === \"implemented\").length;\n    const partiallyImplementedControls = results.filter(r => r.status === \"partially_implemented\").length;\n    \n    // Calculate score: implemented = 100%, partially = 50%, not implemented = 0%\n    const score = ((implementedControls * 1.0) + (partiallyImplementedControls * 0.5)) / totalControls * 100;\n    \n    // Update assessment status and score\n    const updatedAssessment = await storage.updateAssessmentStatus(\n      id, \n      \"completed\",\n      Math.round(score * 10) / 10 // Round to 1 decimal place\n    );\n    \n    res.json(updatedAssessment);\n  } catch (error) {\n    console.error(\"Error completing assessment:\", error);\n    res.status(500).json({ error: \"Failed to complete assessment\" });\n  }\n});\n\nexport default router;","size_bytes":5679},"server/api/company-info.ts":{"content":"import express, { Request, Response } from \"express\";\nimport { storage } from \"../storage\";\n// Use Express's built-in authentication check\nconst isAuthenticated = (req: Request, res: Response, next: Function) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  next();\n};\nimport { log } from \"../vite\";\nimport multer from \"multer\";\nimport { insertCompanyInfoSchema } from \"@shared/schema\";\nimport { saveFileToDatabase, getFileById, deleteFile } from \"../file-service\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\n\nconst router = express.Router();\n\n// Configure multer for logo uploads\nconst logoStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const dir = path.join(process.cwd(), \"uploads\", \"logos\");\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n    cb(null, dir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    const ext = path.extname(file.originalname);\n    cb(null, `company-logo-${uniqueSuffix}${ext}`);\n  }\n});\n\nconst logoUpload = multer({\n  storage: logoStorage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith(\"image/\")) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only image files are allowed\") as any);\n    }\n  }\n});\n\n// Configure multer for document uploads\nconst documentStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const dir = path.join(process.cwd(), \"uploads\", \"company-docs\");\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n    cb(null, dir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    const ext = path.extname(file.originalname);\n    cb(null, `company-doc-${uniqueSuffix}${ext}`);\n  }\n});\n\nconst documentUpload = multer({\n  storage: documentStorage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n  }\n});\n\n// Get company information\nrouter.get(\"/\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const companyInfo = await storage.getCompanyInfo();\n    \n    if (!companyInfo) {\n      return res.status(404).json({ message: \"Company information not found\" });\n    }\n    \n    // Fetch logo file info if it exists\n    let logoFile = null;\n    if (companyInfo.logoId) {\n      logoFile = await getFileById(companyInfo.logoId);\n    }\n    \n    // Prepare response with logo URL if available\n    const response = {\n      ...companyInfo,\n      logoUrl: logoFile ? `/api/files/${logoFile.id}` : null,\n      logoFile\n    };\n    \n    res.status(200).json(response);\n  } catch (error) {\n    log(`Error fetching company information: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to fetch company information\" });\n  }\n});\n\n// Create or update company information\nrouter.post(\"/\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const companyData = req.body;\n    \n    // Validate the data\n    const validatedData = insertCompanyInfoSchema.parse(companyData);\n    \n    // Save to database\n    const savedCompanyInfo = await storage.saveCompanyInfo({\n      ...validatedData,\n      updatedBy: req.user?.id || 0\n    });\n    \n    res.status(201).json(savedCompanyInfo);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    log(`Error saving company information: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to save company information\" });\n  }\n});\n\n// Upload company logo\nrouter.post(\"/logo\", isAuthenticated, logoUpload.single(\"logo\"), async (req: Request, res: Response) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ error: \"No logo file uploaded\" });\n    }\n    \n    // Save file to database\n    const savedFile = await saveFileToDatabase(req.file, \"company-logo\", req.user?.id || 0);\n    \n    // Get existing company info\n    let companyInfo = await storage.getCompanyInfo();\n    \n    // Delete old logo file if it exists\n    if (companyInfo && companyInfo.logoId) {\n      await deleteFile(companyInfo.logoId);\n    }\n    \n    // Update company info with new logo file ID\n    companyInfo = await storage.saveCompanyInfo({\n      ...(companyInfo || { companyName: \"Default Company\" }),\n      logoId: savedFile,\n      updatedBy: req.user?.id || 0\n    });\n    \n    res.status(201).json({\n      logoId: savedFile,\n      logoUrl: `/api/files/${savedFile}`,\n      companyInfo\n    });\n  } catch (error) {\n    if (req.file && fs.existsSync(req.file.path)) {\n      fs.unlinkSync(req.file.path); // Delete the file if there was an error\n    }\n    \n    log(`Error uploading company logo: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to upload company logo\" });\n  }\n});\n\n// Upload company document\nrouter.post(\"/documents\", isAuthenticated, documentUpload.single(\"document\"), async (req: Request, res: Response) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ error: \"No document file uploaded\" });\n    }\n    \n    // Save file to database\n    const savedFile = await saveFileToDatabase(req.file, \"company-document\", req.user?.id || 0);\n    \n    // Get existing company info\n    let companyInfo = await storage.getCompanyInfo();\n    \n    if (!companyInfo) {\n      return res.status(404).json({ error: \"Company information not found\" });\n    }\n    \n    // Add document ID to array\n    const documentsFileIds = companyInfo.documentsFileIds ? [...companyInfo.documentsFileIds as number[]] : [];\n    documentsFileIds.push(savedFile);\n    \n    // Update company info with new documents array\n    companyInfo = await storage.saveCompanyInfo({\n      ...companyInfo,\n      documentsFileIds,\n      updatedBy: req.user?.id || 0\n    });\n    \n    res.status(201).json({\n      documentId: savedFile,\n      documentUrl: `/api/files/${savedFile}`,\n      companyInfo\n    });\n  } catch (error) {\n    if (req.file && fs.existsSync(req.file.path)) {\n      fs.unlinkSync(req.file.path); // Delete the file if there was an error\n    }\n    \n    log(`Error uploading company document: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to upload company document\" });\n  }\n});\n\n// Get company documents\nrouter.get(\"/documents\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const companyInfo = await storage.getCompanyInfo();\n    \n    if (!companyInfo) {\n      return res.status(404).json({ error: \"Company information not found\" });\n    }\n    \n    // Get document files\n    const documentsFileIds = companyInfo.documentsFileIds as number[] || [];\n    const documents = [];\n    \n    for (const fileId of documentsFileIds) {\n      const file = await getFileById(fileId);\n      if (file) {\n        documents.push({\n          ...file,\n          downloadUrl: `/api/company/documents/${fileId}/download`\n        });\n      }\n    }\n    \n    res.status(200).json({ documents });\n  } catch (error) {\n    log(`Error fetching company documents: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to fetch company documents\" });\n  }\n});\n\n// Download a specific company document\nrouter.get(\"/documents/:id/download\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const fileId = parseInt(req.params.id);\n    if (isNaN(fileId)) {\n      return res.status(400).json({ error: \"Invalid file ID\" });\n    }\n    \n    const file = await getFileById(fileId);\n    if (!file) {\n      return res.status(404).json({ error: \"Document not found\" });\n    }\n    \n    // Verify the file exists on disk\n    if (!fs.existsSync(file.path)) {\n      return res.status(404).json({ error: \"Document file not found on disk\" });\n    }\n    \n    // Send the file for download\n    res.download(file.path, file.originalName);\n  } catch (error) {\n    log(`Error downloading company document: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to download company document\" });\n  }\n});\n\n// Delete a company document\nrouter.delete(\"/documents/:id\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const fileId = parseInt(req.params.id);\n    if (isNaN(fileId)) {\n      return res.status(400).json({ error: \"Invalid file ID\" });\n    }\n    \n    // Get existing company info\n    let companyInfo = await storage.getCompanyInfo();\n    \n    if (!companyInfo) {\n      return res.status(404).json({ error: \"Company information not found\" });\n    }\n    \n    // Remove document ID from array\n    const documentsFileIds = companyInfo.documentsFileIds as number[] || [];\n    const updatedDocumentsFileIds = documentsFileIds.filter(id => id !== fileId);\n    \n    // Update company info with new documents array\n    companyInfo = await storage.saveCompanyInfo({\n      ...companyInfo,\n      documentsFileIds: updatedDocumentsFileIds,\n      updatedBy: req.user?.id || 0\n    });\n    \n    // Delete the file\n    await deleteFile(fileId);\n    \n    res.status(200).json({ message: \"Document deleted successfully\", companyInfo });\n  } catch (error) {\n    log(`Error deleting company document: ${error}`, \"company-api\");\n    res.status(500).json({ error: \"Failed to delete company document\" });\n  }\n});\n\nexport default router;","size_bytes":9328},"server/api/controls.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertControlSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Get controls with query parameters (domainId or subdomainId)\nrouter.get(\"/api/controls\", async (req, res) => {\n  try {\n    const subdomainId = req.query.subdomainId ? parseInt(req.query.subdomainId as string) : undefined;\n    const domainId = req.query.domainId ? parseInt(req.query.domainId as string) : undefined;\n    \n    if (subdomainId) {\n      const subdomain = await storage.getSubdomainById(subdomainId);\n      \n      if (!subdomain) {\n        return res.status(404).json({ error: \"Subdomain not found\" });\n      }\n      \n      const controls = await storage.getControlsBySubdomainId(subdomainId);\n      \n      // Get domain info for additional context\n      const domain = await storage.getDomainById(subdomain.domainId);\n      \n      // Enhance controls with their codes\n      const controlsWithCodes = controls.map((control, index) => {\n        return {\n          ...control,\n          code: `C${index + 1}`,\n          domainName: domain?.name || '',\n          subdomainName: subdomain.name,\n        };\n      });\n      \n      return res.json(controlsWithCodes);\n    }\n    \n    if (domainId) {\n      const domain = await storage.getDomainById(domainId);\n      \n      if (!domain) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n      \n      const controls = await storage.getControlsByDomainId(domainId);\n      \n      // Enhance controls with their codes\n      const controlsWithCodes = controls.map((control, index) => {\n        return {\n          ...control,\n          code: `C${index + 1}`,\n          domainName: domain.name,\n        };\n      });\n      \n      return res.json(controlsWithCodes);\n    }\n    \n    // If no query parameters are provided, return an error\n    return res.status(400).json({ error: \"Either subdomainId or domainId is required\" });\n  } catch (error) {\n    console.error(\"Error fetching controls:\", error);\n    res.status(500).json({ error: \"Failed to fetch controls\" });\n  }\n});\n\n// Get all subdomains for a domain\nrouter.get(\"/api/domains/:domainId/subdomains\", async (req, res) => {\n  try {\n    const domainId = parseInt(req.params.domainId);\n    const domain = await storage.getDomainById(domainId);\n    \n    if (!domain) {\n      return res.status(404).json({ error: \"Domain not found\" });\n    }\n    \n    const subdomains = await storage.getSubdomainsByDomainId(domainId);\n    \n    res.json(subdomains);\n  } catch (error) {\n    console.error(\"Error fetching subdomains:\", error);\n    res.status(500).json({ error: \"Failed to fetch subdomains\" });\n  }\n});\n\n// Get all controls for a subdomain\nrouter.get(\"/api/subdomains/:subdomainId/controls\", async (req, res) => {\n  try {\n    const subdomainId = parseInt(req.params.subdomainId);\n    const subdomain = await storage.getSubdomainById(subdomainId);\n    \n    if (!subdomain) {\n      return res.status(404).json({ error: \"Subdomain not found\" });\n    }\n    \n    const domain = await storage.getDomainById(subdomain.domainId);\n    const controls = await storage.getControlsBySubdomainId(subdomainId);\n    \n    // Enhance controls with their codes\n    const controlsWithCodes = controls.map((control, index) => {\n      return {\n        ...control,\n        code: `C${index + 1}`,\n        domainName: domain?.name || '',\n        subdomainName: subdomain.name,\n      };\n    });\n    \n    res.json(controlsWithCodes);\n  } catch (error) {\n    console.error(\"Error fetching controls:\", error);\n    res.status(500).json({ error: \"Failed to fetch controls\" });\n  }\n});\n\n// Get all controls for a domain (including all subdomains)\nrouter.get(\"/api/domains/:domainId/controls\", async (req, res) => {\n  try {\n    const domainId = parseInt(req.params.domainId);\n    const domain = await storage.getDomainById(domainId);\n    \n    if (!domain) {\n      return res.status(404).json({ error: \"Domain not found\" });\n    }\n    \n    const controls = await storage.getControlsByDomainId(domainId);\n    \n    // Enhance controls with their codes\n    const controlsWithCodes = controls.map((control, index) => {\n      return {\n        ...control,\n        code: `C${index + 1}`,\n        domainName: domain.name,\n      };\n    });\n    \n    res.json(controlsWithCodes);\n  } catch (error) {\n    console.error(\"Error fetching controls:\", error);\n    res.status(500).json({ error: \"Failed to fetch controls\" });\n  }\n});\n\n// Get a specific control\nrouter.get(\"/api/controls/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const control = await storage.getControlById(id);\n    \n    if (!control) {\n      return res.status(404).json({ error: \"Control not found\" });\n    }\n    \n    // Get the subdomain and domain info\n    const subdomain = await storage.getSubdomainById(control.subdomainId);\n    let domainName = '';\n    \n    if (subdomain) {\n      const domain = await storage.getDomainById(subdomain.domainId);\n      if (domain) {\n        domainName = domain.name;\n      }\n    }\n    \n    res.json({\n      ...control,\n      domainName,\n      subdomainName: subdomain?.name || '',\n    });\n  } catch (error) {\n    console.error(\"Error fetching control:\", error);\n    res.status(500).json({ error: \"Failed to fetch control\" });\n  }\n});\n\n// Create a new control (Admin only)\nrouter.post(\"/api/controls\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const parsedData = insertControlSchema.parse(req.body);\n    const control = await storage.saveControl(parsedData);\n    res.status(201).json(control);\n  } catch (error) {\n    console.error(\"Error creating control:\", error);\n    res.status(400).json({ error: \"Failed to create control\" });\n  }\n});\n\nexport default router;","size_bytes":5824},"server/api/did-agent.ts":{"content":"import express from 'express';\nimport { Request, Response } from 'express';\n\nconst router = express.Router();\n\n// Endpoint to get DID API keys (public versions to validate on frontend)\nrouter.get('/api/did-keys', async (req: Request, res: Response) => {\n  try {\n    // Send safe versions of the keys - only enough to validate they exist\n    // Never expose full API keys to client\n    res.json({\n      agentId: process.env.DID_AGENT_ID || null,\n      apiKey: process.env.DID_API_KEY ? true : null\n    });\n  } catch (error) {\n    console.error('Error fetching DID keys:', error);\n    res.status(500).json({ error: 'Failed to retrieve DID keys' });\n  }\n});\n\n// Endpoint to create a new talk with the DID agent\nrouter.post('/api/did-agent/talk', async (req: Request, res: Response) => {\n  try {\n    const { text, presenter_id = 'kgn-KqCZSo' } = req.body;\n    \n    if (!text) {\n      return res.status(400).json({ error: 'Text is required' });\n    }\n    \n    // Get API key from environment\n    const apiKey = process.env.DID_API_KEY;\n    if (!apiKey) {\n      return res.status(500).json({ error: 'DID API key is not configured' });\n    }\n    \n    // Create talk using D-ID API\n    const response = await fetch('https://api.d-id.com/talks', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        script: {\n          type: \"text\",\n          input: text,\n          provider: {\n            type: \"microsoft\",\n            voice_id: \"en-US-ChristopherNeural\",\n            voice_config: {\n              style: \"Calm\"\n            }\n          }\n        },\n        config: {\n          fluent: true,\n          pad_audio: 0,\n          stitch: true,\n        },\n        presenter_id,\n        driver_id: \"mdo-gpt\",\n      }),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('D-ID API error:', errorData);\n      return res.status(response.status).json({ \n        error: errorData.message || 'Error communicating with D-ID API'\n      });\n    }\n    \n    const data = await response.json();\n    res.json(data);\n  } catch (error) {\n    console.error('Error creating talk:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Failed to create talk'\n    });\n  }\n});\n\n// Endpoint to check the status of a talk\nrouter.get('/api/did-agent/talk/:id', async (req: Request, res: Response) => {\n  try {\n    const talkId = req.params.id;\n    \n    // Get API key from environment\n    const apiKey = process.env.DID_API_KEY;\n    if (!apiKey) {\n      return res.status(500).json({ error: 'DID API key is not configured' });\n    }\n    \n    // Check talk status\n    const response = await fetch(`https://api.d-id.com/talks/${talkId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Basic ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('D-ID API error:', errorData);\n      return res.status(response.status).json({ \n        error: errorData.message || 'Error communicating with D-ID API'\n      });\n    }\n    \n    const data = await response.json();\n    res.json(data);\n  } catch (error) {\n    console.error('Error checking talk status:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Failed to check talk status'\n    });\n  }\n});\n\nexport default router;","size_bytes":3514},"server/api/domains.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertDomainSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Get all domains for a framework\nrouter.get(\"/api/frameworks/:frameworkId/domains\", async (req, res) => {\n  try {\n    const frameworkId = parseInt(req.params.frameworkId);\n    const domains = await storage.getDomainsByFrameworkId(frameworkId);\n    \n    // Enhance domains with their codes\n    const domainsWithCodes = domains.map((domain, index) => {\n      return {\n        ...domain,\n        code: `D${index + 1}`\n      };\n    });\n    \n    res.json(domainsWithCodes);\n  } catch (error) {\n    console.error(\"Error fetching domains:\", error);\n    res.status(500).json({ error: \"Failed to fetch domains\" });\n  }\n});\n\n// Get a specific domain\nrouter.get(\"/api/domains/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const domain = await storage.getDomainById(id);\n    \n    if (!domain) {\n      return res.status(404).json({ error: \"Domain not found\" });\n    }\n    \n    res.json(domain);\n  } catch (error) {\n    console.error(\"Error fetching domain:\", error);\n    res.status(500).json({ error: \"Failed to fetch domain\" });\n  }\n});\n\n// Create a new domain (Admin only)\nrouter.post(\"/api/domains\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const parsedData = insertDomainSchema.parse(req.body);\n    const domain = await storage.saveDomain(parsedData);\n    res.status(201).json(domain);\n  } catch (error) {\n    console.error(\"Error creating domain:\", error);\n    res.status(400).json({ error: \"Failed to create domain\" });\n  }\n});\n\nexport default router;","size_bytes":1724},"server/api/frameworks.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { eq } from \"drizzle-orm\";\nimport { insertFrameworkSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Get all frameworks\nrouter.get(\"/api/frameworks\", async (req, res) => {\n  try {\n    const frameworks = await storage.getFrameworks();\n    res.json(frameworks);\n  } catch (error) {\n    console.error(\"Error fetching frameworks:\", error);\n    res.status(500).json({ error: \"Failed to fetch frameworks\" });\n  }\n});\n\n// Get a specific framework by ID\nrouter.get(\"/api/frameworks/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const framework = await storage.getFrameworkById(id);\n    \n    if (!framework) {\n      return res.status(404).json({ error: \"Framework not found\" });\n    }\n    \n    res.json(framework);\n  } catch (error) {\n    console.error(\"Error fetching framework:\", error);\n    res.status(500).json({ error: \"Failed to fetch framework\" });\n  }\n});\n\n// Create a new framework (Admin only)\nrouter.post(\"/api/frameworks\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  try {\n    const parsedData = insertFrameworkSchema.parse(req.body);\n    const framework = await storage.saveFramework(parsedData);\n    res.status(201).json(framework);\n  } catch (error) {\n    console.error(\"Error creating framework:\", error);\n    res.status(400).json({ error: \"Failed to create framework\" });\n  }\n});\n\nexport default router;","size_bytes":1515},"server/api/gamification.ts":{"content":"import express from \"express\";\nimport { storage } from \"../storage\";\nimport { insertBadgeSchema, insertUserBadgeSchema, insertUserGameStatsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport const gamificationRouter = express.Router();\n\n// Badges routes\n// Get all badges\ngamificationRouter.get(\"/badges\", async (req, res) => {\n  try {\n    const badges = await storage.getBadges();\n    res.json(badges);\n  } catch (error) {\n    console.error(\"Error fetching badges:\", error);\n    res.status(500).json({ error: \"Failed to fetch badges\" });\n  }\n});\n\n// Get badges by category\ngamificationRouter.get(\"/badges/category/:category\", async (req, res) => {\n  try {\n    const { category } = req.params;\n    const badges = await storage.getBadgesByCategory(category);\n    res.json(badges);\n  } catch (error) {\n    console.error(\"Error fetching badges by category:\", error);\n    res.status(500).json({ error: \"Failed to fetch badges by category\" });\n  }\n});\n\n// Get a specific badge\ngamificationRouter.get(\"/badges/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid ID\" });\n    }\n    \n    const badge = await storage.getBadgeById(id);\n    if (!badge) {\n      return res.status(404).json({ error: \"Badge not found\" });\n    }\n    \n    res.json(badge);\n  } catch (error) {\n    console.error(\"Error fetching badge:\", error);\n    res.status(500).json({ error: \"Failed to fetch badge\" });\n  }\n});\n\n// Create or update a badge (admin only)\ngamificationRouter.post(\"/badges\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated() || req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Admin access required\" });\n    }\n    \n    const validatedData = insertBadgeSchema.parse(req.body);\n    const badge = await storage.saveBadge(validatedData);\n    res.status(201).json(badge);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    console.error(\"Error creating badge:\", error);\n    res.status(500).json({ error: \"Failed to create badge\" });\n  }\n});\n\n// User Badge routes\n// Get user badges\ngamificationRouter.get(\"/user-badges/:userId\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const userId = parseInt(req.params.userId);\n    if (isNaN(userId)) {\n      return res.status(400).json({ error: \"Invalid user ID\" });\n    }\n    \n    // Check if user is requesting their own badges or is an admin\n    if (req.user.id !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot access other user's badges\" });\n    }\n    \n    const userBadges = await storage.getUserBadgesByUser(userId);\n    res.json(userBadges);\n  } catch (error) {\n    console.error(\"Error fetching user badges:\", error);\n    res.status(500).json({ error: \"Failed to fetch user badges\" });\n  }\n});\n\n// Award a badge to a user\ngamificationRouter.post(\"/user-badges\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const validatedData = insertUserBadgeSchema.parse(req.body);\n    \n    // Check if user is awarding themselves a badge or is an admin\n    if (req.user.id !== validatedData.userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot award badges to other users\" });\n    }\n    \n    const userBadge = await storage.saveUserBadge(validatedData);\n    res.status(201).json(userBadge);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    console.error(\"Error awarding badge:\", error);\n    res.status(500).json({ error: \"Failed to award badge\" });\n  }\n});\n\n// Toggle badge display status\ngamificationRouter.patch(\"/user-badges/:id/display\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid ID\" });\n    }\n    \n    const { displayed } = req.body;\n    if (displayed === undefined || typeof displayed !== 'boolean') {\n      return res.status(400).json({ error: \"Missing or invalid 'displayed' parameter\" });\n    }\n    \n    // Get the user badge to check ownership\n    const userBadge = await storage.getUserBadgeById(id);\n    if (!userBadge) {\n      return res.status(404).json({ error: \"User badge not found\" });\n    }\n    \n    // Check if user owns this badge or is an admin\n    if (req.user.id !== userBadge.userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot modify other user's badges\" });\n    }\n    \n    const updatedUserBadge = await storage.toggleBadgeDisplay(id, displayed);\n    res.json(updatedUserBadge);\n  } catch (error) {\n    console.error(\"Error toggling badge display:\", error);\n    res.status(500).json({ error: \"Failed to toggle badge display\" });\n  }\n});\n\n// Game Stats routes\n// Get a user's game stats\ngamificationRouter.get(\"/game-stats/:userId\", async (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    if (isNaN(userId)) {\n      return res.status(400).json({ error: \"Invalid user ID\" });\n    }\n    \n    // Only require authentication for private stats\n    if (req.isAuthenticated()) {\n      // Allow a user to view their own stats or admins to view any user's stats\n      if (req.user.id !== userId && req.user.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized: Cannot access other user's detailed stats\" });\n      }\n      \n      const stats = await storage.getUserGameStats(userId);\n      if (!stats) {\n        return res.status(404).json({ error: \"Game stats not found for user\" });\n      }\n      \n      res.json(stats);\n    } else {\n      // For unauthenticated requests, return limited public stats\n      const stats = await storage.getUserGameStats(userId);\n      if (!stats) {\n        return res.status(404).json({ error: \"Game stats not found for user\" });\n      }\n      \n      // Return only public fields\n      const publicStats = {\n        userId: stats.userId,\n        level: stats.level,\n        totalPoints: stats.totalPoints,\n        completedSteps: stats.completedSteps\n      };\n      \n      res.json(publicStats);\n    }\n  } catch (error) {\n    console.error(\"Error fetching game stats:\", error);\n    res.status(500).json({ error: \"Failed to fetch game stats\" });\n  }\n});\n\n// Update game stats\ngamificationRouter.patch(\"/game-stats/:userId\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const userId = parseInt(req.params.userId);\n    if (isNaN(userId)) {\n      return res.status(400).json({ error: \"Invalid user ID\" });\n    }\n    \n    // Check if user is updating their own stats or is an admin\n    if (req.user.id !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot update other user's stats\" });\n    }\n    \n    const validatedData = insertUserGameStatsSchema.partial().parse(req.body);\n    const stats = await storage.updateUserGameStats(userId, validatedData);\n    res.json(stats);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    console.error(\"Error updating game stats:\", error);\n    res.status(500).json({ error: \"Failed to update game stats\" });\n  }\n});\n\n// Get leaderboard (top users by points)\ngamificationRouter.get(\"/leaderboard\", async (req, res) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n    if (isNaN(limit) || limit < 1 || limit > 100) {\n      return res.status(400).json({ error: \"Invalid limit parameter. Must be between 1 and 100.\" });\n    }\n    \n    const topUsers = await storage.getUsersTopGameStats(limit);\n    res.json(topUsers);\n  } catch (error) {\n    console.error(\"Error fetching leaderboard:\", error);\n    res.status(500).json({ error: \"Failed to fetch leaderboard\" });\n  }\n});","size_bytes":8308},"server/api/onboarding.ts":{"content":"import express from \"express\";\nimport { storage } from \"../storage\";\nimport { insertOnboardingStepSchema, insertUserProgressSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport const onboardingRouter = express.Router();\n\n// Get all onboarding steps\nonboardingRouter.get(\"/steps\", async (req, res) => {\n  try {\n    const steps = await storage.getOnboardingSteps();\n    res.json(steps);\n  } catch (error) {\n    console.error(\"Error fetching onboarding steps:\", error);\n    res.status(500).json({ error: \"Failed to fetch onboarding steps\" });\n  }\n});\n\n// Get onboarding steps by type\nonboardingRouter.get(\"/steps/type/:type\", async (req, res) => {\n  try {\n    const { type } = req.params;\n    const steps = await storage.getOnboardingStepsByType(type);\n    res.json(steps);\n  } catch (error) {\n    console.error(\"Error fetching onboarding steps by type:\", error);\n    res.status(500).json({ error: \"Failed to fetch onboarding steps by type\" });\n  }\n});\n\n// Get a specific onboarding step\nonboardingRouter.get(\"/steps/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid ID\" });\n    }\n    \n    const step = await storage.getOnboardingStepById(id);\n    if (!step) {\n      return res.status(404).json({ error: \"Onboarding step not found\" });\n    }\n    \n    res.json(step);\n  } catch (error) {\n    console.error(\"Error fetching onboarding step:\", error);\n    res.status(500).json({ error: \"Failed to fetch onboarding step\" });\n  }\n});\n\n// Create or update an onboarding step\nonboardingRouter.post(\"/steps\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated() || req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Admin access required\" });\n    }\n    \n    const validatedData = insertOnboardingStepSchema.parse(req.body);\n    const step = await storage.saveOnboardingStep(validatedData);\n    res.status(201).json(step);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    console.error(\"Error creating onboarding step:\", error);\n    res.status(500).json({ error: \"Failed to create onboarding step\" });\n  }\n});\n\n// Get user progress for a specific user\nonboardingRouter.get(\"/progress/user/:userId\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const userId = parseInt(req.params.userId);\n    if (isNaN(userId)) {\n      return res.status(400).json({ error: \"Invalid user ID\" });\n    }\n    \n    // Check if user is requesting their own progress or is an admin\n    if (req.user.id !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot access other user's progress\" });\n    }\n    \n    const progress = await storage.getUserProgressByUser(userId);\n    res.json(progress);\n  } catch (error) {\n    console.error(\"Error fetching user progress:\", error);\n    res.status(500).json({ error: \"Failed to fetch user progress\" });\n  }\n});\n\n// Save or update user progress\nonboardingRouter.post(\"/progress\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const validatedData = insertUserProgressSchema.parse(req.body);\n    \n    // Check if user is updating their own progress or is an admin\n    if (req.user.id !== validatedData.userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot update other user's progress\" });\n    }\n    \n    const progress = await storage.saveUserProgress(validatedData);\n    \n    // Update game stats when progress is updated\n    await storage.updateUserGameStats(validatedData.userId, {});\n    \n    res.status(201).json(progress);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    console.error(\"Error saving user progress:\", error);\n    res.status(500).json({ error: \"Failed to save user progress\" });\n  }\n});\n\n// Get specific progress entry\nonboardingRouter.get(\"/progress/:userId/:stepId\", async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const userId = parseInt(req.params.userId);\n    const stepId = parseInt(req.params.stepId);\n    \n    if (isNaN(userId) || isNaN(stepId)) {\n      return res.status(400).json({ error: \"Invalid IDs\" });\n    }\n    \n    // Check if user is requesting their own progress or is an admin\n    if (req.user.id !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ error: \"Unauthorized: Cannot access other user's progress\" });\n    }\n    \n    const progress = await storage.getUserStepProgress(userId, stepId);\n    if (!progress) {\n      return res.status(404).json({ error: \"Progress entry not found\" });\n    }\n    \n    res.json(progress);\n  } catch (error) {\n    console.error(\"Error fetching specific progress entry:\", error);\n    res.status(500).json({ error: \"Failed to fetch progress entry\" });\n  }\n});","size_bytes":5194},"server/api/policy-management.ts":{"content":"import { storage } from \"../storage\";\nimport { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { insertPolicyCategorySchema, insertPolicyTemplateSchema, insertGeneratedPolicySchema } from \"@shared/schema\";\nimport { logoUpload, saveFileToDatabase, getFileById, deleteFile } from \"../file-service\";\nimport { db } from \"../db\";\nimport { log } from \"../vite\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport multer from \"multer\";\n\nconst router = Router();\n\n// Middleware to check if user is authenticated\nconst isAuthenticated = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ error: \"Unauthorized\" });\n};\n\n// Policy Categories endpoints\nrouter.get(\"/categories\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const categories = await storage.getPolicyCategories();\n    res.json(categories);\n  } catch (error) {\n    log(`Error getting policy categories: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get policy categories\" });\n  }\n});\n\nrouter.post(\"/categories\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const categoryData = insertPolicyCategorySchema.parse(req.body);\n    const category = await storage.savePolicyCategory(categoryData);\n    res.status(201).json(category);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    log(`Error creating policy category: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to create policy category\" });\n  }\n});\n\nrouter.get(\"/categories/:id\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid category ID\" });\n    }\n    \n    const category = await storage.getPolicyCategoryById(id);\n    if (!category) {\n      return res.status(404).json({ error: \"Category not found\" });\n    }\n    \n    res.json(category);\n  } catch (error) {\n    log(`Error getting policy category: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get policy category\" });\n  }\n});\n\n// Policy Templates endpoints\nrouter.get(\"/templates\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const templates = await storage.getPolicyTemplates();\n    res.json(templates);\n  } catch (error) {\n    log(`Error getting policy templates: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get policy templates\" });\n  }\n});\n\nrouter.get(\"/templates/by-category/:categoryId\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const categoryId = parseInt(req.params.categoryId);\n    if (isNaN(categoryId)) {\n      return res.status(400).json({ error: \"Invalid category ID\" });\n    }\n    \n    const templates = await storage.getPolicyTemplatesByCategory(categoryId);\n    res.json(templates);\n  } catch (error) {\n    log(`Error getting policy templates by category: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get policy templates by category\" });\n  }\n});\n\n// Upload policy template\nconst templateUpload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadDir = path.join(process.cwd(), \"uploads\", \"templates\");\n      if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir, { recursive: true });\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, `template-${uniqueSuffix}${path.extname(file.originalname)}`);\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    // Allow only Word and PDF files\n    if (file.mimetype === 'application/msword' || \n        file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||\n        file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only .doc, .docx and .pdf files are allowed'));\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB size limit\n  }\n});\n\nrouter.post(\"/templates/upload\", isAuthenticated, templateUpload.single(\"file\"), async (req: Request, res: Response) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ error: \"No file provided\" });\n    }\n    \n    const templateData = JSON.parse(req.body.data || \"{}\");\n    \n    // Store file info in database\n    const savedFile = await saveFileToDatabase(req.file, \"template\", req.user?.id || 0);\n    \n    // Extract placeholders - in a real implementation this would parse the document\n    // For demo purposes, use some default placeholders\n    const placeholders = [\n      \"[COMPANY_NAME]\",\n      \"[COMPANY_LOGO]\",\n      \"[CEO_NAME]\",\n      \"[CIO_NAME]\",\n      \"[EFFECTIVE_DATE]\"\n    ];\n    \n    // Create the template record\n    const template = await storage.savePolicyTemplate({\n      templateName: templateData.templateName || req.file.originalname,\n      templateType: req.file.mimetype.includes('pdf') ? 'pdf' : 'word',\n      fileId: savedFile,\n      categoryId: parseInt(templateData.categoryId),\n      uploadedBy: req.user?.id || 0,\n      version: templateData.version || \"1.0\",\n      placeholders,\n      isActive: true\n    });\n    \n    res.status(201).json(template);\n  } catch (error) {\n    if (req.file && fs.existsSync(req.file.path)) {\n      fs.unlinkSync(req.file.path); // Delete the file if there was an error\n    }\n    \n    log(`Error uploading policy template: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to upload policy template\" });\n  }\n});\n\nrouter.get(\"/templates/:id\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid template ID\" });\n    }\n    \n    const template = await storage.getPolicyTemplateById(id);\n    if (!template) {\n      return res.status(404).json({ error: \"Template not found\" });\n    }\n    \n    // Get the file info\n    const file = await getFileById(template.fileId);\n    if (!file) {\n      return res.status(404).json({ error: \"Template file not found\" });\n    }\n    \n    res.json({ template, file });\n  } catch (error) {\n    log(`Error getting policy template: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get policy template\" });\n  }\n});\n\nrouter.patch(\"/templates/:id/status\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid template ID\" });\n    }\n    \n    const { isActive } = req.body;\n    if (typeof isActive !== 'boolean') {\n      return res.status(400).json({ error: \"isActive must be a boolean\" });\n    }\n    \n    const updatedTemplate = await storage.updatePolicyTemplateStatus(id, isActive);\n    res.json(updatedTemplate);\n  } catch (error) {\n    log(`Error updating policy template status: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to update policy template status\" });\n  }\n});\n\n// Generated Policies endpoints\nrouter.get(\"/generated/:companyId\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const companyId = parseInt(req.params.companyId);\n    if (isNaN(companyId)) {\n      return res.status(400).json({ error: \"Invalid company ID\" });\n    }\n    \n    const policies = await storage.getGeneratedPolicies(companyId);\n    res.json(policies);\n  } catch (error) {\n    log(`Error getting generated policies: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get generated policies\" });\n  }\n});\n\nrouter.post(\"/generated\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    // In a real implementation, this would handle the actual document processing\n    // For demo purposes, we'll just save the policy data\n    const policyData = insertGeneratedPolicySchema.parse(req.body);\n    \n    // For demo purposes, assume we've generated a file and saved it\n    // In a real implementation, this would process the template, replace placeholders, and generate a new document\n    const fileData = {\n      filename: `generated-policy-${Date.now()}.docx`,\n      originalName: `Generated Policy ${policyData.templateId}`,\n      path: path.join(process.cwd(), \"uploads\", \"generated\", `generated-policy-${Date.now()}.docx`),\n      size: 1024,\n      mimetype: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      uploadedBy: req.user?.id || 0\n    };\n    \n    // Ensure directory exists\n    const dir = path.join(process.cwd(), \"uploads\", \"generated\");\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n    \n    // Create an empty file for demo purposes\n    fs.writeFileSync(fileData.path, \"\");\n    \n    // Create a multer-like file object for the saveFileToDatabase function\n    const mockFile = {\n      filename: fileData.filename,\n      originalname: `Generated Policy ${policyData.templateId}.docx`,\n      path: fileData.path,\n      size: fileData.size,\n      mimetype: fileData.mimetype\n    } as Express.Multer.File;\n    \n    const savedFile = await saveFileToDatabase(mockFile, \"generated-policy\", req.user?.id || 0);\n    \n    // Create the generated policy with the file ID\n    const generatedPolicy = await storage.saveGeneratedPolicy({\n      ...policyData,\n      generatedFileId: savedFile\n    });\n    \n    res.status(201).json(generatedPolicy);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: error.errors });\n    }\n    log(`Error generating policy: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to generate policy\" });\n  }\n});\n\nrouter.get(\"/generated/policy/:id\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid policy ID\" });\n    }\n    \n    const policy = await storage.getGeneratedPolicyById(id);\n    if (!policy) {\n      return res.status(404).json({ error: \"Policy not found\" });\n    }\n    \n    // Get the generated file\n    const file = await getFileById(policy.generatedFileId);\n    if (!file) {\n      return res.status(404).json({ error: \"Policy file not found\" });\n    }\n    \n    // Get the template\n    const template = await storage.getPolicyTemplateById(policy.templateId);\n    \n    res.json({ policy, file, template });\n  } catch (error) {\n    log(`Error getting generated policy: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to get generated policy\" });\n  }\n});\n\nrouter.patch(\"/generated/:id/approval\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid policy ID\" });\n    }\n    \n    const { status } = req.body;\n    if (!status || !['pending', 'approved', 'rejected'].includes(status)) {\n      return res.status(400).json({ error: \"Invalid status\" });\n    }\n    \n    const updatedPolicy = await storage.updateGeneratedPolicyApprovalStatus(\n      id, \n      status, \n      status === 'approved' ? req.user?.id : undefined\n    );\n    \n    res.json(updatedPolicy);\n  } catch (error) {\n    log(`Error updating policy approval status: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to update policy approval status\" });\n  }\n});\n\n// Download policy file\nrouter.get(\"/download/:fileId\", isAuthenticated, async (req: Request, res: Response) => {\n  try {\n    const fileId = parseInt(req.params.fileId);\n    if (isNaN(fileId)) {\n      return res.status(400).json({ error: \"Invalid file ID\" });\n    }\n    \n    const file = await getFileById(fileId);\n    if (!file) {\n      return res.status(404).json({ error: \"File not found\" });\n    }\n    \n    if (!fs.existsSync(file.path)) {\n      return res.status(404).json({ error: \"File not found on disk\" });\n    }\n    \n    res.download(file.path, file.originalName);\n  } catch (error) {\n    log(`Error downloading file: ${error}`, \"policy-api\");\n    res.status(500).json({ error: \"Failed to download file\" });\n  }\n});\n\nexport default router;","size_bytes":12271},"server/api/progress.ts":{"content":"import { Router } from 'express';\nimport { storage } from '../storage';\nimport { userProgress } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = Router();\n\n// Get complete timeline with onboarding steps and user progress\nrouter.get('/api/progress/timeline', async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const userId = req.user!.id;\n    \n    // Get all onboarding steps\n    const onboardingSteps = await storage.getOnboardingSteps();\n    \n    // Get user progress for these steps\n    const userProgressEntries = await storage.getUserProgressByUser(userId);\n    \n    // Combine steps with progress\n    const timelineData = onboardingSteps.map(step => {\n      const progressEntry = userProgressEntries.find((p: any) => p.stepId === step.id);\n      \n      let status: 'not_started' | 'in_progress' | 'completed' = 'not_started';\n      if (progressEntry) {\n        status = progressEntry.completed ? 'completed' : 'in_progress';\n      }\n      \n      return {\n        ...step,\n        status,\n        startedAt: progressEntry?.startedAt || null,\n        completedAt: progressEntry?.completedAt || null,\n      };\n    });\n    \n    // Sort by step order\n    timelineData.sort((a, b) => a.order - b.order);\n    \n    res.json(timelineData);\n  } catch (error) {\n    console.error('Error fetching timeline data:', error);\n    res.status(500).json({ error: 'Failed to fetch timeline data' });\n  }\n});\n\n// Record user progress for a specific step\nrouter.post('/api/progress/:stepId', async (req, res) => {\n  try {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const userId = req.user!.id;\n    const stepId = parseInt(req.params.stepId);\n    const { completed, score, answers } = req.body;\n    \n    // Check if the step exists\n    const step = await storage.getOnboardingStepById(stepId);\n    if (!step) {\n      return res.status(404).json({ error: 'Step not found' });\n    }\n    \n    // Check if progress entry already exists\n    const existingProgress = await storage.getUserStepProgress(userId, stepId);\n    \n    let progress;\n    \n    if (existingProgress) {\n      // Update existing progress\n      progress = await storage.updateUserProgress(existingProgress.id, {\n        userId,\n        stepId,\n        completed: completed !== undefined ? completed : existingProgress.completed,\n        score: score !== undefined ? score : existingProgress.score,\n        answers: answers !== undefined ? answers : existingProgress.answers,\n        completedAt: completed ? new Date().toISOString() : existingProgress.completedAt,\n        attempts: existingProgress.attempts + 1,\n      });\n    } else {\n      // Create new progress entry\n      progress = await storage.saveUserProgress({\n        userId,\n        stepId,\n        completed: !!completed,\n        score,\n        answers,\n        startedAt: new Date().toISOString(),\n        completedAt: completed ? new Date().toISOString() : null,\n        attempts: 1,\n      });\n    }\n    \n    // If step was completed, could check for badge unlocks here\n    // We'll implement badge awarding in a future update\n    \n    res.status(200).json(progress);\n  } catch (error) {\n    console.error('Error updating progress:', error);\n    res.status(500).json({ error: 'Failed to update progress' });\n  }\n});\n\nexport default router;","size_bytes":3424},"server/api/reports.ts":{"content":"import { Request, Response, Express } from \"express\";\nimport { storage } from \"../storage\";\nimport { z } from \"zod\";\nimport { randomBytes, createHash } from \"crypto\";\nimport { insertComplianceReportSchema, insertReportShareLinkSchema } from \"@shared/schema\";\n\nexport function registerReportsRoutes(app: Express) {\n  // Generate a compliance report\n  app.post(\"/api/reports\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      // Validate request body\n      const schema = insertComplianceReportSchema.extend({\n        assessmentId: z.number(),\n        title: z.string().min(1, \"Title is required\"),\n        summary: z.string().optional(),\n        isPublic: z.boolean().default(false),\n        format: z.enum([\"pdf\", \"html\", \"json\"]).default(\"pdf\"),\n      });\n\n      const validatedData = schema.parse(req.body);\n\n      // Get assessment data\n      const assessment = await storage.getAssessmentById(validatedData.assessmentId);\n      if (!assessment) {\n        return res.status(404).send(\"Assessment not found\");\n      }\n\n      // Get assessment results\n      const results = await storage.getAssessmentResultsByAssessmentId(validatedData.assessmentId);\n      \n      // Get framework and domain information\n      const framework = await storage.getFrameworkById(assessment.frameworkId);\n      const domains = await storage.getDomainsByFrameworkId(assessment.frameworkId);\n      \n      // Aggregate report data\n      const domainsWithControls = await Promise.all(\n        domains.map(async (domain) => {\n          const controls = await storage.getControlsByDomainId(domain.id);\n          return {\n            ...domain,\n            controls,\n          };\n        })\n      );\n\n      // Calculate statistics for the report\n      const implementedControls = results.filter(r => r.status === \"implemented\").length;\n      const partiallyImplementedControls = results.filter(r => r.status === \"partially_implemented\").length;\n      const notImplementedControls = results.filter(r => r.status === \"not_implemented\").length;\n      const notApplicableControls = results.filter(r => r.status === \"not_applicable\").length;\n      const totalControls = results.length;\n      \n      // Calculate overall compliance score\n      const complianceScore = \n        totalControls > 0 \n          ? ((implementedControls + (partiallyImplementedControls * 0.5)) / \n            (totalControls - notApplicableControls)) * 100\n          : 0;\n      \n      // Determine risk level based on compliance score\n      let riskLevel = \"High\";\n      if (complianceScore >= 80) {\n        riskLevel = \"Low\";\n      } else if (complianceScore >= 50) {\n        riskLevel = \"Medium\";\n      }\n\n      // Generate domain risk levels\n      const domainRiskLevels = await Promise.all(\n        domains.map(async (domain) => {\n          const controls = await storage.getControlsByDomainId(domain.id);\n          const domainResults = results.filter(r => \n            controls.some(c => c.id === r.controlId)\n          );\n          \n          const domainImplementedControls = domainResults.filter(r => r.status === \"implemented\").length;\n          const domainPartiallyImplementedControls = domainResults.filter(r => r.status === \"partially_implemented\").length;\n          const domainNotImplementedControls = domainResults.filter(r => r.status === \"not_implemented\").length;\n          const domainNotApplicableControls = domainResults.filter(r => r.status === \"not_applicable\").length;\n          const domainTotalControls = domainResults.length;\n          \n          // Calculate domain compliance score\n          const domainComplianceScore = \n            domainTotalControls > 0 \n              ? ((domainImplementedControls + (domainPartiallyImplementedControls * 0.5)) / \n                (domainTotalControls - domainNotApplicableControls)) * 100\n              : 0;\n          \n          // Determine domain risk level\n          let domainRiskLevel = \"high\";\n          if (domainComplianceScore >= 80) {\n            domainRiskLevel = \"low\";\n          } else if (domainComplianceScore >= 50) {\n            domainRiskLevel = \"medium\";\n          }\n          \n          return {\n            domainId: domain.id,\n            domainName: domain.name,\n            displayName: domain.displayName,\n            complianceScore: domainComplianceScore,\n            implementedControls: domainImplementedControls,\n            partiallyImplementedControls: domainPartiallyImplementedControls,\n            notImplementedControls: domainNotImplementedControls,\n            notApplicableControls: domainNotApplicableControls,\n            totalControls: domainTotalControls,\n            riskLevel: domainRiskLevel,\n          };\n        })\n      );\n\n      // Generate detailed results with additional context\n      const detailedResults = await Promise.all(\n        results.map(async (result) => {\n          const control = await storage.getControlById(result.controlId);\n          const domain = control ? await storage.getDomainById(control.domainId) : null;\n          \n          return {\n            resultId: result.id,\n            controlId: result.controlId,\n            controlIdentifier: control?.controlId || \"\",\n            controlName: control?.name || \"\",\n            domainId: domain?.id || 0,\n            domainName: domain?.name || \"\",\n            status: result.status,\n            evidence: result.evidence,\n            comments: result.comments,\n          };\n        })\n      );\n\n      // Generate recommendations for controls that are not fully implemented\n      const recommendations = await Promise.all(\n        results\n          .filter(r => r.status === \"not_implemented\" || r.status === \"partially_implemented\")\n          .map(async (result) => {\n            const control = await storage.getControlById(result.controlId);\n            const domain = control ? await storage.getDomainById(control.domainId) : null;\n            \n            // Determine priority based on control maturity level\n            let priority = \"medium\";\n            if (control?.maturityLevel && control.maturityLevel >= 3) {\n              priority = \"high\";\n            } else if (control?.maturityLevel && control.maturityLevel === 1) {\n              priority = \"low\";\n            }\n            \n            return {\n              controlId: result.controlId,\n              controlIdentifier: control?.controlId || \"\",\n              controlName: control?.name || \"\",\n              domainId: domain?.id || 0,\n              domainName: domain?.name || \"\",\n              status: result.status,\n              priority,\n              recommendation: result.status === \"not_implemented\"\n                ? `Implement ${control?.name} to address ${control?.description}`\n                : `Complete the implementation of ${control?.name} to fully address ${control?.description}`,\n            };\n          })\n      );\n\n      // Create the report data structure\n      const reportData = {\n        framework: {\n          id: framework?.id,\n          name: framework?.name,\n          displayName: framework?.displayName,\n          version: framework?.version,\n        },\n        summary: {\n          complianceScore,\n          riskLevel,\n          implementedControls,\n          partiallyImplementedControls,\n          notImplementedControls,\n          notApplicableControls,\n          totalControls,\n        },\n        domainRiskLevels,\n        detailedResults,\n        recommendations,\n      };\n\n      // Create report in database\n      const report = await storage.createComplianceReport({\n        assessmentId: validatedData.assessmentId,\n        companyId: assessment.companyId,\n        createdBy: (req.user as any).id,\n        title: validatedData.title,\n        summary: validatedData.summary || \"\",\n        format: validatedData.format,\n        isPublic: validatedData.isPublic,\n        status: \"completed\",\n        reportData: reportData as any,\n      });\n\n      // Update assessment status if needed\n      if (assessment.status !== \"completed\") {\n        await storage.updateAssessmentStatus(assessment.id, \"completed\", complianceScore);\n      }\n\n      res.status(201).json(report);\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      res.status(500).send(`Error generating report: ${(error as Error).message}`);\n    }\n  });\n\n  // Get a specific report by ID\n  app.get(\"/api/reports/:id\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      const reportId = parseInt(req.params.id);\n      if (isNaN(reportId)) {\n        return res.status(400).send(\"Invalid report ID\");\n      }\n\n      const report = await storage.getComplianceReportById(reportId);\n      if (!report) {\n        return res.status(404).send(\"Report not found\");\n      }\n\n      // Check if user has access to this report\n      const user = req.user as any;\n      if (report.companyId !== user.companyId && !user.isAdmin) {\n        return res.status(403).send(\"Access denied\");\n      }\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error retrieving report:\", error);\n      res.status(500).send(`Error retrieving report: ${(error as Error).message}`);\n    }\n  });\n\n  // Get all reports for a company\n  app.get(\"/api/reports/company/:companyId\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      const companyId = parseInt(req.params.companyId);\n      if (isNaN(companyId)) {\n        return res.status(400).send(\"Invalid company ID\");\n      }\n\n      // Check if user has access to this company's reports\n      const user = req.user as any;\n      if (companyId !== user.companyId && !user.isAdmin) {\n        return res.status(403).send(\"Access denied\");\n      }\n\n      const reports = await storage.getComplianceReportsByCompanyId(companyId);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error retrieving reports:\", error);\n      res.status(500).send(`Error retrieving reports: ${(error as Error).message}`);\n    }\n  });\n\n  // Get all reports for an assessment\n  app.get(\"/api/reports/assessment/:assessmentId\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      const assessmentId = parseInt(req.params.assessmentId);\n      if (isNaN(assessmentId)) {\n        return res.status(400).send(\"Invalid assessment ID\");\n      }\n\n      // Check if user has access to this assessment's reports\n      const assessment = await storage.getAssessmentById(assessmentId);\n      if (!assessment) {\n        return res.status(404).send(\"Assessment not found\");\n      }\n\n      const user = req.user as any;\n      if (assessment.companyId !== user.companyId && !user.isAdmin) {\n        return res.status(403).send(\"Access denied\");\n      }\n\n      const reports = await storage.getComplianceReportsByAssessmentId(assessmentId);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error retrieving reports:\", error);\n      res.status(500).send(`Error retrieving reports: ${(error as Error).message}`);\n    }\n  });\n\n  // Create a share link for a report\n  app.post(\"/api/reports/:id/share\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      const reportId = parseInt(req.params.id);\n      if (isNaN(reportId)) {\n        return res.status(400).send(\"Invalid report ID\");\n      }\n\n      // Check if the report exists\n      const report = await storage.getComplianceReportById(reportId);\n      if (!report) {\n        return res.status(404).send(\"Report not found\");\n      }\n\n      // Check if user has access to this report\n      const user = req.user as any;\n      if (report.companyId !== user.companyId && !user.isAdmin) {\n        return res.status(403).send(\"Access denied\");\n      }\n\n      // Generate a unique share token\n      const shareToken = randomBytes(16).toString('hex');\n      \n      // Process password if provided\n      let password = req.body.password;\n      if (password) {\n        // Hash the password before storing\n        password = createHash('sha256').update(password).digest('hex');\n      }\n\n      // Create share link in database\n      const shareLink = await storage.createReportShareLink({\n        reportId: reportId,\n        createdBy: (req.user as any).id,\n        password: password || null,\n        expiresAt: req.body.expiresAt || null,\n        maxViews: req.body.maxViews || null,\n        isActive: true,\n      });\n\n      res.status(201).json(shareLink);\n    } catch (error) {\n      console.error(\"Error creating share link:\", error);\n      res.status(500).send(`Error creating share link: ${(error as Error).message}`);\n    }\n  });\n\n  // Access a shared report using a token\n  app.get(\"/api/reports/share/:token\", async (req: Request, res: Response) => {\n    try {\n      const token = req.params.token;\n      \n      // Check if the share link exists\n      const shareLink = await storage.getReportShareLinkByToken(token);\n      if (!shareLink) {\n        return res.status(404).send(\"Shared report link not found or expired\");\n      }\n\n      // Check if the share link is active\n      if (!shareLink.isActive) {\n        return res.status(403).send(\"This share link has been deactivated\");\n      }\n\n      // Check if the share link has expired\n      if (shareLink.expiresAt && new Date(shareLink.expiresAt) < new Date()) {\n        return res.status(403).send(\"This share link has expired\");\n      }\n\n      // Check if the share link has reached maximum views\n      if (shareLink.maxViews && shareLink.viewCount >= shareLink.maxViews) {\n        return res.status(403).send(\"This share link has reached its maximum view count\");\n      }\n\n      // Check if password is required\n      if (shareLink.password) {\n        const providedPassword = req.query.password as string;\n        \n        if (!providedPassword) {\n          return res.status(401).send(\"password_required\");\n        }\n        \n        // Hash the provided password and compare with stored hash\n        const hashedPassword = createHash('sha256').update(providedPassword).digest('hex');\n        if (hashedPassword !== shareLink.password) {\n          return res.status(401).send(\"Invalid password\");\n        }\n      }\n\n      // Get the report\n      const report = await storage.getComplianceReportById(shareLink.reportId);\n      if (!report) {\n        return res.status(404).send(\"Report not found\");\n      }\n\n      // Increment view count\n      await storage.incrementShareLinkViewCount(shareLink.id);\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error accessing shared report:\", error);\n      res.status(500).send(`Error accessing shared report: ${(error as Error).message}`);\n    }\n  });\n\n  // Deactivate a share link\n  app.post(\"/api/reports/share/:id/deactivate\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      const linkId = parseInt(req.params.id);\n      if (isNaN(linkId)) {\n        return res.status(400).send(\"Invalid share link ID\");\n      }\n\n      // Deactivate the share link\n      const shareLink = await storage.deactivateShareLink(linkId);\n      res.json(shareLink);\n    } catch (error) {\n      console.error(\"Error deactivating share link:\", error);\n      res.status(500).send(`Error deactivating share link: ${(error as Error).message}`);\n    }\n  });\n\n  // Get all share links for a report\n  app.get(\"/api/reports/:id/share\", async (req: Request, res: Response) => {\n    try {\n      // Ensure user is authenticated\n      if (!req.isAuthenticated()) {\n        return res.status(401).send(\"Unauthorized\");\n      }\n\n      const reportId = parseInt(req.params.id);\n      if (isNaN(reportId)) {\n        return res.status(400).send(\"Invalid report ID\");\n      }\n\n      // Check if the report exists\n      const report = await storage.getComplianceReportById(reportId);\n      if (!report) {\n        return res.status(404).send(\"Report not found\");\n      }\n\n      // Check if user has access to this report\n      const user = req.user as any;\n      if (report.companyId !== user.companyId && !user.isAdmin) {\n        return res.status(403).send(\"Access denied\");\n      }\n\n      // Get the share links\n      const shareLinks = await storage.getReportShareLinksByReportId(reportId);\n      res.json(shareLinks);\n    } catch (error) {\n      console.error(\"Error retrieving share links:\", error);\n      res.status(500).send(`Error retrieving share links: ${(error as Error).message}`);\n    }\n  });\n}","size_bytes":17047},"server/api/risk-prediction.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { \n  predictComplianceRisks, \n  generateRemediationPlan, \n  analyzeControlGaps \n} from \"../utils/openai\";\n\nconst router = Router();\n\n/**\n * Generate a risk prediction for a specific assessment\n */\nrouter.get(\"/api/risk-prediction/assessment/:assessmentId\", async (req, res, next) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const { assessmentId } = req.params;\n    const assessmentIdNum = parseInt(assessmentId);\n    \n    // Get the assessment\n    const assessment = await storage.getAssessmentById(assessmentIdNum);\n    if (!assessment) {\n      return res.status(404).json({ error: \"Assessment not found\" });\n    }\n    \n    // Get assessment results\n    const assessmentResults = await storage.getAssessmentResultsByAssessmentId(assessmentIdNum);\n    \n    // Get company info for additional context\n    const companyInfo = await storage.getCompanyInfo();\n    \n    // Generate risk prediction\n    const riskAnalysis = await predictComplianceRisks(\n      { assessment, results: assessmentResults },\n      companyInfo\n    );\n    \n    // Return the risk analysis\n    res.json(riskAnalysis);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Generate a remediation plan for identified risks in an assessment\n */\nrouter.get(\"/api/risk-prediction/remediation/:assessmentId\", async (req, res, next) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const { assessmentId } = req.params;\n    const assessmentIdNum = parseInt(assessmentId);\n    \n    // Get the assessment\n    const assessment = await storage.getAssessmentById(assessmentIdNum);\n    if (!assessment) {\n      return res.status(404).json({ error: \"Assessment not found\" });\n    }\n    \n    // Get assessment results\n    const assessmentResults = await storage.getAssessmentResultsByAssessmentId(assessmentIdNum);\n    \n    // Get relevant controls for the assessment\n    const frameworkControls = [];\n    if (assessment.frameworkId) {\n      const framework = await storage.getFrameworkById(assessment.frameworkId);\n      if (framework) {\n        const domains = await storage.getDomainsByFrameworkId(framework.id);\n        for (const domain of domains) {\n          const subdomains = await storage.getSubdomainsByDomainId(domain.id);\n          for (const subdomain of subdomains) {\n            const controls = await storage.getControlsBySubdomainId(subdomain.id);\n            frameworkControls.push(...controls.map(control => ({\n              ...control,\n              domain: domain.name,\n              subdomain: subdomain.name\n            })));\n          }\n        }\n      }\n    }\n    \n    // Get company info for additional context\n    const companyInfo = await storage.getCompanyInfo();\n    \n    // First, get a risk analysis\n    const riskAnalysis = await predictComplianceRisks(\n      { assessment, results: assessmentResults, controls: frameworkControls },\n      companyInfo\n    );\n    \n    // Then generate a remediation plan based on the identified risks\n    const remediationPlan = await generateRemediationPlan(\n      riskAnalysis.domain_risks || [],\n      { company: companyInfo, assessment }\n    );\n    \n    // Return the remediation plan\n    res.json(remediationPlan);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Analyze implementation gaps for a specific control\n */\nrouter.get(\"/api/risk-prediction/control-gaps/:controlId\", async (req, res, next) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const { controlId } = req.params;\n    const controlIdNum = parseInt(controlId);\n    \n    // Get the control\n    const control = await storage.getControlById(controlIdNum);\n    if (!control) {\n      return res.status(404).json({ error: \"Control not found\" });\n    }\n    \n    // Get the subdomain\n    const subdomain = await storage.getSubdomainById(control.subdomainId);\n    \n    // Get the domain\n    const domain = subdomain ? await storage.getDomainById(subdomain.domainId) : null;\n    \n    // Get all assessment results for this control\n    const allAssessments = await storage.getAssessmentsByCompanyId(1); // Using company ID 1 as a placeholder\n    \n    let implementationDetails: {\n      currentStatus: string;\n      implementationHistory: Array<{\n        date: string;\n        status: string;\n        comments: string | null;\n        evidence: string | null;\n      }>;\n      evidenceSubmitted: string[];\n    } = {\n      currentStatus: \"Unknown\",\n      implementationHistory: [],\n      evidenceSubmitted: [],\n    };\n    \n    for (const assessment of allAssessments) {\n      const results = await storage.getAssessmentResultsByAssessmentId(assessment.id);\n      const controlResult = results.find(result => result.controlId === controlIdNum);\n      \n      if (controlResult) {\n        implementationDetails.implementationHistory.push({\n          date: assessment.startDate,\n          status: controlResult.status,\n          comments: controlResult.comments,\n          evidence: controlResult.evidence\n        });\n        \n        if (controlResult.evidence) {\n          implementationDetails.evidenceSubmitted.push(controlResult.evidence);\n        }\n        \n        // Use the most recent status\n        implementationDetails.currentStatus = controlResult.status;\n      }\n    }\n    \n    // Get remediation tasks for this control\n    const allTasksForAssessments = [];\n    for (const assessment of allAssessments) {\n      const tasks = await storage.getRemediationTasksByAssessmentId(assessment.id);\n      const controlTasks = tasks.filter(task => task.controlId === controlIdNum);\n      allTasksForAssessments.push(...controlTasks);\n    }\n    \n    // Analyze gaps\n    const gapAnalysis = await analyzeControlGaps(\n      { \n        control, \n        domain: domain?.name,\n        subdomain: subdomain?.name \n      },\n      { \n        implementationDetails,\n        remediationTasks: allTasksForAssessments \n      }\n    );\n    \n    // Return the gap analysis\n    res.json(gapAnalysis);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Get overall compliance risk dashboard\n */\nrouter.get(\"/api/risk-prediction/dashboard\", async (req, res, next) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Get company info\n    const companyInfo = await storage.getCompanyInfo();\n    \n    // Get all completed assessments\n    const allAssessments = await storage.getAssessmentsByCompanyId(companyInfo?.id || 1);\n    const completedAssessments = allAssessments.filter(assessment => assessment.status === 'completed');\n    \n    if (completedAssessments.length === 0) {\n      return res.json({\n        risk_score: 0,\n        compliance_level: \"Unknown\",\n        message: \"No completed assessments found. Complete an assessment to generate risk prediction.\"\n      });\n    }\n    \n    // Get the most recent assessment\n    const sortedAssessments = completedAssessments.sort(\n      (a, b) => new Date(b.completionDate || \"\").getTime() - new Date(a.completionDate || \"\").getTime()\n    );\n    const latestAssessment = sortedAssessments[0];\n    \n    // Get assessment results\n    const assessmentResults = await storage.getAssessmentResultsByAssessmentId(latestAssessment.id);\n    \n    // Generate risk prediction for the latest assessment\n    const riskAnalysis = await predictComplianceRisks(\n      { assessment: latestAssessment, results: assessmentResults },\n      companyInfo\n    );\n    \n    // Calculate aggregate risk metrics\n    const riskScore = riskAnalysis.overall_risk_score || 0;\n    let complianceLevel = \"Unknown\";\n    \n    if (riskScore >= 0 && riskScore <= 3) {\n      complianceLevel = \"High\";\n    } else if (riskScore > 3 && riskScore <= 6) {\n      complianceLevel = \"Medium\";\n    } else {\n      complianceLevel = \"Low\";\n    }\n    \n    // Build dashboard data\n    const dashboardData = {\n      risk_score: riskScore,\n      compliance_level: complianceLevel,\n      last_assessment_date: latestAssessment.completionDate,\n      assessment_name: latestAssessment.name,\n      framework: latestAssessment.frameworkId,\n      high_risk_domains: riskAnalysis.domain_risks\n        ? riskAnalysis.domain_risks\n            .filter((domain: any) => domain.risk_level === \"High\")\n            .map((domain: any) => domain.domain)\n        : [],\n      critical_recommendations: riskAnalysis.recommendations\n        ? riskAnalysis.recommendations.slice(0, 3)\n        : [],\n      risk_summary: riskAnalysis.risk_summary,\n      domain_risk_distribution: calculateDomainRiskDistribution(riskAnalysis.domain_risks),\n      historical_data: calculateHistoricalRiskTrend(sortedAssessments)\n    };\n    \n    res.json(dashboardData);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Calculates the distribution of risk levels across domains\n */\nfunction calculateDomainRiskDistribution(domainRisks: any[] = []) {\n  const distribution = {\n    high: 0,\n    medium: 0,\n    low: 0\n  };\n  \n  if (!domainRisks || !domainRisks.length) {\n    return distribution;\n  }\n  \n  domainRisks.forEach((domain: any) => {\n    if (domain.risk_level === \"High\") {\n      distribution.high += 1;\n    } else if (domain.risk_level === \"Medium\") {\n      distribution.medium += 1;\n    } else {\n      distribution.low += 1; \n    }\n  });\n  \n  return distribution;\n}\n\n/**\n * Calculates historical risk trend based on completed assessments\n */\nfunction calculateHistoricalRiskTrend(assessments: any[] = []) {\n  return assessments.map(assessment => ({\n    date: assessment.completionDate,\n    score: assessment.score || 0,\n    status: assessment.status\n  }));\n}\n\nexport default router;","size_bytes":9618},"server/api/risks.ts":{"content":"import express, { Request, Response } from 'express';\nimport { storage } from '../storage';\nimport { insertRiskSchema } from '@shared/schema';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Get all risks\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const companyId = req.query.companyId ? parseInt(req.query.companyId as string) : undefined;\n    const risks = await storage.getRisks(companyId);\n    \n    res.json(risks);\n  } catch (error: any) {\n    console.error('Error getting risks:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Get risk by ID\nrouter.get('/:id', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const id = parseInt(req.params.id);\n    const risk = await storage.getRiskById(id);\n    \n    if (!risk) {\n      return res.status(404).json({ message: 'Risk not found' });\n    }\n    \n    res.json(risk);\n  } catch (error: any) {\n    console.error('Error getting risk by ID:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Create or update risk\nrouter.post('/', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Validate request body\n    const validatedData = insertRiskSchema.parse(req.body);\n    \n    // Save the risk\n    const risk = await storage.saveRisk(validatedData);\n    \n    res.status(201).json(risk);\n  } catch (error: any) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({ message: 'Validation error', errors: error.errors });\n    } else {\n      console.error('Error creating/updating risk:', error);\n      res.status(500).json({ message: error.message });\n    }\n  }\n});\n\n// Delete risk\nrouter.delete('/:id', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const id = parseInt(req.params.id);\n    await storage.deleteRisk(id);\n    \n    res.sendStatus(204);\n  } catch (error: any) {\n    console.error('Error deleting risk:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Bulk import risks\nrouter.post('/import', async (req: Request, res: Response) => {\n  try {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const risks = req.body.risks;\n    \n    if (!Array.isArray(risks)) {\n      return res.status(400).json({ message: 'Invalid data format. Expected an array of risks.' });\n    }\n    \n    const results = [];\n    const companyId = req.body.companyId;\n    \n    for (const risk of risks) {\n      // Basic validation for required fields\n      if (!risk.title || !risk.description || !risk.category || !risk.likelihood || !risk.impact || !risk.inherentRiskLevel) {\n        results.push({\n          success: false,\n          risk: risk,\n          error: 'Missing required fields'\n        });\n        continue;\n      }\n      \n      try {\n        const savedRisk = await storage.saveRisk({\n          ...risk,\n          companyId\n        });\n        \n        results.push({\n          success: true,\n          risk: savedRisk\n        });\n      } catch (error: any) {\n        results.push({\n          success: false,\n          risk: risk,\n          error: error.message\n        });\n      }\n    }\n    \n    res.status(201).json({\n      totalProcessed: risks.length,\n      successCount: results.filter(r => r.success).length,\n      failureCount: results.filter(r => !r.success).length,\n      results\n    });\n  } catch (error: any) {\n    console.error('Error importing risks:', error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\nexport default router;","size_bytes":3727},"server/api/subdomains.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { subdomains } from \"@shared/schema\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// Create schema for validation\nconst insertSubdomainSchema = createInsertSchema(subdomains).omit({ id: true });\n\nconst router = Router();\n\n// Get all subdomains\nrouter.get(\"/api/subdomains\", async (req, res) => {\n  try {\n    // Get domainId from query params if provided\n    const domainId = req.query.domainId ? parseInt(req.query.domainId as string) : undefined;\n    \n    if (domainId) {\n      const domain = await storage.getDomainById(domainId);\n      \n      if (!domain) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n      \n      const subdomains = await storage.getSubdomainsByDomainId(domainId);\n      return res.json(subdomains);\n    }\n    \n    // If no domainId is provided, get all subdomains (less common use case)\n    // This would need to be implemented in storage.ts with a getAllSubdomains method\n    // For now, we'll return an error\n    return res.status(400).json({ error: \"Domain ID is required\" });\n  } catch (error) {\n    console.error(\"Error fetching subdomains:\", error);\n    res.status(500).json({ error: \"Failed to fetch subdomains\" });\n  }\n});\n\n// Get a specific subdomain\nrouter.get(\"/api/subdomains/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const subdomain = await storage.getSubdomainById(id);\n    \n    if (!subdomain) {\n      return res.status(404).json({ error: \"Subdomain not found\" });\n    }\n    \n    // Get the domain info\n    const domain = await storage.getDomainById(subdomain.domainId);\n    \n    res.json({\n      ...subdomain,\n      domainName: domain?.name || '',\n    });\n  } catch (error) {\n    console.error(\"Error fetching subdomain:\", error);\n    res.status(500).json({ error: \"Failed to fetch subdomain\" });\n  }\n});\n\n// Create a new subdomain (Admin only)\nrouter.post(\"/api/subdomains\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  // Check if user is admin (if you have roles implemented)\n  // if (req.user.role !== 'admin') {\n  //   return res.status(403).json({ error: \"Forbidden\" });\n  // }\n  \n  try {\n    const parsedData = insertSubdomainSchema.parse(req.body);\n    \n    // Verify the domain exists\n    const domain = await storage.getDomainById(parsedData.domainId);\n    if (!domain) {\n      return res.status(404).json({ error: \"Domain not found\" });\n    }\n    \n    const subdomain = await storage.saveSubdomain(parsedData);\n    res.status(201).json(subdomain);\n  } catch (error) {\n    console.error(\"Error creating subdomain:\", error);\n    res.status(400).json({ error: \"Failed to create subdomain\" });\n  }\n});\n\n// Update a subdomain (Admin only)\nrouter.put(\"/api/subdomains/:id\", async (req, res) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  // Check if user is admin (if you have roles implemented)\n  // if (req.user.role !== 'admin') {\n  //   return res.status(403).json({ error: \"Forbidden\" });\n  // }\n  \n  try {\n    const id = parseInt(req.params.id);\n    const subdomain = await storage.getSubdomainById(id);\n    \n    if (!subdomain) {\n      return res.status(404).json({ error: \"Subdomain not found\" });\n    }\n    \n    const parsedData = insertSubdomainSchema.parse({\n      ...req.body,\n      id // Add the ID to ensure we're updating the right subdomain\n    });\n    \n    // Make sure the domain exists\n    const domain = await storage.getDomainById(parsedData.domainId);\n    if (!domain) {\n      return res.status(404).json({ error: \"Domain not found\" });\n    }\n    \n    const updatedSubdomain = await storage.saveSubdomain(parsedData);\n    res.json(updatedSubdomain);\n  } catch (error) {\n    console.error(\"Error updating subdomain:\", error);\n    res.status(400).json({ error: \"Failed to update subdomain\" });\n  }\n});\n\nexport default router;","size_bytes":3981},"server/utils/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// The newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst MODEL = \"gpt-4o\";\n\n// OpenAI client instance\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || \"\",\n});\n\n/**\n * Predicts compliance risks based on assessment data\n * @param assessmentData The assessment data to analyze\n * @param companyInfo Optional company information for context\n * @returns Risk prediction analysis\n */\nexport async function predictComplianceRisks(\n  assessmentData: any,\n  companyInfo?: any\n): Promise<any> {\n  try {\n    const prompt = generateRiskAnalysisPrompt(assessmentData, companyInfo);\n    \n    const response = await openai.chat.completions.create({\n      model: MODEL,\n      messages: [\n        {\n          role: \"system\", \n          content: \"You are an expert in cybersecurity compliance risk analysis. Your task is to analyze compliance data and provide detailed risk predictions and recommendations based on identified gaps and patterns.\"\n        },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2\n    });\n\n    const content = response.choices[0].message.content || \"{}\";\n    return JSON.parse(content);\n  } catch (error: any) {\n    console.error(\"Error in risk prediction:\", error);\n    throw new Error(`Failed to predict compliance risks: ${error.message}`);\n  }\n}\n\n/**\n * Generates an AI-powered remediation plan for identified risks\n * @param risks The identified risks to remediate\n * @param companyContext Information about the company for better recommendations\n * @returns Detailed remediation plan\n */\nexport async function generateRemediationPlan(\n  risks: any[],\n  companyContext?: any\n): Promise<any> {\n  try {\n    const prompt = generateRemediationPrompt(risks, companyContext);\n    \n    const response = await openai.chat.completions.create({\n      model: MODEL,\n      messages: [\n        {\n          role: \"system\", \n          content: \"You are an expert in cybersecurity remediation planning. Your task is to create detailed, actionable remediation plans for identified compliance risks.\"\n        },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3\n    });\n\n    const content = response.choices[0].message.content || \"{}\";\n    return JSON.parse(content);\n  } catch (error: any) {\n    console.error(\"Error generating remediation plan:\", error);\n    throw new Error(`Failed to generate remediation plan: ${error.message}`);\n  }\n}\n\n/**\n * Analyzes a specific control with AI to determine implementation gaps\n * @param control The control to analyze\n * @param implementationData Current implementation details\n * @returns Gap analysis with recommendations\n */\nexport async function analyzeControlGaps(\n  control: any,\n  implementationData: any\n): Promise<any> {\n  try {\n    const prompt = generateControlGapPrompt(control, implementationData);\n    \n    const response = await openai.chat.completions.create({\n      model: MODEL,\n      messages: [\n        {\n          role: \"system\", \n          content: \"You are an expert in cybersecurity control implementation. Your task is to identify gaps in control implementations and provide actionable recommendations.\"\n        },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2\n    });\n\n    const content = response.choices[0].message.content || \"{}\";\n    return JSON.parse(content);\n  } catch (error: any) {\n    console.error(\"Error analyzing control gaps:\", error);\n    throw new Error(`Failed to analyze control gaps: ${error.message}`);\n  }\n}\n\n// Helper functions to generate prompts\n\nfunction generateRiskAnalysisPrompt(assessmentData: any, companyInfo?: any): string {\n  let prompt = `Please analyze the following compliance assessment data and predict potential risks:\\n\\n`;\n  \n  // Add assessment data context\n  prompt += `Assessment Data:\\n${JSON.stringify(assessmentData, null, 2)}\\n\\n`;\n  \n  // Add company context if available\n  if (companyInfo) {\n    prompt += `Company Context:\\n${JSON.stringify(companyInfo, null, 2)}\\n\\n`;\n  }\n  \n  prompt += `For each domain or control with compliance gaps, predict the following in JSON format:\n1. Risk likelihood (High/Medium/Low)\n2. Potential impact (High/Medium/Low)\n3. Overall risk rating\n4. Potential consequences of non-compliance\n5. Recommended priority level for remediation\n6. Brief explanation of risk factors\n\nReturn the response in the following JSON structure:\n{\n  \"overall_risk_score\": number, // 1-10\n  \"risk_summary\": \"Summary text\",\n  \"domain_risks\": [\n    {\n      \"domain\": \"Domain name\",\n      \"risk_level\": \"High/Medium/Low\",\n      \"impact\": \"High/Medium/Low\",\n      \"priority\": \"Critical/High/Medium/Low\",\n      \"explanation\": \"Explanation text\",\n      \"potential_consequences\": [\"Consequence 1\", \"Consequence 2\"],\n      \"control_risks\": [\n        {\n          \"control_id\": \"ID\",\n          \"risk_level\": \"High/Medium/Low\",\n          \"impact\": \"High/Medium/Low\",\n          \"explanation\": \"Explanation text\"\n        }\n      ]\n    }\n  ],\n  \"recommendations\": [\"Recommendation 1\", \"Recommendation 2\"]\n}`;\n\n  return prompt;\n}\n\nfunction generateRemediationPrompt(risks: any[], companyContext?: any): string {\n  let prompt = `Please create a detailed remediation plan for the following compliance risks:\\n\\n`;\n  \n  // Add risks context\n  prompt += `Identified Risks:\\n${JSON.stringify(risks, null, 2)}\\n\\n`;\n  \n  // Add company context if available\n  if (companyContext) {\n    prompt += `Company Context:\\n${JSON.stringify(companyContext, null, 2)}\\n\\n`;\n  }\n  \n  prompt += `For each risk, provide the following in JSON format:\n1. Step-by-step remediation actions\n2. Estimated time for implementation\n3. Required resources\n4. Key stakeholders who should be involved\n5. Potential challenges in implementation\n6. Success metrics to verify remediation\n\nReturn the response in the following JSON structure:\n{\n  \"remediation_summary\": \"Summary text\",\n  \"risk_remediations\": [\n    {\n      \"risk_id\": \"ID or description\",\n      \"priority\": \"Critical/High/Medium/Low\",\n      \"steps\": [\n        {\n          \"step_number\": 1,\n          \"description\": \"Step description\",\n          \"estimated_time\": \"Time estimate\",\n          \"required_resources\": [\"Resource 1\", \"Resource 2\"],\n          \"stakeholders\": [\"Stakeholder 1\", \"Stakeholder 2\"]\n        }\n      ],\n      \"challenges\": [\"Challenge 1\", \"Challenge 2\"],\n      \"success_metrics\": [\"Metric 1\", \"Metric 2\"]\n    }\n  ],\n  \"general_recommendations\": [\"Recommendation 1\", \"Recommendation 2\"]\n}`;\n\n  return prompt;\n}\n\nfunction generateControlGapPrompt(control: any, implementationData: any): string {\n  let prompt = `Please analyze the following control implementation and identify gaps:\\n\\n`;\n  \n  // Add control context\n  prompt += `Control Details:\\n${JSON.stringify(control, null, 2)}\\n\\n`;\n  \n  // Add implementation data\n  prompt += `Current Implementation:\\n${JSON.stringify(implementationData, null, 2)}\\n\\n`;\n  \n  prompt += `Please identify gaps in the implementation compared to the control requirements and provide recommendations in JSON format:\n1. Identified implementation gaps\n2. Compliance impact of each gap\n3. Recommended actions to close gaps\n4. Implementation complexity\n5. Estimated effort to remediate\n\nReturn the response in the following JSON structure:\n{\n  \"control_id\": \"Control ID\",\n  \"compliance_status\": \"Compliant/Partial/Non-compliant\",\n  \"gap_analysis\": {\n    \"identified_gaps\": [\n      {\n        \"gap_description\": \"Description\",\n        \"compliance_impact\": \"High/Medium/Low\",\n        \"remediation_action\": \"Action description\",\n        \"complexity\": \"High/Medium/Low\",\n        \"estimated_effort\": \"Effort estimate\"\n      }\n    ]\n  },\n  \"overall_recommendations\": [\"Recommendation 1\", \"Recommendation 2\"]\n}`;\n\n  return prompt;\n}","size_bytes":7958},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext, useState, useEffect } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, z.infer<typeof insertUserSchema>>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | null, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: z.infer<typeof insertUserSchema>) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome, ${user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3206},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/clerk-protected-route.tsx":{"content":"import React from \"react\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport { Route, Redirect } from \"wouter\";\nimport { Shield, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function ClerkProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const { isSignedIn, user } = useClerkUser();\n  // Use a simpler check since isLoaded isn't available \n  const isLoading = user === undefined;\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!isSignedIn) {\n    return (\n      <Route path={path}>\n        <div className=\"flex justify-center items-center h-screen\">\n          <div className=\"text-center max-w-md p-6 bg-card rounded-lg border border-border shadow-md\">\n            <Shield className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n            <h2 className=\"text-xl font-bold mb-2\">Admin Access Required</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              This area requires Clerk authentication. Please sign in with your Clerk admin account.\n            </p>\n            <div className=\"flex flex-col gap-2 sm:flex-row sm:justify-center\">\n              <Button asChild variant=\"default\">\n                <a href=\"/clerk-login\">Sign in with Clerk</a>\n              </Button>\n              <Button asChild variant=\"outline\">\n                <a href=\"/login\">Regular Login</a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  return <Route path={path}><Component /></Route>;\n}","size_bytes":1777},"client/src/lib/clerk-roles.ts":{"content":"import { User } from \"@clerk/clerk-react\";\n\n// User role types\nexport type UserRole = 'admin' | 'user';\n\n// Check if the user has a specific role\nexport function hasRole(user: User | null | undefined, role: UserRole): boolean {\n  if (!user) return false;\n  \n  // Check public metadata for roles\n  const metadata = user.publicMetadata;\n  const roles = metadata?.roles as string[] | undefined;\n  \n  if (!roles) return false;\n  \n  return roles.includes(role);\n}\n\n// Check if user is an admin\nexport function isAdmin(user: User | null | undefined): boolean {\n  return hasRole(user, 'admin');\n}\n\n// Get all roles for a user\nexport function getUserRoles(user: User | null | undefined): UserRole[] {\n  if (!user) return [];\n  \n  const metadata = user.publicMetadata;\n  return (metadata?.roles as string[] | undefined) || [];\n}","size_bytes":819},"client/src/lib/clerk.ts":{"content":"import { ClerkProvider } from \"@clerk/clerk-react\";\nimport { apiRequest } from \"./queryClient\";\n\n// Get the Clerk Publishable Key from our API endpoint\nexport let clerkPublishableKey = \"\";\n\n// Function to fetch the publishable key from the server\nexport async function fetchClerkPublishableKey() {\n  try {\n    const res = await apiRequest(\"GET\", \"/api/clerk-key\");\n    const data = await res.json();\n    if (data.publishableKey) {\n      clerkPublishableKey = data.publishableKey;\n      return data.publishableKey;\n    }\n    return \"\";\n  } catch (error) {\n    console.error(\"Failed to fetch Clerk publishable key:\", error);\n    return \"\";\n  }\n}\n\nexport { ClerkProvider };","size_bytes":670},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />\n}\n","size_bytes":712},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\ninterface ApiRequestOptions {\n  isFormData?: boolean;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n  options?: ApiRequestOptions\n): Promise<Response> {\n  const isFormData = options?.isFormData || false;\n  \n  // Determine headers and body based on content type\n  let headers: HeadersInit = {};\n  let body: BodyInit | undefined = undefined;\n  \n  if (data) {\n    if (isFormData) {\n      // FormData should be sent without Content-Type to let browser set it with the boundary\n      body = data as BodyInit;\n    } else {\n      headers[\"Content-Type\"] = \"application/json\";\n      body = JSON.stringify(data);\n    }\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1834},"client/src/lib/role-protected-routes.tsx":{"content":"import React from \"react\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport { Route, Redirect } from \"wouter\";\nimport { Shield, Loader2, UserX } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { isAdmin } from \"./clerk-roles\";\n\n// Base component for role-protected routes\ninterface RoleProtectedRouteProps {\n  path: string;\n  component: () => React.JSX.Element | null;\n  roleCheck: (user: any) => boolean;\n  unauthorizedComponent: () => React.JSX.Element | null;\n}\n\nfunction RoleProtectedRoute({\n  path,\n  component: Component,\n  roleCheck,\n  unauthorizedComponent: UnauthorizedComponent\n}: RoleProtectedRouteProps) {\n  const { isSignedIn, user } = useClerkUser();\n  const isLoading = user === undefined;\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!isSignedIn) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/clerk-auth\" />\n      </Route>\n    );\n  }\n\n  if (!roleCheck(user)) {\n    return <Route path={path}><UnauthorizedComponent /></Route>;\n  }\n\n  return <Route path={path}><Component /></Route>;\n}\n\n// Admin-specific protected route\nexport function AdminProtectedRoute({\n  path,\n  component\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const UnauthorizedAccess = () => (\n    <div className=\"flex justify-center items-center h-screen\">\n      <div className=\"text-center max-w-md p-6 bg-card rounded-lg border border-border shadow-md\">\n        <Shield className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n        <h2 className=\"text-xl font-bold mb-2\">Admin Access Only</h2>\n        <p className=\"text-muted-foreground mb-4\">\n          This area requires administrative privileges. Your account does not have the necessary permissions.\n        </p>\n        <div className=\"flex flex-col gap-2 sm:flex-row sm:justify-center\">\n          <Button asChild variant=\"default\">\n            <a href=\"/user-dashboard\">Go to User Dashboard</a>\n          </Button>\n          <Button asChild variant=\"outline\">\n            <a href=\"/\">Return to Home</a>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <RoleProtectedRoute\n      path={path}\n      component={component}\n      roleCheck={(user) => isAdmin(user)}\n      unauthorizedComponent={UnauthorizedAccess}\n    />\n  );\n}\n\n// User-specific protected route (allows both users and admins)\nexport function UserProtectedRoute({\n  path,\n  component\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const UnauthorizedAccess = () => (\n    <div className=\"flex justify-center items-center h-screen\">\n      <div className=\"text-center max-w-md p-6 bg-card rounded-lg border border-border shadow-md\">\n        <UserX className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n        <h2 className=\"text-xl font-bold mb-2\">Login Required</h2>\n        <p className=\"text-muted-foreground mb-4\">\n          Please log in to access this page. If you don't have an account, you can sign up for one.\n        </p>\n        <div className=\"flex flex-col gap-2 sm:flex-row sm:justify-center\">\n          <Button asChild variant=\"default\">\n            <a href=\"/clerk-auth\">Login</a>\n          </Button>\n          <Button asChild variant=\"outline\">\n            <a href=\"/\">Return to Home</a>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <RoleProtectedRoute\n      path={path}\n      component={component}\n      roleCheck={() => true} // Any authenticated user is allowed\n      unauthorizedComponent={UnauthorizedAccess}\n    />\n  );\n}","size_bytes":3732},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","size_bytes":165},"client/src/pages/admin-page.tsx":{"content":"import React, { useState } from \"react\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport UserForm from \"@/components/admin/user-form\";\nimport UserList from \"@/components/admin/user-list\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport CompanyInfoForm from \"@/components/company/company-info-form\";\nimport PolicyUpload from \"@/components/company/policy-upload\";\nimport PolicyList from \"@/components/company/policy-list\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { ClerkUserButton } from \"@/components/clerk/clerk-auth\";\nimport { Shield, ServerCog, UserCog, Building, FileText } from \"lucide-react\";\n\nexport default function AdminPage() {\n  const [showUserForm, setShowUserForm] = useState(false);\n  const { isSignedIn, user: clerkUser } = useClerkUser();\n  const { user } = useAuth();\n  \n  // Check if user has admin access (either through Clerk or regular auth)\n  const hasAccess = isSignedIn || (user && user.role === 'admin');\n  \n  if (!hasAccess) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        <div className=\"text-center max-w-md p-6 bg-card rounded-lg border border-border shadow-md\">\n          <Shield className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold mb-2\">Admin Access Required</h2>\n          <p className=\"text-muted-foreground mb-4\">\n            You need administrator privileges to access this page. Please sign in with an admin account.\n          </p>\n          <div className=\"flex flex-col gap-2 sm:flex-row sm:justify-center\">\n            <Button asChild variant=\"default\">\n              <a href=\"/clerk-auth\">Sign in with Clerk</a>\n            </Button>\n            <Button asChild variant=\"outline\">\n              <a href=\"/auth\">Sign in with Password</a>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar */}\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"p-6 space-y-6\">\n          {/* Header */}\n          <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold flex items-center\">\n                <ServerCog className=\"mr-2 h-6 w-6 text-primary\" />\n                Admin Control Panel\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">Manage users, company information, and system settings</p>\n            </div>\n            \n            {isSignedIn && (\n              <div className=\"flex items-center gap-2 bg-card/60 backdrop-blur-sm rounded-lg p-2 border border-border\">\n                <span className=\"text-sm\">Admin: {clerkUser?.firstName || clerkUser?.username || 'Admin'}</span>\n                <ClerkUserButton />\n              </div>\n            )}\n          </div>\n          \n          <Tabs defaultValue=\"users\" className=\"space-y-4\">\n            <TabsList className=\"grid grid-cols-3 md:w-auto w-full\">\n              <TabsTrigger value=\"users\" className=\"flex items-center\">\n                <UserCog className=\"mr-2 h-4 w-4\" />\n                User Management\n              </TabsTrigger>\n              <TabsTrigger value=\"company\" className=\"flex items-center\">\n                <Building className=\"mr-2 h-4 w-4\" />\n                Company Information\n              </TabsTrigger>\n              <TabsTrigger value=\"policies\" className=\"flex items-center\">\n                <FileText className=\"mr-2 h-4 w-4\" />\n                Policy Management\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"users\" className=\"space-y-4\">\n              {showUserForm ? (\n                <UserForm onCancel={() => setShowUserForm(false)} />\n              ) : (\n                <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle>User Management</CardTitle>\n                    <button \n                      onClick={() => setShowUserForm(true)} \n                      className=\"px-4 py-2 rounded-md bg-primary text-white text-sm font-medium hover:bg-primary/90 transition-colors\"\n                    >\n                      Add New User\n                    </button>\n                  </CardHeader>\n                  <CardContent>\n                    <UserList />\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"company\" className=\"space-y-4\">\n              <CompanyInfoForm />\n            </TabsContent>\n            \n            <TabsContent value=\"policies\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <PolicyUpload />\n                <PolicyList />\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5289},"client/src/pages/agent-test-page.tsx":{"content":"import React from 'react';\nimport { Sparkles } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AgentScript from \"@/components/did-agent/agent-script\";\n\nexport default function AgentTestPage() {\n  const { toast } = useToast();\n  \n  return (\n    <div className=\"container py-6 space-y-6 max-w-5xl\">\n      <div className=\"text-center space-y-4 mb-6\">\n        <div className=\"inline-flex items-center justify-center p-2 bg-primary/10 rounded-full mb-2\">\n          <Sparkles className=\"h-6 w-6 text-primary\" />\n        </div>\n        <h1 className=\"text-3xl font-bold\">AI Security Assistant</h1>\n        <p className=\"text-muted-foreground max-w-3xl mx-auto\">\n          Interact with your virtual cybersecurity consultant\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"md:col-span-1 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>About the Agent</CardTitle>\n              <CardDescription>\n                Your virtual cybersecurity consultant\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-medium\">Capabilities</h3>\n                <ul className=\"list-disc pl-5 mt-2 text-sm space-y-1\">\n                  <li>Explain cybersecurity concepts</li>\n                  <li>Provide compliance guidance</li>\n                  <li>Suggest security controls</li>\n                  <li>Analyze policy requirements</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium\">Powered by</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  D-ID Realistic AI Avatar technology\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Sample Questions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start text-left h-auto py-2 px-3\"\n                  onClick={() => {\n                    toast({\n                      title: \"Question Suggested\",\n                      description: \"Ask the agent: What is the NCA ECC framework?\",\n                      variant: \"default\",\n                    });\n                  }}\n                >\n                  What is the NCA ECC framework?\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start text-left h-auto py-2 px-3\"\n                  onClick={() => {\n                    toast({\n                      title: \"Question Suggested\",\n                      description: \"Ask the agent: Explain the key components of cybersecurity governance\",\n                      variant: \"default\",\n                    });\n                  }}\n                >\n                  Explain the key components of cybersecurity governance\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start text-left h-auto py-2 px-3\"\n                  onClick={() => {\n                    toast({\n                      title: \"Question Suggested\",\n                      description: \"Ask the agent: What are the best practices for password policies?\",\n                      variant: \"default\",\n                    });\n                  }}\n                >\n                  What are the best practices for password policies?\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <div className=\"md:col-span-2\">\n          <AgentScript \n            height=\"600px\"\n            containerClassName=\"rounded-lg overflow-hidden shadow-lg\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4224},"client/src/pages/auth-page.tsx":{"content":"import React, { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2 } from \"lucide-react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { insertUserSchema } from \"@shared/schema\";\n\n// Use separate schemas for login and registration\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"]\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [location, navigate] = useLocation();\n  const { user, loginMutation, registerMutation, isLoading } = useAuth();\n  \n  // Redirect to dashboard if already logged in\n  useEffect(() => {\n    if (user) {\n      navigate(\"/dashboard\");\n    }\n  }, [user, navigate]);\n\n  // Login form\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  // Register form\n  const registerForm = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onLoginSubmit = (data: LoginFormValues) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterFormValues) => {\n    // Remove confirmPassword as it's not part of the insertUserSchema\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData);\n  };\n\n  const isPending = loginMutation.isPending || registerMutation.isPending || isLoading;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 relative\">\n      {/* Background image */}\n      <div \n        className=\"absolute top-0 left-0 right-0 bottom-0 -z-10 bg-cover bg-center\"\n        style={{\n          backgroundImage: 'url(\"/attached_assets/metawork background.png\")',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat'\n        }}\n      />\n      <div className=\"absolute top-0 left-0 right-0 bottom-0 bg-black/40 -z-10\" />\n      \n      <div className=\"max-w-6xl w-full flex flex-col md:flex-row gap-8 items-center\">\n        {/* Left side - Login/Register form */}\n        <div className=\"w-full md:w-1/2\">\n          <Card className=\"border-primary/10 backdrop-blur-sm bg-background/70\">\n            <CardHeader className=\"space-y-1\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <svg className=\"w-10 h-10 text-primary\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\"></path>\n                  <path d=\"M12 8v4M16 10h-8\"></path>\n                </svg>\n                <h2 className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-emerald-400\">MetaWorks</h2>\n              </div>\n              <CardTitle className=\"text-2xl\">Welcome to MetaWorks</CardTitle>\n              <CardDescription>\n                Login or create an account to access the dashboard\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"login\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"login\">Login</TabsTrigger>\n                  <TabsTrigger value=\"register\">Register</TabsTrigger>\n                </TabsList>\n                \n                {/* Login Form */}\n                <TabsContent value=\"login\">\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n                        {isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Please wait\n                          </>\n                        ) : (\n                          \"Sign In\"\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </TabsContent>\n                \n                {/* Register Form */}\n                <TabsContent value=\"register\">\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Confirm Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n                        {isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Please wait\n                          </>\n                        ) : (\n                          \"Create Account\"\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" className=\"w-full\" onClick={() => navigate(\"/\")}>\n                Back to Home\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n        \n        {/* Right side - Hero image/info */}\n        <div className=\"w-full md:w-1/2 text-center md:text-left\">\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl font-bold text-white mb-4\">\n              One-Click Cybersecurity Compliance\n            </h1>\n            <p className=\"text-gray-300 text-lg\">\n              MetaWorks provides a seamless solution for NCA ECC compliance with AI-driven policy generation and risk assessment.\n            </p>\n            <div className=\"mt-8 grid grid-cols-2 gap-4\">\n              <div className=\"backdrop-blur-sm bg-primary/10 p-4 rounded-lg border border-primary/20\">\n                <h3 className=\"text-2xl font-bold text-primary\">99.9%</h3>\n                <p className=\"text-sm text-gray-400\">Compliance Rate</p>\n              </div>\n              <div className=\"backdrop-blur-sm bg-primary/10 p-4 rounded-lg border border-primary/20\">\n                <h3 className=\"text-2xl font-bold text-primary\">500+</h3>\n                <p className=\"text-sm text-gray-400\">Controls Covered</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <style dangerouslySetInnerHTML={{ __html: `\n        @keyframes flow {\n          0% {\n            transform: translateY(-100%);\n            opacity: 0;\n          }\n          10% {\n            opacity: 0.3;\n          }\n          90% {\n            opacity: 0.2;\n          }\n          100% {\n            transform: translateY(1000%);\n            opacity: 0;\n          }\n        }\n        \n        body {\n          background-color: #121212;\n          background-image: \n            radial-gradient(circle at 20% 30%, rgba(0, 183, 235, 0.05) 0%, transparent 50%),\n            radial-gradient(circle at 80% 70%, rgba(78, 204, 163, 0.05) 0%, transparent 50%);\n        }\n      `}} />\n    </div>\n  );\n}\n","size_bytes":11037},"client/src/pages/clerk-admin-page.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Link } from \"wouter\";\nimport {\n  Users,\n  Settings,\n  Shield,\n  Lock,\n  UserCog,\n  KeyRound,\n  ArrowLeft,\n  ExternalLink\n} from \"lucide-react\";\n\nexport default function ClerkAdminPage() {\n  const { user, signOut, isSignedIn } = useClerkUser();\n\n  if (!isSignedIn || !user) {\n    return null; // ClerkProtectedRoute will handle redirection\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Clerk Admin - MetaWorks</title>\n      </Helmet>\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"flex flex-col min-h-screen\">\n          {/* Header */}\n          <header className=\"border-b border-border backdrop-blur-sm bg-background/60 sticky top-0 z-10\">\n            <div className=\"container flex h-16 items-center justify-between py-4\">\n              <div className=\"flex items-center gap-2\">\n                <Link href=\"/\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"gap-1\">\n                    <ArrowLeft className=\"w-4 h-4\" />\n                    Back to Home\n                  </Button>\n                </Link>\n                <h1 className=\"text-xl font-bold flex items-center\">\n                  <Shield className=\"w-5 h-5 text-primary mr-2\" />\n                  Clerk Admin Portal\n                </h1>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-sm\">\n                  Signed in as: <span className=\"font-medium\">{user.firstName || user.username}</span>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => signOut()}>Sign out</Button>\n              </div>\n            </div>\n          </header>\n\n          {/* Main Content */}\n          <main className=\"flex-1 container py-8\">\n            <div className=\"grid gap-8\">\n              <Alert className=\"bg-card border-primary/20\">\n                <Shield className=\"h-4 w-4 text-primary\" />\n                <AlertTitle>Clerk Authentication Admin Access</AlertTitle>\n                <AlertDescription>\n                  This admin portal provides access to Clerk authentication settings. \n                  For security reasons, user management should be handled directly in the Clerk dashboard.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <UserCog className=\"h-5 w-5 text-primary\" />\n                      Current Access\n                    </CardTitle>\n                    <CardDescription>Your authentication details</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <div className=\"text-sm font-medium text-muted-foreground\">User ID:</div>\n                        <div className=\"font-mono text-xs bg-primary/5 p-2 rounded mt-1 break-all\">\n                          {user.id}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-muted-foreground\">Email:</div>\n                        <div>{user.emailAddresses?.[0]?.emailAddress || 'Not available'}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-muted-foreground\">Name:</div>\n                        <div>{user.firstName} {user.lastName}</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10 md:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Lock className=\"h-5 w-5 text-primary\" />\n                      Manage Users & Authentication\n                    </CardTitle>\n                    <CardDescription>Access your Clerk dashboard to manage users</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <p>Manage your application's authentication settings, users, and organization permissions through the Clerk dashboard.</p>\n                      <div className=\"flex items-center p-3 bg-muted rounded-lg\">\n                        <Shield className=\"h-5 w-5 mr-2 text-primary\" />\n                        <span className=\"text-sm\">Clerk provides secure user management, authentication, and access control.</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                  <CardFooter>\n                    <Button className=\"w-full gap-2\" onClick={() => window.open(\"https://dashboard.clerk.com\", \"_blank\")}>\n                      <ExternalLink className=\"h-4 w-4\" />\n                      Open Clerk Dashboard\n                    </Button>\n                  </CardFooter>\n                </Card>\n              </div>\n\n              <Tabs defaultValue=\"users\" className=\"mt-6\">\n                <TabsList className=\"grid grid-cols-3 md:w-auto w-full\">\n                  <TabsTrigger value=\"users\" className=\"flex items-center\">\n                    <Users className=\"mr-2 h-4 w-4\" />\n                    Users\n                  </TabsTrigger>\n                  <TabsTrigger value=\"security\" className=\"flex items-center\">\n                    <KeyRound className=\"mr-2 h-4 w-4\" />\n                    Security\n                  </TabsTrigger>\n                  <TabsTrigger value=\"settings\" className=\"flex items-center\">\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    Settings\n                  </TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"users\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>User Management</CardTitle>\n                      <CardDescription>\n                        View and manage users in your application.\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n                        <Users className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n                        <h3 className=\"mt-4 text-lg font-medium\">User Management</h3>\n                        <p className=\"text-muted-foreground mt-2 max-w-md mx-auto\">\n                          For security reasons, user management is handled directly in the Clerk dashboard.\n                          Open the Clerk dashboard to manage users and their permissions.\n                        </p>\n                        <Button className=\"mt-6 gap-2\" onClick={() => window.open(\"https://dashboard.clerk.com\", \"_blank\")}>\n                          <ExternalLink className=\"h-4 w-4\" />\n                          Open Clerk Dashboard\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                <TabsContent value=\"security\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Security Settings</CardTitle>\n                      <CardDescription>\n                        Manage security settings for your application.\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n                        <KeyRound className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n                        <h3 className=\"mt-4 text-lg font-medium\">Security Settings</h3>\n                        <p className=\"text-muted-foreground mt-2 max-w-md mx-auto\">\n                          Authentication security settings are managed through the Clerk dashboard.\n                          This includes password policies, MFA settings, and session management.\n                        </p>\n                        <Button className=\"mt-6 gap-2\" onClick={() => window.open(\"https://dashboard.clerk.com\", \"_blank\")}>\n                          <ExternalLink className=\"h-4 w-4\" />\n                          Open Clerk Dashboard\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                <TabsContent value=\"settings\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Application Settings</CardTitle>\n                      <CardDescription>\n                        Configure authentication settings for your application.\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n                        <Settings className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n                        <h3 className=\"mt-4 text-lg font-medium\">Application Settings</h3>\n                        <p className=\"text-muted-foreground mt-2 max-w-md mx-auto\">\n                          Configure the authentication flow, appearance settings, and integration options\n                          through the Clerk dashboard.\n                        </p>\n                        <Button className=\"mt-6 gap-2\" onClick={() => window.open(\"https://dashboard.clerk.com\", \"_blank\")}>\n                          <ExternalLink className=\"h-4 w-4\" />\n                          Open Clerk Dashboard\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </main>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":10623},"client/src/pages/clerk-auth-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { ClerkSignIn, ClerkSignUp } from \"@/components/clerk/clerk-auth\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useLocation } from \"wouter\";\nimport { Shield, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\n\nexport default function ClerkAuthPage() {\n  const [activeTab, setActiveTab] = useState<string>(\"sign-in\");\n  const [location, navigate] = useLocation();\n  const { isSignedIn } = useClerkUser();\n\n  // Redirect if already signed in\n  React.useEffect(() => {\n    if (isSignedIn) {\n      navigate(\"/clerk-admin\");\n    }\n  }, [isSignedIn, navigate]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Admin Authentication - MetaWorks</title>\n      </Helmet>\n      <div className=\"min-h-screen flex flex-col\">\n        {/* Header */}\n        <header className=\"border-b border-border backdrop-blur-sm bg-background/60 sticky top-0 z-10\">\n          <div className=\"container flex h-16 items-center justify-between py-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate(\"/\")} className=\"gap-1\">\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back to Home\n              </Button>\n              <h1 className=\"text-xl font-bold flex items-center\">\n                <Shield className=\"w-5 h-5 text-primary mr-2\" />\n                Admin Authentication\n              </h1>\n            </div>\n          </div>\n        </header>\n\n        {/* Main content */}\n        <main className=\"flex-1 container flex items-start justify-center py-16\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl w-full\">\n            {/* Auth forms */}\n            <div className=\"flex flex-col items-center\">\n              <Tabs \n                defaultValue=\"sign-in\" \n                value={activeTab} \n                onValueChange={setActiveTab}\n                className=\"w-full max-w-md\"\n              >\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"sign-in\">Sign In</TabsTrigger>\n                  <TabsTrigger value=\"sign-up\">Sign Up</TabsTrigger>\n                </TabsList>\n                <div className=\"mt-6\">\n                  <TabsContent value=\"sign-in\">\n                    <ClerkSignIn />\n                  </TabsContent>\n                  <TabsContent value=\"sign-up\">\n                    <ClerkSignUp />\n                  </TabsContent>\n                </div>\n              </Tabs>\n            </div>\n\n            {/* Information panel */}\n            <div className=\"hidden md:flex flex-col justify-center bg-primary/5 backdrop-blur-sm p-10 rounded-lg border border-primary/10\">\n              <div className=\"max-w-md\">\n                <div className=\"mb-6 flex justify-center\">\n                  <Shield className=\"h-16 w-16 text-primary\" />\n                </div>\n                <h2 className=\"text-2xl font-bold mb-4 text-center\">\n                  Admin Authentication Portal\n                </h2>\n                <div className=\"space-y-4 text-muted-foreground\">\n                  <p>\n                    This is a secure area for administrative access to the MetaWorks platform.\n                    Only authorized administrators should access this portal.\n                  </p>\n                  <div className=\"p-4 bg-background/50 rounded-lg border border-border\">\n                    <h3 className=\"font-medium mb-2\">Administrator Capabilities:</h3>\n                    <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                      <li>Manage user accounts and permissions</li>\n                      <li>Configure platform-wide settings</li>\n                      <li>Access system analytics and reporting</li>\n                      <li>Manage compliance frameworks</li>\n                      <li>Configure security policies</li>\n                    </ul>\n                  </div>\n                  <p className=\"text-sm\">\n                    If you're a standard user looking to access your dashboard,\n                    please use the regular login page instead.\n                  </p>\n                  <div className=\"flex justify-center mt-4\">\n                    <Button variant=\"outline\" asChild>\n                      <a href=\"/login\">Go to Regular Login</a>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </>\n  );\n}","size_bytes":4675},"client/src/pages/company-dashboard-page.tsx":{"content":"import React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport DashboardLayout from '@/components/layout/dashboard-layout';\nimport CompanyDashboard from '@/components/company/company-dashboard';\n\nexport default function CompanyDashboardPage() {\n  return (\n    <DashboardLayout>\n      <Helmet>\n        <title>Company Information Dashboard | MetaWorks</title>\n      </Helmet>\n      <CompanyDashboard />\n    </DashboardLayout>\n  );\n}","size_bytes":446},"client/src/pages/dashboard-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport ComplianceScore from \"@/components/dashboard/compliance-score\";\nimport RiskHeatmap from \"@/components/risks/risk-heatmap\";\nimport { Link } from \"wouter\";\nimport { Shield, AlertTriangle, CheckCircle, Clock, FileText, Download, BarChart3, Network, Lock, Database, Cloud, UserCheck, Settings, Clipboard, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Assessment, AssessmentResult, Control, Domain, Framework } from \"@shared/schema\";\n\n// Component to display controls for a domain with their compliance status\ninterface DomainControlsProps {\n  domainId: number;\n  allResults: AssessmentResult[] | undefined;\n}\n\nfunction DomainControls({ domainId, allResults }: DomainControlsProps) {\n  // Fetch controls for this domain\n  const { data: controls, isLoading } = useQuery<Control[]>({\n    queryKey: ['/api/controls', domainId],\n    enabled: !!domainId,\n    queryFn: async () => {\n      const res = await fetch(`/api/controls?domainId=${domainId}`);\n      return await res.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-6\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary mb-2\" />\n        <p className=\"text-sm text-muted-foreground\">Loading controls...</p>\n      </div>\n    );\n  }\n\n  if (!controls || controls.length === 0) {\n    return (\n      <div className=\"p-4 text-center text-muted-foreground\">\n        No controls found for this domain.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      {controls.map(control => {\n        // Find the assessment result for this control\n        const result = allResults?.find(r => r.controlId === control.id);\n        \n        // Map status to display status\n        const status = \n          !result ? \"Not Assessed\" :\n          result.status === \"implemented\" ? \"Compliant\" :\n          result.status === \"partially_implemented\" ? \"Partially Compliant\" :\n          \"Non-Compliant\";\n        \n        return (\n          <div \n            key={control.id} \n            className=\"rounded-lg border p-3 flex items-center justify-between bg-background/60\"\n          >\n            <div className=\"flex items-center\">\n              <div className={`w-3 h-3 rounded-full mr-3 ${\n                status === \"Compliant\" ? \"bg-green-500\" : \n                status === \"Partially Compliant\" ? \"bg-amber-500\" : \n                status === \"Not Assessed\" ? \"bg-gray-400\" : \"bg-red-500\"\n              }`}></div>\n              <div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {control.controlId || `ECC ${control.id}`}\n                </div>\n                <div className=\"font-medium\">{control.name}</div>\n              </div>\n            </div>\n            <Link href={`/control/${control.id}`}>\n              <Button variant=\"ghost\" size=\"icon\">\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              </Button>\n            </Link>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  const [activeSecurityDomain, setActiveSecurityDomain] = useState(\"governance\");\n  \n  // Get all assessments for the user\n  const { data: assessments, isLoading: assessmentsLoading } = useQuery<Assessment[]>({\n    queryKey: ['/api/assessments'],\n  });\n  \n  // Get all frameworks\n  const { data: frameworks, isLoading: frameworksLoading } = useQuery<Framework[]>({\n    queryKey: ['/api/frameworks'],\n  });\n  \n  // Get NCA ECC framework specifically\n  const ncaEccFramework = frameworks?.find((f: Framework) => f.name === \"NCA ECC\");\n  \n  // Get domains for the NCA ECC framework\n  const { data: domains, isLoading: domainsLoading } = useQuery<Domain[]>({\n    queryKey: ['/api/domains', ncaEccFramework?.id],\n    enabled: !!ncaEccFramework?.id,\n    queryFn: async () => {\n      if (!ncaEccFramework?.id) return [];\n      const res = await fetch(`/api/domains?frameworkId=${ncaEccFramework.id}`);\n      return await res.json();\n    }\n  });\n  \n  // Get all assessment results\n  const { data: allResults, isLoading: resultsLoading } = useQuery<AssessmentResult[]>({\n    queryKey: ['/api/assessment-results/all'],\n    enabled: !!assessments?.length,\n    queryFn: async () => {\n      if (!assessments?.length) return [];\n      \n      // Get latest assessment\n      const latestAssessment = assessments.reduce((latest: Assessment, current: Assessment) => {\n        return new Date(current.updatedAt) > new Date(latest.updatedAt) ? current : latest;\n      }, assessments[0]);\n      \n      const res = await fetch(`/api/assessment-results?assessmentId=${latestAssessment.id}`);\n      return await res.json();\n    }\n  });\n  \n  // Calculate compliance score\n  const complianceScore = () => {\n    if (!allResults || allResults.length === 0) return 0;\n    \n    const totalControls = allResults.length;\n    const implementedCount = allResults.filter((r: AssessmentResult) => r.status === \"implemented\").length;\n    const partiallyCount = allResults.filter((r: AssessmentResult) => r.status === \"partially_implemented\").length;\n    \n    return Math.round(((implementedCount + (partiallyCount * 0.5)) / totalControls) * 100);\n  };\n  \n  // Calculate risk level\n  const calculateRiskLevel = () => {\n    const score = complianceScore();\n    \n    if (score >= 85) return { level: \"Low\", color: \"text-green-500\" };\n    if (score >= 65) return { level: \"Medium\", color: \"text-amber-500\" };\n    return { level: \"High\", color: \"text-red-500\" };\n  };\n  \n  // Get controls data for tasks\n  const { data: controls, isLoading: controlsLoading } = useQuery<Control[]>({\n    queryKey: ['/api/controls'],\n    enabled: !!allResults?.length\n  });\n  \n  // Get domains for tasks\n  const { data: allDomains, isLoading: allDomainsLoading } = useQuery<Domain[]>({\n    queryKey: ['/api/domains/all'],\n    enabled: !!controls?.length,\n    queryFn: async () => {\n      const res = await fetch(`/api/domains/all`);\n      return await res.json();\n    }\n  });\n  \n  // Enhanced pending tasks with control and domain information\n  const pendingTasks = React.useMemo(() => {\n    if (!allResults || !controls || !allDomains) return [];\n    \n    const filteredTasks = allResults\n      .filter((result: AssessmentResult) => \n        result.status === \"not_implemented\" || result.status === \"partially_implemented\")\n      .slice(0, 3);\n    \n    return filteredTasks.map((task: AssessmentResult) => {\n      const control = controls.find((c: Control) => c.id === task.controlId);\n      const domain = control ? allDomains.find((d: Domain) => d.id === control.domainId) : null;\n      \n      return {\n        ...task,\n        controlName: control?.name || `Control ${task.controlId}`,\n        domainName: domain?.name || \"Security Domain\"\n      };\n    });\n  }, [allResults, controls, allDomains]);\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar */}\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"p-6 space-y-6\">\n          {/* Header */}\n          <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n            <h1 className=\"text-2xl font-bold\">Dashboard</h1>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                Welcome, {user?.username}\n              </span>\n            </div>\n          </div>\n          \n          {/* Dashboard Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"backdrop-blur-sm bg-primary/5 border-primary/10\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium flex items-center\">\n                  <Shield className=\"mr-2 h-4 w-4 text-primary\" />\n                  Compliance Score\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {resultsLoading ? (\n                  <div className=\"flex flex-col items-center justify-center p-4\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-primary mb-2\" />\n                    <span className=\"text-sm text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <ComplianceScore score={complianceScore()} />\n                )}\n              </CardContent>\n            </Card>\n            \n            <Card className=\"backdrop-blur-sm bg-primary/5 border-primary/10\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium flex items-center\">\n                  <AlertTriangle className=\"mr-2 h-4 w-4 text-amber-500\" />\n                  Risk Level\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {resultsLoading ? (\n                  <div className=\"flex flex-col items-center justify-center p-4\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-primary mb-2\" />\n                    <span className=\"text-sm text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <>\n                    <div className={`text-2xl font-bold ${calculateRiskLevel().color}`}>\n                      {calculateRiskLevel().level}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {pendingTasks.length > 0 \n                        ? `${pendingTasks.length} issues need attention` \n                        : \"No critical issues found\"}\n                    </p>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n            \n            <Card className=\"backdrop-blur-sm bg-primary/5 border-primary/10\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium flex items-center\">\n                  <CheckCircle className=\"mr-2 h-4 w-4 text-green-500\" />\n                  Controls\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {resultsLoading ? (\n                  <div className=\"flex flex-col items-center justify-center p-4\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-primary mb-2\" />\n                    <span className=\"text-sm text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"text-2xl font-bold\">\n                      {allResults?.filter((r: AssessmentResult) => r.status === \"implemented\").length || 0}/\n                      {allResults?.length || 0}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {ncaEccFramework?.name || \"NCA ECC\"} controls implemented\n                    </p>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Main Dashboard Content */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Risk Heatmap */}\n            <Card className=\"md:col-span-2 backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle>Risk Heatmap</CardTitle>\n                <Link href=\"/risk-management\">\n                  <Button \n                    variant=\"link\" \n                    size=\"sm\" \n                    className=\"text-xs text-muted-foreground\"\n                  >\n                    View Full Risk Management →\n                  </Button>\n                </Link>\n              </CardHeader>\n              <CardContent>\n                <RiskHeatmap />\n              </CardContent>\n            </Card>\n            \n            {/* Pending Tasks */}\n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"mr-2 h-5 w-5 text-primary\" />\n                  Pending Tasks\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {resultsLoading ? (\n                    <div className=\"flex flex-col items-center justify-center py-4\">\n                      <Loader2 className=\"h-6 w-6 animate-spin text-primary mb-2\" />\n                      <span className=\"text-sm text-muted-foreground\">Loading tasks...</span>\n                    </div>\n                  ) : pendingTasks.length > 0 ? (\n                    pendingTasks.map((task: AssessmentResult & { controlName?: string; domainName?: string }, index: number) => (\n                      <div key={index} className=\"flex items-start gap-2\">\n                        <div className={`w-2 h-2 rounded-full mt-2 ${\n                          task.status === \"not_implemented\" ? \"bg-red-500\" : \"bg-amber-500\"\n                        }`}></div>\n                        <div>\n                          <p className=\"text-sm font-medium\">\n                            {task.controlName || `Control ${task.controlId}`}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {task.domainName || \"Security Domain\"} - Updated {new Date(task.updatedAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-2\">\n                      <p className=\"text-sm text-muted-foreground\">No pending tasks</p>\n                    </div>\n                  )}\n                  <Link href=\"/did-agent\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                      Talk to Virtual Consultant\n                    </Button>\n                  </Link>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                    View All Tasks\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* NCA ECC Framework */}\n          <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n            <CardHeader>\n              <CardTitle>NCA ECC Framework</CardTitle>\n              <CardDescription>\n                {ncaEccFramework?.description || \"Essential Cybersecurity Controls\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {domainsLoading ? (\n                <div className=\"flex flex-col items-center justify-center py-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">Loading NCA ECC domains...</p>\n                </div>\n              ) : domains && domains.length > 0 ? (\n                <Tabs defaultValue={domains[0]?.id?.toString()}>\n                  <TabsList className=\"w-full grid\" style={{ gridTemplateColumns: `repeat(${domains.length}, 1fr)` }}>\n                    {domains.map(domain => (\n                      <TabsTrigger key={domain.id} value={domain.id.toString()}>\n                        {domain.name}\n                      </TabsTrigger>\n                    ))}\n                  </TabsList>\n                  \n                  {domains.map(domain => (\n                    <TabsContent key={domain.id} value={domain.id.toString()}>\n                      <div className=\"mt-4\">\n                        {/* Get controls for this domain */}\n                        <DomainControls domainId={domain.id} allResults={allResults} />\n                      </div>\n                    </TabsContent>\n                  ))}\n                </Tabs>\n              ) : (\n                <div className=\"p-4 text-center text-muted-foreground\">\n                  No domains found for NCA ECC framework. Please add domains and controls to get started.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16696},"client/src/pages/did-agent-page.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Sparkles, BookOpen, Shield, FileCheck } from \"lucide-react\";\nimport AgentScript from \"@/components/did-agent/agent-script\";\n\nexport default function DIDAgentPage() {\n  return (\n    <>\n      <Helmet>\n        <title>MetaWorks | Virtual Security Assistant</title>\n      </Helmet>\n      \n      <div className=\"container py-8 max-w-7xl mx-auto\">\n        <div className=\"space-y-8\">\n          {/* Page Header */}\n          <div className=\"text-center space-y-4\">\n            <div className=\"inline-flex items-center justify-center p-2 bg-primary/10 rounded-full mb-2\">\n              <Sparkles className=\"h-6 w-6 text-primary\" />\n            </div>\n            <h1 className=\"text-3xl md:text-4xl font-bold\">Virtual Security Assistant</h1>\n            <p className=\"text-muted-foreground max-w-3xl mx-auto\">\n              Your AI-powered cybersecurity consultant helps you understand compliance frameworks,\n              security best practices, and provides guidance tailored to your organization.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Agent Column */}\n            <div className=\"lg:col-span-2\">\n              <AgentScript \n                height=\"600px\"\n                containerClassName=\"rounded-lg overflow-hidden shadow-lg\"\n              />\n            </div>\n            \n            {/* Information Column */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>How To Use</CardTitle>\n                  <CardDescription>\n                    Tips for interacting with your virtual security assistant\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium flex items-center gap-2\">\n                      <BookOpen className=\"h-4 w-4 text-primary\" />\n                      Ask About Frameworks\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      \"Can you explain the NCA ECC framework domains?\"\n                    </p>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium flex items-center gap-2\">\n                      <Shield className=\"h-4 w-4 text-primary\" />\n                      Get Security Advice\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      \"What are the best practices for password policies?\"\n                    </p>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium flex items-center gap-2\">\n                      <FileCheck className=\"h-4 w-4 text-primary\" />\n                      Policy Guidance\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      \"What should I include in an acceptable use policy?\"\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle>Supported Frameworks</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    <li className=\"flex items-center gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                      <span>NCA ECC (Essential Cybersecurity Controls)</span>\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                      <span>SAMA Cyber Security Framework</span>\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                      <span>ISO 27001 Information Security</span>\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                      <span>PDPL (Personal Data Protection Law)</span>\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                      <span>IT General Controls (ITGC)</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":4930},"client/src/pages/home-page.tsx":{"content":"import React from \"react\";\nimport Header from \"@/components/layout/header\";\nimport HeroSection from \"@/components/landing/hero-section\";\nimport FeaturesSection from \"@/components/landing/features-section\";\nimport ContactSection from \"@/components/landing/contact-section\";\nimport ComplianceLogos from \"@/components/landing/compliance-logos\";\nimport Footer from \"@/components/landing/footer\";\nimport { Shield } from \"lucide-react\";\nimport backgroundImage from \"@assets/metawork background.png\";\n\nexport default function HomePage() {\n  return (\n    <div className=\"min-h-screen text-foreground relative\">\n      {/* Background image */}\n      <div \n        className=\"fixed top-0 left-0 right-0 bottom-0 -z-10 bg-cover bg-center\"\n        style={{\n          backgroundImage: `url(${backgroundImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          backgroundAttachment: 'fixed'\n        }}\n      />\n      <div className=\"fixed top-0 left-0 right-0 bottom-0 bg-black/40 -z-10\" />\n      \n      <Header />\n      <HeroSection />\n      <ComplianceLogos />\n      <FeaturesSection />\n      <ContactSection />\n      <Footer />\n      \n      <style dangerouslySetInnerHTML={{ __html: `\n        @keyframes flow {\n          0% {\n            transform: translateY(-100%);\n            opacity: 0;\n          }\n          10% {\n            opacity: 0.3;\n          }\n          90% {\n            opacity: 0.2;\n          }\n          100% {\n            transform: translateY(1000%);\n            opacity: 0;\n          }\n        }\n        \n        body {\n          background-color: #121212;\n          background-image: \n            radial-gradient(circle at 20% 30%, rgba(0, 183, 235, 0.05) 0%, transparent 50%),\n            radial-gradient(circle at 80% 70%, rgba(78, 204, 163, 0.05) 0%, transparent 50%);\n        }\n      `}} />\n    </div>\n  );\n};\n","size_bytes":1902},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding-page.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport { OnboardingWizard } from \"@/components/onboarding/onboarding-wizard\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { AwardIcon, BookOpen } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface UserGameStats {\n  totalPoints: number;\n  level: number;\n  streakDays: number;\n  completedSteps: number;\n}\n\nexport default function OnboardingPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Fetch user game stats if logged in\n  const { data: gameStats } = useQuery<UserGameStats>({\n    queryKey: [\"/api/gamification/user-stats\"],\n    enabled: !!user?.id,\n    staleTime: 60 * 1000,\n  });\n\n  // Fetch user badges if logged in\n  const { data: userBadges } = useQuery<any[]>({\n    queryKey: [\"/api/gamification/user-badges\"],\n    enabled: !!user?.id,\n    staleTime: 60 * 1000,\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>Onboarding & Learning | MetaWorks</title>\n      </Helmet>\n\n      <div className=\"container mx-auto py-6 max-w-7xl\">\n        <h1 className=\"text-3xl font-bold mb-1\">Onboarding & Learning</h1>\n        <p className=\"text-muted-foreground mb-6\">\n          Complete the onboarding journey to learn about cybersecurity compliance\n        </p>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left sidebar with user stats */}\n          <div className=\"lg:col-span-1 space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Your Progress</CardTitle>\n                <CardDescription>\n                  Track your learning journey\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {user ? (\n                  <div className=\"space-y-5\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-sm\">Level {gameStats?.level || 1}</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {gameStats?.totalPoints || 0} points\n                        </span>\n                      </div>\n                      <Progress value={\n                        gameStats?.totalPoints \n                          ? (gameStats.totalPoints % 100) \n                          : 0\n                      } className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {gameStats?.totalPoints\n                          ? 100 - (gameStats.totalPoints % 100)\n                          : 100} points until next level\n                      </p>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <div className=\"bg-card border rounded-lg p-3\">\n                        <p className=\"text-xs text-muted-foreground\">Completed Steps</p>\n                        <p className=\"text-2xl font-semibold flex items-end gap-1\">\n                          {gameStats?.completedSteps || 0}\n                          <span className=\"text-xs text-muted-foreground pb-1\">steps</span>\n                        </p>\n                      </div>\n                      <div className=\"bg-card border rounded-lg p-3\">\n                        <p className=\"text-xs text-muted-foreground\">Current Streak</p>\n                        <p className=\"text-2xl font-semibold flex items-end gap-1\">\n                          {gameStats?.streakDays || 0}\n                          <span className=\"text-xs text-muted-foreground pb-1\">days</span>\n                        </p>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-2 flex items-center gap-1\">\n                        <AwardIcon className=\"h-4 w-4\" />\n                        <span>Your Badges</span>\n                      </h3>\n                      <div className=\"grid grid-cols-4 gap-2\">\n                        {userBadges && userBadges.length > 0 ? (\n                          userBadges.map((badge) => (\n                            <div \n                              key={badge.id}\n                              className=\"flex flex-col items-center justify-center bg-muted/30 rounded-md p-2\"\n                              title={badge.name}\n                            >\n                              <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                                <AwardIcon className=\"h-5 w-5 text-primary\" />\n                              </div>\n                              <span className=\"text-xs truncate max-w-full block mt-1\">\n                                {badge.name}\n                              </span>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"col-span-4 text-center p-3\">\n                            <p className=\"text-sm text-muted-foreground\">\n                              No badges earned yet\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center p-6\">\n                    <p className=\"text-muted-foreground\">\n                      Login to track your progress\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Learning Resources\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"group flex items-center justify-between p-3 bg-muted/30 rounded-md hover:bg-muted/50 transition-colors cursor-pointer\">\n                    <div>\n                      <h3 className=\"font-medium\">ECC Framework Guide</h3>\n                      <p className=\"text-sm text-muted-foreground\">Official documentation</p>\n                    </div>\n                    <Badge variant=\"outline\">PDF</Badge>\n                  </div>\n\n                  <div className=\"group flex items-center justify-between p-3 bg-muted/30 rounded-md hover:bg-muted/50 transition-colors cursor-pointer\">\n                    <div>\n                      <h3 className=\"font-medium\">Cybersecurity Basics</h3>\n                      <p className=\"text-sm text-muted-foreground\">Introduction to core concepts</p>\n                    </div>\n                    <Badge variant=\"outline\">Article</Badge>\n                  </div>\n\n                  <div className=\"group flex items-center justify-between p-3 bg-muted/30 rounded-md hover:bg-muted/50 transition-colors cursor-pointer\">\n                    <div>\n                      <h3 className=\"font-medium\">Policy Templates</h3>\n                      <p className=\"text-sm text-muted-foreground\">Sample security policies</p>\n                    </div>\n                    <Badge variant=\"outline\">Templates</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main content area */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"onboarding\" className=\"mb-6\">\n              <TabsList>\n                <TabsTrigger value=\"onboarding\">Onboarding</TabsTrigger>\n                <TabsTrigger value=\"learning\">Learning Modules</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"onboarding\">\n                <OnboardingWizard />\n              </TabsContent>\n              <TabsContent value=\"learning\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex flex-col items-center justify-center py-12\">\n                      <BookOpen className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                      <h3 className=\"text-xl font-medium mb-2\">Learning Modules Coming Soon</h3>\n                      <p className=\"text-muted-foreground text-center max-w-md\">\n                        Our interactive learning modules are under development. \n                        Complete the onboarding process to get started with the basics.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":8999},"client/src/pages/policy-management-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { ArrowLeft, FileText, Plus, Download, Filter, Settings, Calendar, Clock, Check, X, Pencil, Trash2, Upload, Loader2, AlertCircle } from \"lucide-react\";\nimport { DirectFileUploader } from \"@/components/common/direct-file-uploader\";\nimport { Policy } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Define policy type for the component\ninterface PolicyWithDetails extends Policy {\n  // Add fields that are used in the UI but might not be in the schema\n  category?: string;\n  version?: string;\n  status?: string;\n  author?: string;\n  approver?: string;\n  reviewDate?: string;\n  documentUrl?: string; // URL to download the attached document\n}\n\n// Status mapping for display\nconst statusMap: Record<string, string> = {\n  active: \"Active\",\n  draft: \"Draft\",\n  review: \"Under Review\",\n  archived: \"Archived\"\n};\n\n// PolicyForm component for adding/editing policies\nfunction PolicyForm({ onCancel }: { onCancel: () => void }) {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [file, setFile] = useState<File | null>(null);\n  \n  // Status options for the dropdown\n  const statusOptions = [\n    { value: \"draft\", label: \"Draft\" },\n    { value: \"active\", label: \"Active\" },\n    { value: \"review\", label: \"Under Review\" },\n  ];\n  \n  // Category options\n  const categoryOptions = [\n    { value: \"security\", label: \"Security\" },\n    { value: \"data\", label: \"Data\" },\n    { value: \"compliance\", label: \"Compliance\" },\n    { value: \"general\", label: \"General\" },\n  ];\n\n  // Form state\n  const [formState, setFormState] = useState({\n    title: \"\",\n    type: categoryOptions[0].value,\n    content: \"\",\n    version: \"1.0\",\n    author: user?.username || \"\",\n    approver: \"\",\n    status: statusOptions[0].value,\n    reviewDate: \"\",\n  });\n  \n  // Handle form input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { id, value } = e.target;\n    setFormState(prev => ({\n      ...prev,\n      [id]: value\n    }));\n  };\n  \n  // File change handler\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n  \n  // Create policy mutation\n  const createPolicyMutation = useMutation({\n    mutationFn: async (policyData: Partial<PolicyWithDetails>) => {\n      const res = await apiRequest(\"POST\", \"/api/policies\", policyData);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Policy created\",\n        description: \"Your policy has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/policies'] });\n      onCancel();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create policy\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Handle form submission\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate form\n    if (!formState.title) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter a policy name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Since file uploads are now handled by DirectFileUploader which triggers the mutation,\n    // we only need to handle when there's no file.\n    if (!file) {\n      // Create policy without file\n      createPolicyMutation.mutate(formState);\n    }\n    // Otherwise the DirectFileUploader will handle the upload and call the mutation\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"title\">Policy Name</Label>\n          <Input \n            id=\"title\" \n            placeholder=\"Enter policy name\" \n            value={formState.title}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"type\">Category</Label>\n          <select\n            id=\"type\"\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            value={formState.type}\n            onChange={handleInputChange}\n          >\n            {categoryOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"content\">Description</Label>\n        <Textarea \n          id=\"content\" \n          placeholder=\"Enter policy description\" \n          rows={4} \n          value={formState.content}\n          onChange={handleInputChange}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"version\">Version</Label>\n          <Input \n            id=\"version\" \n            placeholder=\"e.g., 1.0\" \n            value={formState.version}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"author\">Author</Label>\n          <Input \n            id=\"author\" \n            placeholder=\"Enter author name\" \n            value={formState.author}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"approver\">Approver</Label>\n          <Input \n            id=\"approver\" \n            placeholder=\"Enter approver name\" \n            value={formState.approver}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"status\">Status</Label>\n          <select\n            id=\"status\"\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            value={formState.status}\n            onChange={handleInputChange}\n          >\n            {statusOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"reviewDate\">Next Review Date</Label>\n          <Input \n            id=\"reviewDate\" \n            type=\"date\" \n            value={formState.reviewDate}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"document\">Upload Policy Document</Label>\n        <DirectFileUploader\n          endpoint=\"/api/upload/document\"\n          fieldName=\"document\"\n          accept=\".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n          buttonText=\"Upload Policy Document\"\n          onFileUploaded={(fileId, filename, url) => {\n            // Store file info to be submitted with form\n            setFile(null);\n            // Update policy with file information\n            createPolicyMutation.mutate({ \n              ...formState,\n              fileId: fileId,\n              documentUrl: url\n            });\n          }}\n        />\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          Supported file types: PDF, DOCX (Max size: 10MB)\n        </p>\n      </div>\n      \n      {file && (\n        <div className=\"flex items-center gap-2 p-2 border rounded\">\n          <FileText className=\"h-5 w-5 text-primary\" />\n          <span className=\"text-sm truncate\">{file.name}</span>\n          <span className=\"text-xs text-muted-foreground ml-auto\">\n            {(file.size / 1024 / 1024).toFixed(2)} MB\n          </span>\n        </div>\n      )}\n      \n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>Cancel</Button>\n        <Button \n          type=\"submit\" \n          disabled={createPolicyMutation.isPending}\n        >\n          {createPolicyMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            'Save Policy'\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\n// PolicyEditForm component for editing policies\nfunction PolicyEditForm({ policy, onCancel }: { policy: PolicyWithDetails; onCancel: () => void }) {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [file, setFile] = useState<File | null>(null);\n  \n  // Status options for the dropdown\n  const statusOptions = [\n    { value: \"draft\", label: \"Draft\" },\n    { value: \"active\", label: \"Active\" },\n    { value: \"review\", label: \"Under Review\" },\n  ];\n  \n  // Category options\n  const categoryOptions = [\n    { value: \"security\", label: \"Security\" },\n    { value: \"data\", label: \"Data\" },\n    { value: \"compliance\", label: \"Compliance\" },\n    { value: \"general\", label: \"General\" },\n  ];\n\n  // Form state\n  const [formState, setFormState] = useState({\n    title: policy.title || \"\",\n    type: policy.type || categoryOptions[0].value,\n    content: policy.content || \"\",\n    version: policy.version || \"1.0\",\n    author: policy.author || user?.username || \"\",\n    approver: policy.approver || \"\",\n    status: policy.status?.toLowerCase() || statusOptions[0].value,\n    reviewDate: policy.reviewDate ? new Date(policy.reviewDate).toISOString().split('T')[0] : \"\",\n  });\n  \n  // Handle form input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { id, value } = e.target;\n    setFormState(prev => ({\n      ...prev,\n      [id]: value\n    }));\n  };\n  \n  // File change handler\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n  \n  // Update policy mutation\n  const updatePolicyMutation = useMutation({\n    mutationFn: async (policyData: Partial<PolicyWithDetails>) => {\n      const res = await apiRequest(\"PUT\", `/api/policies/${policy.id}`, policyData);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Policy updated\",\n        description: \"Your policy has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/policies'] });\n      onCancel();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update policy\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Handle form submission\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate form\n    if (!formState.title) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter a policy name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Since file uploads are now handled by DirectFileUploader which triggers the mutation,\n    // we only need to handle when there's no file.\n    if (!file) {\n      // Update policy without file\n      updatePolicyMutation.mutate(formState);\n    }\n    // Otherwise the DirectFileUploader will handle the upload and call the mutation\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"title\">Policy Name</Label>\n          <Input \n            id=\"title\" \n            placeholder=\"Enter policy name\" \n            value={formState.title}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"type\">Category</Label>\n          <select\n            id=\"type\"\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            value={formState.type}\n            onChange={handleInputChange}\n          >\n            {categoryOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"content\">Description</Label>\n        <Textarea \n          id=\"content\" \n          placeholder=\"Enter policy description\" \n          rows={4} \n          value={formState.content}\n          onChange={handleInputChange}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"version\">Version</Label>\n          <Input \n            id=\"version\" \n            placeholder=\"e.g., 1.0\" \n            value={formState.version}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"author\">Author</Label>\n          <Input \n            id=\"author\" \n            placeholder=\"Enter author name\" \n            value={formState.author}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"approver\">Approver</Label>\n          <Input \n            id=\"approver\" \n            placeholder=\"Enter approver name\" \n            value={formState.approver}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"status\">Status</Label>\n          <select\n            id=\"status\"\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            value={formState.status}\n            onChange={handleInputChange}\n          >\n            {statusOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"reviewDate\">Next Review Date</Label>\n          <Input \n            id=\"reviewDate\" \n            type=\"date\" \n            value={formState.reviewDate}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"document\">Upload New Document</Label>\n        <DirectFileUploader\n          endpoint=\"/api/upload/document\"\n          fieldName=\"document\"\n          accept=\".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n          buttonText=\"Upload New Document\"\n          onFileUploaded={(fileId, filename, url) => {\n            // Store file info to be submitted with form\n            setFile(null);\n            // Update policy with file information\n            updatePolicyMutation.mutate({ \n              ...formState,\n              fileId: fileId,\n              documentUrl: url\n            });\n          }}\n        />\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          Supported file types: PDF, DOCX (Max size: 10MB)\n        </p>\n      </div>\n      \n      {file && (\n        <div className=\"flex items-center gap-2 p-2 border rounded\">\n          <FileText className=\"h-5 w-5 text-primary\" />\n          <span className=\"text-sm truncate\">{file.name}</span>\n          <span className=\"text-xs text-muted-foreground ml-auto\">\n            {(file.size / 1024 / 1024).toFixed(2)} MB\n          </span>\n        </div>\n      )}\n      \n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>Cancel</Button>\n        <Button \n          type=\"submit\" \n          disabled={updatePolicyMutation.isPending}\n        >\n          {updatePolicyMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Updating...\n            </>\n          ) : (\n            'Update Policy'\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\nexport default function PolicyManagementPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [showAddPolicy, setShowAddPolicy] = useState(false);\n  const [showEditPolicy, setShowEditPolicy] = useState(false);\n  const [editingPolicy, setEditingPolicy] = useState<PolicyWithDetails | null>(null);\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [deletingPolicy, setDeletingPolicy] = useState<PolicyWithDetails | null>(null);\n  \n  // Fetch policies from the API\n  const { data: policiesData, isLoading, error } = useQuery<PolicyWithDetails[]>({\n    queryKey: ['/api/policies'],\n  });\n  \n  // Convert policies to the needed format with proper date formatting\n  const policies = policiesData?.map(policy => ({\n    ...policy,\n    name: policy.title || 'Untitled Policy',\n    category: policy.type || 'General',\n    version: policy.version || '1.0',\n    status: policy.status || 'Draft',\n    lastUpdated: new Date(policy.updatedAt).toLocaleDateString(),\n    reviewDate: policy.reviewDate || 'N/A',\n    description: policy.content || 'No description provided.',\n    // Use the documentUrl property provided by the API\n    documentUrl: policy.documentUrl || undefined\n  })) || [];\n  \n  // Delete policy mutation\n  const deletePolicyMutation = useMutation({\n    mutationFn: async (policyId: number) => {\n      const res = await apiRequest(\"DELETE\", `/api/policies/${policyId}`);\n      return res.ok;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Policy deleted\",\n        description: \"Policy has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/policies'] });\n      setShowDeleteConfirmation(false);\n      setDeletingPolicy(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to delete policy\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Filter policies based on active tab\n  const filteredPolicies = activeTab === \"all\" \n    ? policies \n    : activeTab === \"active\" \n      ? policies.filter(p => p.status.toLowerCase() === \"active\")\n      : activeTab === \"draft\" \n        ? policies.filter(p => p.status.toLowerCase() === \"draft\")\n        : policies.filter(p => p.status.toLowerCase() === \"under review\");\n        \n  // Loading state\n  if (isLoading) {\n    return (\n      <>\n        <Helmet>\n          <title>Policy Management | MetaWorks</title>\n        </Helmet>\n        <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <Link href=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-6\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-3xl font-bold text-primary mb-8\">Policy Management</h1>\n            \n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardContent className=\"flex justify-center items-center py-16\">\n                <div className=\"text-center\">\n                  <Loader2 className=\"h-10 w-10 animate-spin mx-auto mb-4 text-primary\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Loading Policies</h3>\n                  <p className=\"text-muted-foreground\">Please wait while we fetch your policy documents...</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </>\n    );\n  }\n  \n  // Error state\n  if (error) {\n    return (\n      <>\n        <Helmet>\n          <title>Policy Management | MetaWorks</title>\n        </Helmet>\n        <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <Link href=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-6\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-3xl font-bold text-primary mb-8\">Policy Management</h1>\n            \n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardContent className=\"flex justify-center items-center py-16\">\n                <div className=\"text-center\">\n                  <AlertCircle className=\"h-10 w-10 mx-auto mb-4 text-destructive\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Error Loading Policies</h3>\n                  <p className=\"text-muted-foreground mb-4\">There was a problem loading your policy documents.</p>\n                  <Button onClick={() => window.location.reload()}>Try Again</Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Policy Management | MetaWorks</title>\n      </Helmet>\n      \n      {/* Edit Policy Dialog */}\n      <Dialog open={showEditPolicy} onOpenChange={setShowEditPolicy}>\n        <DialogContent className=\"sm:max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Policy</DialogTitle>\n            <DialogDescription>\n              Update the policy details\n            </DialogDescription>\n          </DialogHeader>\n          {editingPolicy && (\n            <PolicyEditForm \n              policy={editingPolicy} \n              onCancel={() => {\n                setShowEditPolicy(false);\n                setEditingPolicy(null);\n              }} \n            />\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the policy\n              {deletingPolicy?.title && <span className=\"font-medium\"> \"{deletingPolicy.title}\"</span>}\n              {deletingPolicy?.fileId && \" and any associated document files\"}.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setDeletingPolicy(null)}>Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={() => {\n                if (deletingPolicy) {\n                  deletePolicyMutation.mutate(deletingPolicy.id);\n                }\n              }}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              disabled={deletePolicyMutation.isPending}\n            >\n              {deletePolicyMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                'Delete'\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n      \n      <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-8 gap-4\">\n            <div className=\"flex items-center\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n              <h1 className=\"text-3xl font-bold text-primary\">Policy Management</h1>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-1\">\n                <Filter className=\"h-4 w-4\" />\n                <span>Filter</span>\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-1\">\n                <Settings className=\"h-4 w-4\" />\n                <span>Settings</span>\n              </Button>\n              <Dialog open={showAddPolicy} onOpenChange={setShowAddPolicy}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"flex items-center gap-1\">\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Add Policy</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-3xl\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Policy</DialogTitle>\n                    <DialogDescription>\n                      Create a new policy document for your organization\n                    </DialogDescription>\n                  </DialogHeader>\n                  <PolicyForm onCancel={() => setShowAddPolicy(false)} />\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n          \n          <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                <div>\n                  <CardTitle className=\"text-xl\">Policy Documents</CardTitle>\n                  <CardDescription>\n                    Manage your organization's policies and compliance documents\n                  </CardDescription>\n                </div>\n                <Tabs defaultValue=\"all\" value={activeTab} onValueChange={setActiveTab} className=\"w-auto\">\n                  <TabsList>\n                    <TabsTrigger value=\"all\">All</TabsTrigger>\n                    <TabsTrigger value=\"active\">Active</TabsTrigger>\n                    <TabsTrigger value=\"draft\">Draft</TabsTrigger>\n                    <TabsTrigger value=\"review\">Under Review</TabsTrigger>\n                  </TabsList>\n                </Tabs>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-[300px]\">Policy Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Version</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Last Updated</TableHead>\n                      <TableHead>Review Date</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPolicies.map(policy => (\n                      <TableRow key={policy.id}>\n                        <TableCell className=\"font-medium\">\n                          <div className=\"flex items-center\">\n                            <FileText className=\"h-4 w-4 mr-2 text-primary\" />\n                            {policy.title || policy.name}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            {policy.description.length > 80 \n                              ? policy.description.substring(0, 80) + \"...\"\n                              : policy.description}\n                          </div>\n                        </TableCell>\n                        <TableCell>{policy.category}</TableCell>\n                        <TableCell>{policy.version}</TableCell>\n                        <TableCell>\n                          <Badge\n                            className={`${\n                              policy.status === \"Active\" ? \"bg-green-500/20 text-green-500 border-green-500/20\" : \n                              policy.status === \"Draft\" ? \"bg-blue-500/20 text-blue-500 border-blue-500/20\" : \n                              \"bg-amber-500/20 text-amber-500 border-amber-500/20\"\n                            } border`}\n                          >\n                            {policy.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center text-sm\">\n                            <Calendar className=\"h-3 w-3 mr-1 text-muted-foreground\" />\n                            {policy.lastUpdated}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center text-sm\">\n                            <Clock className=\"h-3 w-3 mr-1 text-muted-foreground\" />\n                            {policy.reviewDate}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex items-center justify-end space-x-1\">\n                            {policy.documentUrl ? (\n                              <>\n                                <a \n                                  href={policy.documentUrl} \n                                  target=\"_blank\" \n                                  rel=\"noopener noreferrer\"\n                                  title=\"View document\"\n                                >\n                                  <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                    <FileText className=\"h-4 w-4\" />\n                                  </Button>\n                                </a>\n                                <a \n                                  href={policy.documentUrl} \n                                  download={`${policy.title.replace(/\\s+/g, '_')}.pdf`}\n                                  title=\"Download document\"\n                                >\n                                  <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                    <Download className=\"h-4 w-4\" />\n                                  </Button>\n                                </a>\n                              </>\n                            ) : (\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" disabled title=\"No document attached\">\n                                <Download className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\" \n                              className=\"h-8 w-8\"\n                              onClick={() => {\n                                // Pre-fill form with policy data\n                                setEditingPolicy(policy);\n                                setShowEditPolicy(true);\n                              }}\n                              title=\"Edit policy\"\n                            >\n                              <Pencil className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\" \n                              className=\"h-8 w-8 text-destructive\"\n                              onClick={() => {\n                                // Show delete confirmation\n                                setDeletingPolicy(policy);\n                                setShowDeleteConfirmation(true);\n                              }}\n                              title=\"Delete policy\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    {filteredPolicies.length === 0 && (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"h-24 text-center\">\n                          No policies found\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-between border-t p-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {filteredPolicies.length} of {policies.length} policies\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => {\n                    // Generate CSV data\n                    const headers = [\"Policy Name\", \"Category\", \"Version\", \"Status\", \"Last Updated\", \"Review Date\"];\n                    const csvData = [\n                      headers.join(\",\"),\n                      ...policies.map(policy => [\n                        `\"${policy.title || policy.name}\"`,\n                        `\"${policy.category}\"`,\n                        `\"${policy.version}\"`,\n                        `\"${policy.status}\"`,\n                        `\"${policy.lastUpdated}\"`,\n                        `\"${policy.reviewDate}\"`\n                      ].join(\",\"))\n                    ].join(\"\\n\");\n                    \n                    // Create a blob and download link\n                    const blob = new Blob([csvData], { type: \"text/csv;charset=utf-8\" });\n                    const url = URL.createObjectURL(blob);\n                    const link = document.createElement(\"a\");\n                    link.setAttribute(\"href\", url);\n                    link.setAttribute(\"download\", \"policy_export.csv\");\n                    link.style.visibility = \"hidden\";\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                  }}\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n              </div>\n            </CardFooter>\n          </Card>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-8\">\n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Policy Compliance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span>Active Policies</span>\n                    <Badge className=\"bg-green-500/20 text-green-500 border-green-500/20 border\">\n                      {policies.filter(p => p.status.toLowerCase() === \"active\").length} / {policies.length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Draft Policies</span>\n                    <Badge className=\"bg-blue-500/20 text-blue-500 border-blue-500/20 border\">\n                      {policies.filter(p => p.status.toLowerCase() === \"draft\").length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Under Review</span>\n                    <Badge className=\"bg-amber-500/20 text-amber-500 border-amber-500/20 border\">\n                      {policies.filter(p => p.status.toLowerCase() === \"review\").length}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Total Policies</span>\n                    <Badge className=\"bg-primary/20 text-primary border-primary/20 border\">\n                      {policies.length}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Activities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <div className=\"p-1 rounded-full bg-green-500/20 text-green-500\">\n                      <Check className=\"h-3 w-3\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Acceptable Use Policy approved</p>\n                      <p className=\"text-xs text-muted-foreground\">2 days ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <div className=\"p-1 rounded-full bg-blue-500/20 text-blue-500\">\n                      <Pencil className=\"h-3 w-3\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Access Control Policy updated</p>\n                      <p className=\"text-xs text-muted-foreground\">5 days ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <div className=\"p-1 rounded-full bg-amber-500/20 text-amber-500\">\n                      <Clock className=\"h-3 w-3\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Data Protection Policy due for review</p>\n                      <p className=\"text-xs text-muted-foreground\">1 week ago</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Policy Templates</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center p-2 rounded-md hover:bg-primary/5 cursor-pointer transition-colors\">\n                    <FileText className=\"h-4 w-4 mr-2 text-primary\" />\n                    <span>Information Security Policy Template</span>\n                  </div>\n                  <div className=\"flex items-center p-2 rounded-md hover:bg-primary/5 cursor-pointer transition-colors\">\n                    <FileText className=\"h-4 w-4 mr-2 text-primary\" />\n                    <span>Data Protection Policy Template</span>\n                  </div>\n                  <div className=\"flex items-center p-2 rounded-md hover:bg-primary/5 cursor-pointer transition-colors\">\n                    <FileText className=\"h-4 w-4 mr-2 text-primary\" />\n                    <span>Access Control Policy Template</span>\n                  </div>\n                  <div className=\"flex items-center p-2 rounded-md hover:bg-primary/5 cursor-pointer transition-colors\">\n                    <FileText className=\"h-4 w-4 mr-2 text-primary\" />\n                    <span>Incident Response Policy Template</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                    View All Templates\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":42154},"client/src/pages/risk-assessment-page.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Helmet } from \"react-helmet-async\";\nimport { AlertTriangle, Calendar, ChevronLeft, ClipboardList, Edit, Percent, PlusCircle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { RiskStatusChart } from \"@/components/risks/risk-status-chart\";\nimport { AssessmentResultItem } from \"@/components/risks/assessment-result-item\";\nimport RiskAssessmentForm from \"@/components/risks/risk-assessment-form\";\nimport OneClickReportButton from \"@/components/reports/one-click-report-button\";\nimport { Framework, Assessment, AssessmentResult } from \"@shared/schema\";\n\nexport default function RiskAssessmentPage() {\n  const [, setLocation] = useLocation();\n  const [assessmentId, setAssessmentId] = useState<number | null>(null);\n  const { toast } = useToast();\n  const [match, params] = useRoute<{ id?: string }>(\"/risk-assessment/:id?\");\n  \n  // Query to get frameworks\n  const { data: frameworks = [] } = useQuery<Framework[]>({\n    queryKey: ['/api/frameworks'],\n  });\n  \n  // Query to get all assessments for the user\n  const { data: assessments = [], refetch: refetchAssessments } = useQuery<Assessment[]>({\n    queryKey: ['/api/assessments'],\n  });\n  \n  // Get assessment results for the selected assessment\n  const { data: assessmentResults = [], refetch: refetchResults } = useQuery<AssessmentResult[]>({\n    queryKey: ['/api/assessment-results', assessmentId || 0],\n    enabled: !!assessmentId,\n  });\n  \n  useEffect(() => {\n    if (match && params?.id) {\n      setAssessmentId(parseInt(params.id));\n    } else if (assessments.length > 0) {\n      setAssessmentId(assessments[0].id);\n    }\n  }, [match, params, assessments]);\n  \n  const selectedAssessment = assessmentId \n    ? assessments.find(a => a.id === assessmentId) \n    : null;\n  \n  // Calculate status counts\n  const implementedCount = assessmentResults.filter(r => r.status === 'implemented').length;\n  const partiallyImplementedCount = assessmentResults.filter(r => r.status === 'partially_implemented').length;\n  const notImplementedCount = assessmentResults.filter(r => r.status === 'not_implemented').length;\n  \n  function getStatusColor(status: string) {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-500/10 text-green-500 border-green-500/20';\n      case 'in_progress':\n        return 'bg-blue-500/10 text-blue-500 border-blue-500/20';\n      default:\n        return 'bg-gray-500/10 text-gray-500 border-gray-500/20';\n    }\n  }\n  \n  function formatDate(dateString?: string) {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString();\n  }\n  \n  async function handleNewAssessmentSuccess() {\n    toast({\n      title: \"Assessment Created\",\n      description: \"Risk assessment has been created successfully\",\n    });\n    await refetchAssessments();\n  }\n  \n  function renderAssessmentList() {\n    if (assessments.length === 0) {\n      return (\n        <Alert className=\"mb-4\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            No assessments found. Create a new assessment to get started.\n          </AlertDescription>\n        </Alert>\n      );\n    }\n    \n    return (\n      <div className=\"space-y-4\">\n        {assessments.map((assessment) => (\n          <Card \n            key={assessment.id} \n            className={`cursor-pointer hover:border-primary/50 transition-all ${assessmentId === assessment.id ? 'border-primary' : ''}`}\n            onClick={() => setAssessmentId(assessment.id)}\n          >\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg font-medium\">{assessment.name}</CardTitle>\n                <Badge className={getStatusColor(assessment.status)}>\n                  {assessment.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                </Badge>\n              </div>\n              <CardDescription className=\"flex items-center gap-1 text-xs mt-1\">\n                <Calendar className=\"h-3 w-3\" />\n                {formatDate(assessment.startDate)}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-0 pb-2\">\n              <div className=\"flex items-center gap-3 mt-2\">\n                <Badge variant=\"outline\" className=\"rounded-sm\">\n                  {assessment.frameworkName || \"Unknown framework\"}\n                </Badge>\n                <Badge variant=\"outline\" className=\"rounded-sm flex items-center gap-1\">\n                  <Percent className=\"h-3 w-3\" />\n                  {assessment.score ? `${Math.round(assessment.score)}%` : 'N/A'}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Risk Assessment | MetaWorks</title>\n      </Helmet>\n      \n      <div className=\"container mx-auto py-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <Button\n              variant=\"ghost\"\n              className=\"gap-1 mb-2\"\n              onClick={() => setLocation('/risk-management')}\n            >\n              <ChevronLeft className=\"h-4 w-4\" /> \n              Back to Risk Management\n            </Button>\n            <h1 className=\"text-3xl font-bold mb-1\">Risk Assessment</h1>\n            <p className=\"text-muted-foreground\">\n              Evaluate your organization's compliance with cybersecurity frameworks\n            </p>\n          </div>\n          \n          <Sheet>\n            <SheetTrigger asChild>\n              <Button className=\"gap-2\">\n                <PlusCircle className=\"h-4 w-4\" />\n                New Assessment\n              </Button>\n            </SheetTrigger>\n            <SheetContent className=\"sm:max-w-md\">\n              <SheetHeader>\n                <SheetTitle>Create New Assessment</SheetTitle>\n                <SheetDescription>\n                  Start a new compliance assessment for your organization.\n                </SheetDescription>\n              </SheetHeader>\n              <div className=\"py-4\">\n                <RiskAssessmentForm \n                  onSuccess={handleNewAssessmentSuccess} \n                  frameworks={frameworks}\n                />\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Left sidebar - Assessment list */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Assessments</CardTitle>\n                <CardDescription>\n                  Select an assessment to view details\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"max-h-[calc(100vh-250px)] overflow-auto\">\n                {renderAssessmentList()}\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Right content area - Assessment details */}\n          <div className=\"lg:col-span-3\">\n            {selectedAssessment ? (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <CardTitle className=\"text-2xl\">{selectedAssessment.name}</CardTitle>\n                        <CardDescription className=\"flex items-center gap-2 mt-1\">\n                          <Badge variant=\"outline\">\n                            {selectedAssessment.frameworkName || 'Unknown Framework'}\n                          </Badge>\n                          <span>•</span>\n                          <Badge className={getStatusColor(selectedAssessment.status)}>\n                            {selectedAssessment.status === 'in_progress' ? 'In Progress' : 'Completed'}\n                          </Badge>\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        {/* One-click report generation button */}\n                        {selectedAssessment && (\n                          <OneClickReportButton \n                            assessmentId={selectedAssessment.id}\n                            assessmentName={selectedAssessment.name}\n                          />\n                        )}\n                        <Button variant=\"outline\" size=\"sm\" className=\"gap-1\">\n                          <Edit className=\"h-3.5 w-3.5\" />\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4 mt-2\">\n                      <div className=\"bg-card border rounded-md p-4\">\n                        <p className=\"text-sm text-muted-foreground\">Start Date</p>\n                        <p className=\"text-xl font-semibold\">{formatDate(selectedAssessment.startDate)}</p>\n                      </div>\n                      <div className=\"bg-card border rounded-md p-4\">\n                        <p className=\"text-sm text-muted-foreground\">Completion Date</p>\n                        <p className=\"text-xl font-semibold\">\n                          {selectedAssessment.completionDate ? formatDate(selectedAssessment.completionDate) : 'In Progress'}\n                        </p>\n                      </div>\n                      <div className=\"bg-card border rounded-md p-4\">\n                        <p className=\"text-sm text-muted-foreground\">Score</p>\n                        <p className=\"text-xl font-semibold\">\n                          {selectedAssessment.score ? `${Math.round(selectedAssessment.score)}%` : 'N/A'}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-8\">\n                      <h3 className=\"text-lg font-semibold mb-4\">Compliance Status</h3>\n                      <div className=\"h-[180px]\">\n                        <RiskStatusChart \n                          implemented={implementedCount}\n                          partiallyImplemented={partiallyImplementedCount}\n                          notImplemented={notImplementedCount}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-xl\">Assessment Results</CardTitle>\n                    <CardDescription>\n                      Detailed compliance status for each control\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <Tabs defaultValue=\"all\">\n                      <div className=\"px-6 pb-2 border-b\">\n                        <TabsList>\n                          <TabsTrigger value=\"all\" className=\"gap-2\">\n                            <ClipboardList className=\"h-4 w-4\" />\n                            All Controls\n                          </TabsTrigger>\n                          <TabsTrigger value=\"implemented\" className=\"gap-2 text-green-600\">\n                            Implemented ({implementedCount})\n                          </TabsTrigger>\n                          <TabsTrigger value=\"partial\" className=\"gap-2 text-amber-600\">\n                            Partial ({partiallyImplementedCount})\n                          </TabsTrigger>\n                          <TabsTrigger value=\"not-implemented\" className=\"gap-2 text-red-600\">\n                            Not Implemented ({notImplementedCount})\n                          </TabsTrigger>\n                        </TabsList>\n                      </div>\n                      \n                      <TabsContent value=\"all\" className=\"m-0\">\n                        <ScrollArea className=\"h-[400px]\">\n                          <div className=\"px-1 py-2\">\n                            {assessmentResults.length === 0 ? (\n                              <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n                                <AlertTriangle className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                                <p className=\"text-muted-foreground\">No assessment results found.</p>\n                              </div>\n                            ) : (\n                              <div className=\"space-y-2\">\n                                {assessmentResults.map((result) => (\n                                  <AssessmentResultItem \n                                    key={result.id} \n                                    result={result} \n                                    onUpdate={() => refetchResults()}\n                                  />\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        </ScrollArea>\n                      </TabsContent>\n                      \n                      <TabsContent value=\"implemented\" className=\"m-0\">\n                        <ScrollArea className=\"h-[400px]\">\n                          <div className=\"px-1 py-2\">\n                            {assessmentResults.filter(r => r.status === 'implemented').map((result) => (\n                              <AssessmentResultItem \n                                key={result.id} \n                                result={result} \n                                onUpdate={() => refetchResults()}\n                              />\n                            ))}\n                          </div>\n                        </ScrollArea>\n                      </TabsContent>\n                      \n                      <TabsContent value=\"partial\" className=\"m-0\">\n                        <ScrollArea className=\"h-[400px]\">\n                          <div className=\"px-1 py-2\">\n                            {assessmentResults.filter(r => r.status === 'partially_implemented').map((result) => (\n                              <AssessmentResultItem \n                                key={result.id} \n                                result={result} \n                                onUpdate={() => refetchResults()}\n                              />\n                            ))}\n                          </div>\n                        </ScrollArea>\n                      </TabsContent>\n                      \n                      <TabsContent value=\"not-implemented\" className=\"m-0\">\n                        <ScrollArea className=\"h-[400px]\">\n                          <div className=\"px-1 py-2\">\n                            {assessmentResults.filter(r => r.status === 'not_implemented').map((result) => (\n                              <AssessmentResultItem \n                                key={result.id} \n                                result={result} \n                                onUpdate={() => refetchResults()}\n                              />\n                            ))}\n                          </div>\n                        </ScrollArea>\n                      </TabsContent>\n                    </Tabs>\n                  </CardContent>\n                  <CardFooter className=\"pt-0 pb-4 px-6\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Update the status of each control to track your organization's compliance progress.\n                    </p>\n                  </CardFooter>\n                </Card>\n              </div>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>No Assessment Selected</CardTitle>\n                  <CardDescription>\n                    Select an existing assessment from the sidebar or create a new one to get started.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n                    <AlertTriangle className=\"h-10 w-10 text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground mb-4\">\n                      No assessment data to display. Please select or create an assessment.\n                    </p>\n                    <Sheet>\n                      <SheetTrigger asChild>\n                        <Button>\n                          <PlusCircle className=\"h-4 w-4 mr-2\" />\n                          Create New Assessment\n                        </Button>\n                      </SheetTrigger>\n                      <SheetContent className=\"sm:max-w-md\">\n                        <SheetHeader>\n                          <SheetTitle>Create New Assessment</SheetTitle>\n                          <SheetDescription>\n                            Start a new compliance assessment for your organization.\n                          </SheetDescription>\n                        </SheetHeader>\n                        <div className=\"py-4\">\n                          <RiskAssessmentForm \n                            onSuccess={handleNewAssessmentSuccess} \n                            frameworks={frameworks}\n                          />\n                        </div>\n                      </SheetContent>\n                    </Sheet>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":18233},"client/src/pages/risk-management-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  AlertCircle, \n  CheckCircle2, \n  ChevronDown, \n  Clock, \n  Filter, \n  Plus, \n  RefreshCw, \n  Upload\n} from \"lucide-react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport PageHeader from \"@/components/layout/page-header\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from \"@/lib/utils\";\nimport RiskEntryForm, { Risk } from \"@/components/risks/risk-entry-form\";\nimport RiskBulkImport from \"@/components/risks/risk-bulk-import\";\n\nexport default function RiskManagementPage() {\n  const { user } = useAuth();\n  const [selectedRisk, setSelectedRisk] = useState<Risk | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"all\");\n  \n  // Fetch risks\n  const { data: risks, isLoading, isError, refetch } = useQuery<Risk[]>({\n    queryKey: ['/api/risks'],\n    throwOnError: false,\n  });\n  \n  // Filter risks based on search term and active tab\n  const filteredRisks = risks?.filter(risk => {\n    const matchesSearch = searchTerm === \"\" || \n      risk.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      risk.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesTab = activeTab === \"all\" || \n      (activeTab === \"high\" && risk.inherentRiskLevel === \"High\") ||\n      (activeTab === \"medium\" && risk.inherentRiskLevel === \"Medium\") ||\n      (activeTab === \"low\" && risk.inherentRiskLevel === \"Low\") ||\n      (activeTab === \"accepted\" && risk.isAccepted);\n      \n    return matchesSearch && matchesTab;\n  });\n  \n  const riskLevelColor = (level?: string) => {\n    switch (level) {\n      case \"High\": return \"text-destructive\";\n      case \"Medium\": return \"text-amber-500\";\n      case \"Low\": return \"text-green-500\";\n      default: return \"text-gray-500\";\n    }\n  };\n  \n  const handleRiskClick = (risk: Risk) => {\n    setSelectedRisk(risk);\n    setIsEditDialogOpen(true);\n  };\n  \n  const handleCreateSuccess = () => {\n    setIsCreateDialogOpen(false);\n    refetch();\n  };\n  \n  const handleEditSuccess = () => {\n    setIsEditDialogOpen(false);\n    setSelectedRisk(null);\n    refetch();\n  };\n  \n  const handleImportSuccess = () => {\n    setIsImportDialogOpen(false);\n    refetch();\n  };\n  \n  // Calculate risk statistics\n  const totalRisks = risks?.length || 0;\n  const highRisks = risks?.filter(r => r.inherentRiskLevel === \"High\").length || 0;\n  const mediumRisks = risks?.filter(r => r.inherentRiskLevel === \"Medium\").length || 0;\n  const lowRisks = risks?.filter(r => r.inherentRiskLevel === \"Low\").length || 0;\n  const acceptedRisks = risks?.filter(r => r.isAccepted).length || 0;\n  \n  return (\n    <>\n      <Helmet>\n        <title>Risk Management | MetaWorks</title>\n      </Helmet>\n      \n      <div className=\"flex flex-col h-full gap-4 p-4 md:p-6\">\n        <PageHeader\n          title=\"Risk Management\"\n          description=\"Identify, assess and manage cybersecurity risks\"\n          actions={\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => refetch()}\n              >\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Refresh\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setIsImportDialogOpen(true)}\n              >\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Bulk Import\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={() => setIsCreateDialogOpen(true)}\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                New Risk\n              </Button>\n            </div>\n          }\n        />\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"bg-card/50 backdrop-blur\">\n            <CardHeader className=\"py-4\">\n              <CardTitle className=\"text-xl\">Total Risks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-bold\">\n                {isLoading ? <Skeleton className=\"h-10 w-16\" /> : totalRisks}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-card/50 backdrop-blur\">\n            <CardHeader className=\"py-4\">\n              <CardTitle className=\"text-xl text-destructive\">High Risks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-bold text-destructive\">\n                {isLoading ? <Skeleton className=\"h-10 w-16\" /> : highRisks}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-card/50 backdrop-blur\">\n            <CardHeader className=\"py-4\">\n              <CardTitle className=\"text-xl text-amber-500\">Medium Risks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-bold text-amber-500\">\n                {isLoading ? <Skeleton className=\"h-10 w-16\" /> : mediumRisks}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-card/50 backdrop-blur\">\n            <CardHeader className=\"py-4\">\n              <CardTitle className=\"text-xl text-green-500\">Low Risks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-bold text-green-500\">\n                {isLoading ? <Skeleton className=\"h-10 w-16\" /> : lowRisks}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <Card className=\"flex-1 bg-card/50 backdrop-blur\">\n          <CardHeader>\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <CardTitle>Risk Register</CardTitle>\n                <CardDescription>View and manage all identified risks</CardDescription>\n              </div>\n              <div className=\"flex items-center gap-2 w-full sm:w-auto\">\n                <Input \n                  placeholder=\"Search risks...\" \n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"max-w-xs\"\n                />\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"icon\">\n                      <Filter className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuLabel>Filter By</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuGroup>\n                      <DropdownMenuItem onClick={() => setActiveTab(\"all\")}>\n                        All Risks\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => setActiveTab(\"high\")}>\n                        <span className=\"text-destructive font-medium mr-2\">●</span>\n                        High Risks\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => setActiveTab(\"medium\")}>\n                        <span className=\"text-amber-500 font-medium mr-2\">●</span>\n                        Medium Risks\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => setActiveTab(\"low\")}>\n                        <span className=\"text-green-500 font-medium mr-2\">●</span>\n                        Low Risks\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem onClick={() => setActiveTab(\"accepted\")}>\n                        <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                        Accepted Risks\n                      </DropdownMenuItem>\n                    </DropdownMenuGroup>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Tabs \n              defaultValue=\"all\" \n              value={activeTab} \n              onValueChange={setActiveTab}\n              className=\"w-full\"\n            >\n              <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"all\">All</TabsTrigger>\n                <TabsTrigger value=\"high\" className=\"text-destructive\">High</TabsTrigger>\n                <TabsTrigger value=\"medium\" className=\"text-amber-500\">Medium</TabsTrigger>\n                <TabsTrigger value=\"low\" className=\"text-green-500\">Low</TabsTrigger>\n                <TabsTrigger value=\"accepted\">Accepted</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"all\" className=\"m-0\">\n                <div className=\"border rounded-md\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Title</TableHead>\n                        <TableHead>Category</TableHead>\n                        <TableHead>Likelihood</TableHead>\n                        <TableHead>Impact</TableHead>\n                        <TableHead>Inherent Risk</TableHead>\n                        <TableHead>Residual Risk</TableHead>\n                        <TableHead>Status</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {isLoading ? (\n                        Array(5).fill(0).map((_, index) => (\n                          <TableRow key={index}>\n                            <TableCell colSpan={7}>\n                              <Skeleton className=\"h-10 w-full\" />\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      ) : isError ? (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"text-center py-8 text-destructive\">\n                            <AlertCircle className=\"mx-auto h-6 w-6 mb-2\" />\n                            <p>Failed to load risks. Please try again.</p>\n                          </TableCell>\n                        </TableRow>\n                      ) : filteredRisks?.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"text-center py-8\">\n                            <p className=\"text-muted-foreground\">No risks found.</p>\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        filteredRisks?.map((risk) => (\n                          <TableRow \n                            key={risk.id} \n                            className=\"cursor-pointer hover:bg-muted/50\"\n                            onClick={() => handleRiskClick(risk)}\n                          >\n                            <TableCell>\n                              <div className=\"font-medium\">{risk.title}</div>\n                              <div className=\"text-sm text-muted-foreground truncate max-w-[250px]\">\n                                {risk.description}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{risk.category}</Badge>\n                            </TableCell>\n                            <TableCell>{risk.likelihood}</TableCell>\n                            <TableCell>{risk.impact}</TableCell>\n                            <TableCell>\n                              <span className={cn(\"font-semibold\", riskLevelColor(risk.inherentRiskLevel))}>\n                                {risk.inherentRiskLevel}\n                              </span>\n                            </TableCell>\n                            <TableCell>\n                              <span className={cn(\"font-semibold\", riskLevelColor(risk.residualRiskLevel))}>\n                                {risk.residualRiskLevel || 'Not assessed'}\n                              </span>\n                            </TableCell>\n                            <TableCell>\n                              {risk.isAccepted ? (\n                                <Badge variant=\"outline\" className=\"border-green-500 text-green-500\">\n                                  <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                                  Accepted\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\">\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  Open\n                                </Badge>\n                              )}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"high\" className=\"m-0\">\n                <div className=\"border rounded-md\">\n                  <Table>\n                    {/* Same table structure as the \"all\" tab */}\n                    {/* This is just a different filter of the same data */}\n                  </Table>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"medium\" className=\"m-0\">\n                <div className=\"border rounded-md\">\n                  <Table>\n                    {/* Same table structure as the \"all\" tab */}\n                  </Table>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"low\" className=\"m-0\">\n                <div className=\"border rounded-md\">\n                  <Table>\n                    {/* Same table structure as the \"all\" tab */}\n                  </Table>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"accepted\" className=\"m-0\">\n                <div className=\"border rounded-md\">\n                  <Table>\n                    {/* Same table structure as the \"all\" tab */}\n                  </Table>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Create Risk Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add New Risk</DialogTitle>\n            <DialogDescription>\n              Enter the details of the new risk to add to the register\n            </DialogDescription>\n          </DialogHeader>\n          <RiskEntryForm \n            onSuccess={handleCreateSuccess} \n            companyId={1} // Replace with actual company ID\n          />\n        </DialogContent>\n      </Dialog>\n      \n      {/* Edit Risk Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Risk</DialogTitle>\n            <DialogDescription>\n              Update the details of this risk\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRisk && (\n            <RiskEntryForm \n              initialData={selectedRisk}\n              onSuccess={handleEditSuccess}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      {/* Bulk Import Dialog */}\n      <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Bulk Import Risks</DialogTitle>\n            <DialogDescription>\n              Import multiple risks at once using JSON or file upload\n            </DialogDescription>\n          </DialogHeader>\n          <RiskBulkImport \n            onSuccess={handleImportSuccess}\n            companyId={1} // Replace with actual company ID\n          />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":17295},"client/src/pages/risk-prediction-page.tsx":{"content":"import { useState } from \"react\";\nimport { useClerk } from \"@clerk/clerk-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, AlertTriangle, CheckCircle, ArrowRight, BarChart4, FileText, ShieldAlert } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport DashboardLayout from \"@/components/layout/dashboard-layout\";\nimport RadarChart from \"@/components/charts/radar-chart\";\nimport HeatMap from \"@/components/charts/heat-map\";\n\nconst RiskPredictionPage = () => {\n  const { toast } = useToast();\n  const { user } = useClerk();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n\n  // Define the type for the dashboard data\n  interface RiskDashboardData {\n    risk_score: number;\n    compliance_level: string;\n    last_assessment_date?: string;\n    assessment_name?: string;\n    framework?: number;\n    high_risk_domains?: string[];\n    critical_recommendations?: string[];\n    risk_summary?: string;\n    domain_risk_distribution?: {\n      high: number;\n      medium: number;\n      low: number;\n    };\n    historical_data?: Array<{\n      date: string;\n      score: number;\n      status: string;\n    }>;\n  }\n\n  // Query to fetch risk prediction dashboard data\n  const { \n    data: dashboardData, \n    isLoading: isDashboardLoading,\n    isError: isDashboardError\n  } = useQuery<RiskDashboardData>({\n    queryKey: [\"/api/risk-prediction/dashboard\"],\n    enabled: !!user,\n  });\n\n  // Handle setting the badge color based on compliance level\n  const getComplianceBadgeColor = (level: string) => {\n    switch (level) {\n      case \"High\":\n        return \"bg-green-500 hover:bg-green-600\";\n      case \"Medium\":\n        return \"bg-yellow-500 hover:bg-yellow-600\";\n      case \"Low\":\n        return \"bg-red-500 hover:bg-red-600\";\n      default:\n        return \"bg-slate-500 hover:bg-slate-600\";\n    }\n  };\n\n  // Handle setting the risk score color\n  const getRiskScoreColor = (score: number) => {\n    if (score >= 0 && score <= 3) {\n      return \"text-green-500\";\n    } else if (score > 3 && score <= 6) {\n      return \"text-yellow-500\";\n    } else {\n      return \"text-red-500\";\n    }\n  };\n\n  // Generate radar chart data from dashboard data if available\n  const generateRadarChartData = () => {\n    if (!dashboardData || !dashboardData.domain_risk_distribution) {\n      return null;\n    }\n\n    // This is a dummy implementation - in a real app, you'd transform domain risk data\n    // into a format suitable for the radar chart\n    return {\n      labels: ['Access Control', 'Data Protection', 'Network Security', 'Physical Security', 'System Management'],\n      datasets: [\n        {\n          label: 'Risk Level',\n          data: [\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100\n          ],\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1,\n        },\n      ],\n    };\n  };\n\n  // Generate heatmap data for the compliance score by domain\n  const generateHeatMapData = () => {\n    if (!dashboardData) {\n      return null;\n    }\n\n    // This is a dummy implementation - in a real app, you'd transform domain risk data\n    // into a format suitable for the heatmap\n    return {\n      data: [\n        { x: 'Domain 1', y: 'Control 1.1', value: Math.random() * 100 },\n        { x: 'Domain 1', y: 'Control 1.2', value: Math.random() * 100 },\n        { x: 'Domain 2', y: 'Control 2.1', value: Math.random() * 100 },\n        { x: 'Domain 2', y: 'Control 2.2', value: Math.random() * 100 },\n        { x: 'Domain 3', y: 'Control 3.1', value: Math.random() * 100 },\n      ]\n    };\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"container p-6 mx-auto\">\n        <div className=\"flex flex-col space-y-6\">\n          <div className=\"flex flex-col md:flex-row justify-between md:items-center space-y-4 md:space-y-0\">\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\">AI-Powered Risk Prediction</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Advanced analytics and risk insights powered by artificial intelligence\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Link href=\"/assessments\">\n                <Button variant=\"outline\" className=\"flex items-center gap-2\">\n                  <ArrowRight className=\"h-4 w-4\" />\n                  View Assessments\n                </Button>\n              </Link>\n              <Link href=\"/reports\">\n                <Button variant=\"outline\" className=\"flex items-center gap-2\">\n                  <FileText className=\"h-4 w-4\" />\n                  View Reports\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"dashboard\" value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid grid-cols-3 w-full max-w-lg\">\n              <TabsTrigger value=\"dashboard\" className=\"flex items-center gap-2\">\n                <BarChart4 className=\"h-4 w-4\" />\n                Risk Dashboard\n              </TabsTrigger>\n              <TabsTrigger value=\"remediation\" className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4\" />\n                Remediation Plans\n              </TabsTrigger>\n              <TabsTrigger value=\"analysis\" className=\"flex items-center gap-2\">\n                <ShieldAlert className=\"h-4 w-4\" />\n                Gap Analysis\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Dashboard Tab */}\n            <TabsContent value=\"dashboard\" className=\"mt-6\">\n              {isDashboardLoading ? (\n                <div className=\"flex justify-center items-center h-64\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                </div>\n              ) : isDashboardError ? (\n                <Alert variant=\"destructive\" className=\"mb-6\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertTitle>Error</AlertTitle>\n                  <AlertDescription>\n                    Failed to load risk dashboard data. Please try again later.\n                  </AlertDescription>\n                </Alert>\n              ) : !dashboardData ? (\n                <Alert className=\"mb-6\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertTitle>No Data Available</AlertTitle>\n                  <AlertDescription>\n                    Complete an assessment to generate risk prediction insights.\n                  </AlertDescription>\n                </Alert>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {/* Overall Risk Card */}\n                  <Card className=\"col-span-1 md:col-span-2 lg:col-span-1\">\n                    <CardHeader>\n                      <CardTitle>Overall Risk Score</CardTitle>\n                      <CardDescription>Based on your latest assessment</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex flex-col items-center justify-center space-y-4 h-32\">\n                        <div className={`text-6xl font-bold ${getRiskScoreColor(dashboardData.risk_score)}`}>\n                          {dashboardData.risk_score.toFixed(1)}\n                        </div>\n                        <Badge className={getComplianceBadgeColor(dashboardData.compliance_level)}>\n                          {dashboardData.compliance_level} Compliance\n                        </Badge>\n                      </div>\n                      <Progress \n                        value={dashboardData.risk_score * 10} \n                        className={`h-2 mt-4 ${\n                          dashboardData.risk_score <= 3 \n                            ? \"bg-green-500/20\" \n                            : dashboardData.risk_score <= 6 \n                              ? \"bg-yellow-500/20\" \n                              : \"bg-red-500/20\"\n                        }`}\n                      />\n                      <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                        <span>Low Risk</span>\n                        <span>High Risk</span>\n                      </div>\n                    </CardContent>\n                    <CardFooter>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Last assessment: {dashboardData.last_assessment_date \n                          ? new Date(dashboardData.last_assessment_date).toLocaleDateString()\n                          : \"N/A\"}\n                      </p>\n                    </CardFooter>\n                  </Card>\n\n                  {/* Risk Summary Card */}\n                  <Card className=\"col-span-1 md:col-span-2\">\n                    <CardHeader>\n                      <CardTitle>Risk Summary</CardTitle>\n                      <CardDescription>AI-generated analysis of your security posture</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm\">\n                        {dashboardData.risk_summary || \"No risk summary available.\"}\n                      </p>\n                      \n                      {dashboardData.high_risk_domains && dashboardData.high_risk_domains.length > 0 && (\n                        <div className=\"mt-4\">\n                          <h4 className=\"font-medium mb-2\">High Risk Domains</h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {dashboardData.high_risk_domains.map((domain: string, index: number) => (\n                              <Badge key={index} variant=\"destructive\">\n                                {domain}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Critical Recommendations Card */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Critical Recommendations</CardTitle>\n                      <CardDescription>Top priorities for risk mitigation</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {dashboardData.critical_recommendations && dashboardData.critical_recommendations.length > 0 ? (\n                        <ul className=\"space-y-2\">\n                          {dashboardData.critical_recommendations.map((recommendation: string, index: number) => (\n                            <li key={index} className=\"flex items-start\">\n                              <AlertTriangle className=\"h-4 w-4 text-amber-500 mr-2 mt-0.5 flex-shrink-0\" />\n                              <span className=\"text-sm\">{recommendation}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      ) : (\n                        <p className=\"text-sm text-muted-foreground\">No critical recommendations available.</p>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Risk Distribution Card */}\n                  <Card className=\"col-span-1 md:col-span-3\">\n                    <CardHeader>\n                      <CardTitle>Risk Distribution</CardTitle>\n                      <CardDescription>Risk levels across security domains</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"flex flex-col md:flex-row gap-8\">\n                      <div className=\"w-full md:w-1/2 h-60\">\n                        {generateRadarChartData() && (\n                          <RadarChart data={generateRadarChartData() as { \n                            labels: string[]; \n                            datasets: { \n                              label: string; \n                              data: number[]; \n                              backgroundColor: string; \n                              borderColor: string; \n                              borderWidth: number; \n                            }[] \n                          }} />\n                        )}\n                      </div>\n                      <div className=\"w-full md:w-1/2 h-60\">\n                        {generateHeatMapData() && (\n                          <HeatMap data={generateHeatMapData()?.data || []} />\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </TabsContent>\n\n            {/* Remediation Plans Tab */}\n            <TabsContent value=\"remediation\" className=\"mt-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>AI-Generated Remediation Plans</CardTitle>\n                  <CardDescription>\n                    Select an assessment to generate detailed remediation recommendations\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col items-center justify-center py-12\">\n                    <div className=\"text-center\">\n                      <p className=\"mb-4 text-muted-foreground\">\n                        This feature will be available soon. You'll be able to select an assessment and generate \n                        customized remediation plans based on your compliance gaps.\n                      </p>\n                      <Button variant=\"outline\" disabled>\n                        Generate Remediation Plan\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Gap Analysis Tab */}\n            <TabsContent value=\"analysis\" className=\"mt-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Control Gap Analysis</CardTitle>\n                  <CardDescription>\n                    Select a control to analyze implementation gaps\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col items-center justify-center py-12\">\n                    <div className=\"text-center\">\n                      <p className=\"mb-4 text-muted-foreground\">\n                        This feature will be available soon. You'll be able to select a specific control\n                        and receive detailed analysis of implementation gaps.\n                      </p>\n                      <Button variant=\"outline\" disabled>\n                        Analyze Control\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n};\n\nexport default RiskPredictionPage;","size_bytes":15591},"client/src/pages/sama-framework-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Info, CheckCircle2, AlertCircle, XCircle, HelpCircle } from \"lucide-react\";\nimport { Framework, Domain, Control } from \"@shared/schema\";\nimport DashboardLayout from \"@/components/layout/dashboard-layout\";\nimport { Progress } from \"@/components/ui/progress\";\n\n// Component for displaying SAMA maturity levels\nconst MaturityLevel = ({ level }: { level: string }) => {\n  const getMaturityColor = (level: string) => {\n    switch (level) {\n      case \"baseline\": return \"bg-gray-200 text-gray-800\";\n      case \"evolving\": return \"bg-blue-200 text-blue-800\";\n      case \"established\": return \"bg-green-200 text-green-800\";\n      case \"predictable\": return \"bg-purple-200 text-purple-800\";\n      case \"leading\": return \"bg-amber-200 text-amber-800\";\n      default: return \"bg-gray-200 text-gray-800\";\n    }\n  };\n\n  return (\n    <Badge className={`${getMaturityColor(level)} rounded-md px-2 py-1`}>\n      {level.charAt(0).toUpperCase() + level.slice(1)}\n    </Badge>\n  );\n};\n\n// Component for displaying controls for a specific domain\nconst DomainControls = ({ domainId }: { domainId: number }) => {\n  const { toast } = useToast();\n  \n  const { data: controls, isLoading, error } = useQuery({\n    queryKey: ['/api/controls', domainId],\n    queryFn: async () => {\n      const response = await fetch(`/api/controls?domainId=${domainId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch domain controls');\n      }\n      return response.json();\n    }\n  });\n\n  // Display error message if query fails\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to load controls: ${error.message}`,\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {[1, 2, 3, 4, 5].map((index) => (\n          <Card key={index} className=\"border border-border/40\">\n            <CardHeader className=\"pb-3\">\n              <Skeleton className=\"h-4 w-1/3\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </CardHeader>\n            <CardContent>\n              <Skeleton className=\"h-20 w-full\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const getMaturityLevelFromScore = (score: number) => {\n    switch (score) {\n      case 1: return \"baseline\";\n      case 2: return \"evolving\";\n      case 3: return \"established\";\n      case 4: return \"predictable\";\n      case 5: return \"leading\";\n      default: return \"baseline\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {controls?.map((control: Control) => {\n        // Extract SAMA specific properties from frameworKSpecific JSON\n        const samaMaturityLevel = control.frameworkSpecific ? \n          (control.frameworkSpecific as any).samaMaturityLevel || \"baseline\" : \n          getMaturityLevelFromScore(control.maturityLevel || 1);\n          \n        const samaDescription = control.frameworkSpecific ? \n          (control.frameworkSpecific as any).samaMaturityDescription || \"\" : \n          \"\";\n          \n        const assessmentCriteria = control.frameworkSpecific ? \n          (control.frameworkSpecific as any).assessmentCriteria || [] : \n          [];\n          \n        return (\n          <Card key={control.id} className=\"border border-border/40\">\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    {control.controlId}: {control.name}\n                  </CardTitle>\n                  <CardDescription>{control.description}</CardDescription>\n                </div>\n                <MaturityLevel level={samaMaturityLevel} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-sm mb-1 flex items-center gap-1\">\n                    <Info className=\"h-4 w-4\" /> Maturity Description\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">{samaDescription}</p>\n                </div>\n                \n                {assessmentCriteria.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-1\">Assessment Criteria</h4>\n                    <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                      {assessmentCriteria.map((criteria: string, index: number) => (\n                        <li key={index}>{criteria}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                <div className=\"mt-2\">\n                  <h4 className=\"font-medium text-sm mb-1\">Maturity Progress</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span>Baseline</span>\n                      <span>Leading</span>\n                    </div>\n                    <Progress \n                      value={(control.maturityLevel || 1) * 20} \n                      className=\"h-2\" \n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end pt-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    Start Assessment\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function SAMAFrameworkPage() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<string>(\"\");\n  \n  // Fetch the SAMA framework\n  const { data: samaFramework, isLoading: frameworkLoading } = useQuery({\n    queryKey: ['/api/frameworks/sama'],\n    queryFn: async () => {\n      const response = await fetch(`/api/frameworks?name=SAMA Cyber Security Framework`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch SAMA framework');\n      }\n      const frameworks = await response.json();\n      return frameworks[0];\n    }\n  });\n  \n  // Fetch domains for the SAMA framework\n  const { data: domains, isLoading: domainsLoading, error } = useQuery({\n    queryKey: ['/api/domains', samaFramework?.id],\n    queryFn: async () => {\n      if (!samaFramework?.id) return [];\n      const response = await fetch(`/api/domains?frameworkId=${samaFramework.id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch framework domains');\n      }\n      return response.json();\n    },\n    enabled: !!samaFramework?.id\n  });\n  \n  // Set active tab when domains are loaded\n  useEffect(() => {\n    if (domains && domains.length > 0 && !activeTab) {\n      setActiveTab(domains[0].id.toString());\n    }\n  }, [domains, activeTab]);\n  \n  // Display error message if query fails\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to load SAMA framework data: ${error.message}`,\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n  \n  const isLoading = frameworkLoading || domainsLoading;\n  \n  return (\n    <DashboardLayout>\n      <div className=\"container py-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\">SAMA Cyber Security Framework</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Assessment based on the Saudi Central Bank (SAMA) Cyber Security Framework\n          </p>\n        </div>\n        \n        <Card className=\"mb-6\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle>About the SAMA Framework</CardTitle>\n            <CardDescription>\n              The SAMA Cyber Security Framework provides a maturity-based approach to cybersecurity assessment.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p>\n                SAMA's framework uses a maturity model with five levels to assess cybersecurity capabilities:\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-2\">\n                <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-md\">\n                  <h3 className=\"font-medium mb-1\">Baseline</h3>\n                  <p className=\"text-sm text-muted-foreground\">Basic controls with minimal implementation</p>\n                </div>\n                <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-md\">\n                  <h3 className=\"font-medium mb-1\">Evolving</h3>\n                  <p className=\"text-sm text-muted-foreground\">Controls are documented but not fully consistent</p>\n                </div>\n                <div className=\"p-3 bg-green-50 dark:bg-green-950 rounded-md\">\n                  <h3 className=\"font-medium mb-1\">Established</h3>\n                  <p className=\"text-sm text-muted-foreground\">Well-defined and consistently implemented</p>\n                </div>\n                <div className=\"p-3 bg-purple-50 dark:bg-purple-950 rounded-md\">\n                  <h3 className=\"font-medium mb-1\">Predictable</h3>\n                  <p className=\"text-sm text-muted-foreground\">Measured and managed with quantitative data</p>\n                </div>\n                <div className=\"p-3 bg-amber-50 dark:bg-amber-950 rounded-md\">\n                  <h3 className=\"font-medium mb-1\">Leading</h3>\n                  <p className=\"text-sm text-muted-foreground\">Optimized with continuous improvement</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {isLoading ? (\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-10 w-full rounded-md\" />\n            <Skeleton className=\"h-[500px] w-full rounded-md\" />\n          </div>\n        ) : (\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 w-full\">\n              {domains?.map((domain: Domain) => (\n                <TabsTrigger key={domain.id} value={domain.id.toString()}>\n                  {domain.displayName}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n            \n            {domains?.map((domain: Domain) => (\n              <TabsContent key={domain.id} value={domain.id.toString()} className=\"pt-4\">\n                <div className=\"mb-4\">\n                  <h2 className=\"text-xl font-semibold\">{domain.displayName}</h2>\n                  <p className=\"text-muted-foreground\">{domain.description}</p>\n                </div>\n                <DomainControls domainId={domain.id} />\n              </TabsContent>\n            ))}\n          </Tabs>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":11320},"client/src/pages/security-progress-page.tsx":{"content":"import { SecurityTimeline } from \"@/components/progress/security-timeline\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, Award, Calendar, BookOpen, Star } from \"lucide-react\";\n\nexport default function SecurityProgressPage() {\n  return (\n    <>\n      <Helmet>\n        <title>Security Journey Progress | MetaWorks</title>\n      </Helmet>\n\n      <div className=\"container py-6 space-y-6\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-3xl font-bold\">Security Journey Progress</h1>\n          <p className=\"text-muted-foreground\">\n            Track your cybersecurity compliance journey and progress\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"col-span-1\">\n            <CardContent className=\"p-4 flex flex-col items-center justify-center h-full\">\n              <div className=\"rounded-full bg-primary/10 p-4 mb-3\">\n                <TrendingUp className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div className=\"text-4xl font-bold\">56%</div>\n              <div className=\"text-sm text-muted-foreground text-center\">Overall Compliance</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"col-span-1\">\n            <CardContent className=\"p-4 flex flex-col items-center justify-center h-full\">\n              <div className=\"rounded-full bg-green-100 p-4 mb-3\">\n                <Award className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <div className=\"text-4xl font-bold\">3</div>\n              <div className=\"text-sm text-muted-foreground text-center\">Badges Earned</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"col-span-1\">\n            <CardContent className=\"p-4 flex flex-col items-center justify-center h-full\">\n              <div className=\"rounded-full bg-blue-100 p-4 mb-3\">\n                <BookOpen className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <div className=\"text-4xl font-bold\">12</div>\n              <div className=\"text-sm text-muted-foreground text-center\">Completed Steps</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"col-span-1\">\n            <CardContent className=\"p-4 flex flex-col items-center justify-center h-full\">\n              <div className=\"rounded-full bg-amber-100 p-4 mb-3\">\n                <Star className=\"h-8 w-8 text-amber-500\" />\n              </div>\n              <div className=\"text-4xl font-bold\">540</div>\n              <div className=\"text-sm text-muted-foreground text-center\">Points Earned</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"timeline\" className=\"w-full\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n            <TabsTrigger value=\"badges\">Badges & Achievements</TabsTrigger>\n            <TabsTrigger value=\"stats\">Detailed Stats</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"timeline\" className=\"mt-0\">\n            <SecurityTimeline />\n          </TabsContent>\n          \n          <TabsContent value=\"badges\" className=\"mt-0\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                  <Badge className=\"p-6 flex flex-col items-center justify-center gap-2 bg-muted\">\n                    <Award className=\"h-12 w-12\" />\n                    <div className=\"text-center\">\n                      <h3 className=\"font-medium\">Security First Steps</h3>\n                      <p className=\"text-sm text-muted-foreground\">Complete your first assessment</p>\n                    </div>\n                  </Badge>\n                  \n                  <Badge className=\"p-6 flex flex-col items-center justify-center gap-2 bg-green-100 text-green-800\">\n                    <Award className=\"h-12 w-12\" />\n                    <div className=\"text-center\">\n                      <h3 className=\"font-medium\">Risk Ranger</h3>\n                      <p className=\"text-sm text-muted-foreground\">Complete risk assessment</p>\n                    </div>\n                  </Badge>\n                  \n                  <Badge className=\"p-6 flex flex-col items-center justify-center gap-2 bg-amber-100 text-amber-800\">\n                    <Award className=\"h-12 w-12\" />\n                    <div className=\"text-center\">\n                      <h3 className=\"font-medium\">Policy Pro</h3>\n                      <p className=\"text-sm text-muted-foreground\">Develop security policies</p>\n                    </div>\n                  </Badge>\n                  \n                  <Badge className=\"p-6 flex flex-col items-center justify-center gap-2 bg-muted\">\n                    <Award className=\"h-12 w-12\" />\n                    <div className=\"text-center\">\n                      <h3 className=\"font-medium\">Compliance Champion</h3>\n                      <p className=\"text-sm text-muted-foreground\">Reach 80% compliance</p>\n                    </div>\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"stats\" className=\"mt-0\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <p className=\"text-center text-muted-foreground\">\n                  Detailed statistics will be available as you progress through your security journey.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </>\n  );\n}","size_bytes":5920},"client/src/pages/security-timeline-demo.tsx":{"content":"import React, { useState } from \"react\";\nimport { SecurityProgressTimeline, TimelineEvent } from \"@/components/timeline/security-progress-timeline\";\nimport DashboardLayout from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function SecurityTimelineDemo() {\n  // Controls for the demo\n  const [activeTab, setActiveTab] = useState<string>(\"example1\");\n  const [animationEnabled, setAnimationEnabled] = useState<boolean>(true);\n  const [showIcons, setShowIcons] = useState<boolean>(true);\n  const [isCompact, setIsCompact] = useState<boolean>(false);\n  const [visibleCount, setVisibleCount] = useState<number>(5);\n  \n  // Sample data for the timeline\n  const securityMilestones: TimelineEvent[] = [\n    {\n      id: 1,\n      title: \"SAMA Framework Assessment Completed\",\n      description: \"Successfully completed the SAMA cybersecurity framework assessment with a high score.\",\n      date: \"2025-03-25\",\n      type: \"assessment\",\n      status: \"completed\",\n      frameworkName: \"SAMA Framework\",\n      score: 85\n    },\n    {\n      id: 2,\n      title: \"Security Policies Updated\",\n      description: \"Updated all security policies to align with the latest compliance requirements.\",\n      date: \"2025-03-15\",\n      type: \"milestone\",\n      status: \"completed\"\n    },\n    {\n      id: 3,\n      title: \"NCA ECC Assessment In Progress\",\n      description: \"Started assessment against the NCA Essential Cybersecurity Controls framework.\",\n      date: \"2025-04-01\",\n      type: \"assessment\",\n      status: \"in-progress\",\n      frameworkName: \"NCA ECC\",\n      score: 42\n    },\n    {\n      id: 4,\n      title: \"Critical Vulnerability Detected\",\n      description: \"A critical vulnerability was detected in the authentication system. Remediation in progress.\",\n      date: \"2025-02-28\",\n      type: \"risk\",\n      status: \"in-progress\"\n    },\n    {\n      id: 5,\n      title: \"Security Awareness Training\",\n      description: \"Conducted organization-wide security awareness training for all employees.\",\n      date: \"2025-02-15\",\n      type: \"improvement\",\n      status: \"completed\"\n    },\n    {\n      id: 6,\n      title: \"ISO 27001 Certification\",\n      description: \"Planned ISO 27001 certification assessment and preparation.\",\n      date: \"2025-05-15\",\n      type: \"compliance\",\n      status: \"planned\"\n    },\n    {\n      id: 7,\n      title: \"Penetration Testing\",\n      description: \"Conducted external penetration testing to identify vulnerabilities.\",\n      date: \"2025-01-20\",\n      type: \"assessment\",\n      status: \"completed\",\n      score: 72\n    },\n    {\n      id: 8,\n      title: \"Compliance Audit Overdue\",\n      description: \"Quarterly compliance audit is overdue and needs to be scheduled.\",\n      date: \"2025-03-31\",\n      type: \"compliance\",\n      status: \"overdue\"\n    }\n  ];\n  \n  // Example set focused on assessment events\n  const assessmentEvents = securityMilestones.filter(\n    event => event.type === 'assessment'\n  );\n  \n  // Example set focused on high priority items (risks and overdue items)\n  const highPriorityEvents = securityMilestones.filter(\n    event => event.type === 'risk' || event.status === 'overdue'\n  );\n  \n  return (\n    <DashboardLayout>\n      <div className=\"container py-6 space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Security Progress Timeline</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Interactive timeline showing security milestones, assessments, and progress\n          </p>\n        </div>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Timeline Configuration</CardTitle>\n            <CardDescription>\n              Adjust settings to customize the timeline display\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"animation-toggle\">Animation</Label>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Enable animation effects</span>\n                  <Switch \n                    id=\"animation-toggle\"\n                    checked={animationEnabled} \n                    onCheckedChange={setAnimationEnabled} \n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"icons-toggle\">Show Icons</Label>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Display event type icons</span>\n                  <Switch \n                    id=\"icons-toggle\"\n                    checked={showIcons} \n                    onCheckedChange={setShowIcons} \n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"compact-toggle\">Compact Mode</Label>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Use minimalist display</span>\n                  <Switch \n                    id=\"compact-toggle\"\n                    checked={isCompact} \n                    onCheckedChange={setIsCompact} \n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"visible-count\">Visible Events</Label>\n                <Select \n                  value={visibleCount.toString()} \n                  onValueChange={(val) => setVisibleCount(parseInt(val))}\n                >\n                  <SelectTrigger id=\"visible-count\">\n                    <SelectValue placeholder=\"Number of visible events\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"3\">3 events</SelectItem>\n                    <SelectItem value=\"5\">5 events</SelectItem>\n                    <SelectItem value=\"8\">All events</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid grid-cols-3 w-full max-w-md\">\n            <TabsTrigger value=\"example1\">All Events</TabsTrigger>\n            <TabsTrigger value=\"example2\">Assessments</TabsTrigger>\n            <TabsTrigger value=\"example3\">High Priority</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"example1\" className=\"pt-6\">\n            <SecurityProgressTimeline \n              events={securityMilestones}\n              maxVisible={visibleCount}\n              showIcons={showIcons}\n              compact={isCompact}\n              animate={animationEnabled}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"example2\" className=\"pt-6\">\n            <SecurityProgressTimeline \n              events={assessmentEvents}\n              maxVisible={visibleCount}\n              showIcons={showIcons}\n              compact={isCompact}\n              animate={animationEnabled}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"example3\" className=\"pt-6\">\n            <SecurityProgressTimeline \n              events={highPriorityEvents}\n              maxVisible={visibleCount}\n              showIcons={showIcons}\n              compact={isCompact}\n              animate={animationEnabled}\n            />\n          </TabsContent>\n        </Tabs>\n        \n        <Separator className=\"my-8\" />\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Compact Timeline View</CardTitle>\n            <CardDescription>\n              Space-efficient timeline variant for sidebar or dashboard widgets\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <SecurityProgressTimeline \n              events={securityMilestones.slice(0, 4)}\n              maxVisible={4}\n              compact={true}\n              animate={animationEnabled}\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":8687},"client/src/pages/shared-report-page.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation, useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ComplianceReport } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  PieChart, \n  Pie, \n  Cell, \n  ResponsiveContainer, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend \n} from 'recharts';\nimport { \n  Download, \n  Loader2, \n  FileText, \n  Shield, \n  AlertTriangle, \n  CheckCircle, \n  XCircle, \n  HelpCircle, \n  ArrowLeft\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst colors = {\n  implemented: \"#10b981\",\n  partially_implemented: \"#f59e0b\",\n  not_implemented: \"#ef4444\",\n  not_applicable: \"#6b7280\",\n};\n\nconst statusLabels = {\n  implemented: \"Implemented\",\n  partially_implemented: \"Partially Implemented\",\n  not_implemented: \"Not Implemented\",\n  not_applicable: \"Not Applicable\",\n};\n\nconst riskColors = {\n  low: \"#10b981\",\n  medium: \"#f59e0b\",\n  high: \"#ef4444\",\n};\n\nexport default function SharedReportPage() {\n  const [match, params] = useRoute<{ token: string }>(\"/shared-report/:token\");\n  const { token } = params || {};\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location[0].split(\"?\")[1] || \"\");\n  const providedPassword = searchParams.get(\"password\") || \"\";\n  \n  const [password, setPassword] = useState(providedPassword);\n  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { \n    data: report, \n    isLoading, \n    error,\n    refetch \n  } = useQuery<ComplianceReport>({\n    queryKey: [\"/api/reports/share\", token, password],\n    queryFn: async () => {\n      const url = `/api/reports/share/${token}${password ? `?password=${password}` : \"\"}`;\n      const res = await fetch(url);\n      \n      if (res.status === 401) {\n        setIsPasswordDialogOpen(true);\n        throw new Error(\"password_required\");\n      }\n      \n      if (!res.ok) {\n        throw new Error(await res.text());\n      }\n      \n      return res.json();\n    },\n    retry: false,\n  });\n\n  function handlePasswordSubmit() {\n    setIsPasswordDialogOpen(false);\n    refetch();\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container max-w-7xl flex items-center justify-center min-h-[calc(100vh-200px)]\">\n        <div className=\"flex flex-col items-center gap-2\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n          <h2 className=\"text-xl font-semibold\">Loading Report...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && (error as Error).message !== \"password_required\") {\n    return (\n      <div className=\"container max-w-7xl flex items-center justify-center min-h-[calc(100vh-200px)]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-6 w-6 text-destructive\" />\n              Error Loading Report\n            </CardTitle>\n            <CardDescription>\n              There was an error loading this shared report.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-destructive\">{(error as Error).message}</p>\n            <Button variant=\"outline\" className=\"mt-4 w-full\" asChild>\n              <a href=\"/\">Return to Homepage</a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!report && !isLoading) {\n    return null; // Password dialog will be shown via AlertDialog\n  }\n\n  const reportData = report?.reportData as any;\n  if (!reportData) {\n    return (\n      <div className=\"container max-w-7xl flex items-center justify-center min-h-[calc(100vh-200px)]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-6 w-6 text-destructive\" />\n              Invalid Report\n            </CardTitle>\n            <CardDescription>\n              This report does not contain valid data.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button variant=\"outline\" className=\"mt-4 w-full\" asChild>\n              <a href=\"/\">Return to Homepage</a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Create data for the summary pie chart\n  const summaryPieData = [\n    { name: \"Implemented\", value: reportData.summary.implementedControls, color: colors.implemented },\n    { name: \"Partially Implemented\", value: reportData.summary.partiallyImplementedControls, color: colors.partially_implemented },\n    { name: \"Not Implemented\", value: reportData.summary.notImplementedControls, color: colors.not_implemented },\n    { name: \"Not Applicable\", value: reportData.summary.notApplicableControls, color: colors.not_applicable },\n  ];\n\n  // Create data for the domain risk levels bar chart\n  const domainRiskData = reportData.domainRiskLevels.map((domain: any) => ({\n    name: domain.displayName || domain.domainName,\n    score: Math.round(domain.complianceScore),\n    riskLevel: domain.riskLevel,\n  }));\n\n  return (\n    <>\n      <div className=\"container max-w-7xl py-6\">\n        <Button variant=\"ghost\" className=\"mb-4\" asChild>\n          <a href=\"/\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </a>\n        </Button>\n        \n        {/* Report Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold\">{report?.title || \"Compliance Report\"}</h1>\n          <p className=\"text-muted-foreground\">{report?.summary || \"\"}</p>\n          \n          <div className=\"mt-4 flex flex-wrap gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Download Report\n            </Button>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <FileText className=\"h-4 w-4\" />\n              Generated: {report?.createdAt ? new Date(report.createdAt).toLocaleDateString() : \"N/A\"}\n            </div>\n          </div>\n        </div>\n        \n        {/* Report Content */}\n        <div className=\"space-y-8\">\n          {/* Summary Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-primary\" />\n                {reportData.framework.displayName} Compliance Summary\n              </CardTitle>\n              <CardDescription>\n                Overall compliance status and summary metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">Compliance Score</span>\n                      <span className=\"font-bold text-2xl\">{Math.round(reportData.summary.complianceScore)}%</span>\n                    </div>\n                    <div className=\"h-2.5 w-full rounded-full bg-slate-200\">\n                      <div\n                        className=\"h-2.5 rounded-full\"\n                        style={{\n                          width: `${reportData.summary.complianceScore}%`,\n                          backgroundColor: \n                            reportData.summary.complianceScore >= 80 ? riskColors.low :\n                            reportData.summary.complianceScore >= 50 ? riskColors.medium :\n                            riskColors.high\n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-md border p-4\">\n                    <h3 className=\"font-medium\">Compliance Status</h3>\n                    <div className=\"mt-2 flex items-center gap-2\">\n                      {reportData.summary.complianceScore >= 80 ? (\n                        <>\n                          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                          <span className=\"font-medium text-green-600\">\n                            Compliant\n                          </span>\n                        </>\n                      ) : (\n                        <>\n                          <XCircle className=\"h-5 w-5 text-red-500\" />\n                          <span className=\"font-medium text-red-600\">\n                            Non-Compliant\n                          </span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-md border p-4\">\n                    <h3 className=\"font-medium\">Risk Level</h3>\n                    <div className=\"mt-2 flex items-center gap-2\">\n                      {reportData.summary.riskLevel === \"Low\" && (\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"h-3 w-3 rounded-full bg-green-500\"></div>\n                          <span className=\"font-medium text-green-600\">Low Risk</span>\n                        </div>\n                      )}\n                      {reportData.summary.riskLevel === \"Medium\" && (\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"h-3 w-3 rounded-full bg-amber-500\"></div>\n                          <span className=\"font-medium text-amber-600\">Medium Risk</span>\n                        </div>\n                      )}\n                      {reportData.summary.riskLevel === \"High\" && (\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"h-3 w-3 rounded-full bg-red-500\"></div>\n                          <span className=\"font-medium text-red-600\">High Risk</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"rounded-md border p-3 text-center\">\n                      <div className=\"text-2xl font-bold\">{reportData.summary.totalControls}</div>\n                      <div className=\"text-sm text-muted-foreground\">Total Controls</div>\n                    </div>\n                    <div className=\"rounded-md border p-3 text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {reportData.summary.implementedControls}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Implemented</div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-col items-center justify-center h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={summaryPieData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, percent }) => \n                          percent > 0 ? `${name} ${(percent * 100).toFixed(0)}%` : ''\n                        }\n                      >\n                        {summaryPieData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Domain Risk Levels */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Domain Risk Levels</CardTitle>\n              <CardDescription>\n                Compliance scores and risk levels by domain\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={domainRiskData}\n                    margin={{\n                      top: 5,\n                      right: 30,\n                      left: 20,\n                      bottom: 5,\n                    }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis label={{ value: 'Compliance Score (%)', angle: -90, position: 'insideLeft' }} />\n                    <Tooltip \n                      formatter={(value, name, props) => [`${value}%`, 'Compliance Score']}\n                      labelFormatter={(label) => `Domain: ${label}`}\n                    />\n                    <Legend />\n                    <Bar \n                      dataKey=\"score\" \n                      name=\"Compliance Score\" \n                      fill=\"#4f46e5\"\n                      radius={[4, 4, 0, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"mt-6 space-y-2\">\n                <h3 className=\"font-medium\">Domain Risk Breakdown</h3>\n                <div className=\"grid gap-2 sm:grid-cols-2 lg:grid-cols-3\">\n                  {reportData.domainRiskLevels.map((domain: any) => (\n                    <div \n                      key={domain.domainId} \n                      className=\"rounded-md border p-3\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{domain.displayName || domain.domainName}</span>\n                        <div \n                          className=\"h-3 w-3 rounded-full\" \n                          style={{ \n                            backgroundColor: \n                              domain.riskLevel === \"low\" ? riskColors.low :\n                              domain.riskLevel === \"medium\" ? riskColors.medium :\n                              riskColors.high\n                          }}\n                        ></div>\n                      </div>\n                      <div className=\"mt-2 text-sm text-muted-foreground\">\n                        {Math.round(domain.complianceScore)}% Compliant\n                      </div>\n                      <div className=\"mt-1 text-xs text-muted-foreground\">\n                        {domain.implementedControls} of {domain.totalControls} controls implemented\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Detailed Results */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Control Assessment Results</CardTitle>\n              <CardDescription>\n                Detailed results for each control\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"all\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"all\">All</TabsTrigger>\n                  <TabsTrigger value=\"notImplemented\">Not Implemented</TabsTrigger>\n                  <TabsTrigger value=\"partiallyImplemented\">Partial</TabsTrigger>\n                  <TabsTrigger value=\"implemented\">Implemented</TabsTrigger>\n                </TabsList>\n                \n                {/* All Controls Tab */}\n                <TabsContent value=\"all\" className=\"mt-4\">\n                  <div className=\"space-y-4\">\n                    {reportData.detailedResults.map((result: any) => (\n                      <div\n                        key={result.resultId}\n                        className=\"rounded-md border p-4\"\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"font-medium flex items-center gap-2\">\n                              {result.controlIdentifier}: {result.controlName}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Domain: {result.domainName}\n                            </p>\n                          </div>\n                          <div \n                            className=\"rounded-full px-3 py-1 text-xs font-medium\"\n                            style={{\n                              backgroundColor: \n                                result.status === \"implemented\" ? \"rgba(16, 185, 129, 0.1)\" :\n                                result.status === \"partially_implemented\" ? \"rgba(245, 158, 11, 0.1)\" :\n                                result.status === \"not_implemented\" ? \"rgba(239, 68, 68, 0.1)\" :\n                                \"rgba(107, 114, 128, 0.1)\",\n                              color:\n                                result.status === \"implemented\" ? colors.implemented :\n                                result.status === \"partially_implemented\" ? colors.partially_implemented :\n                                result.status === \"not_implemented\" ? colors.not_implemented :\n                                colors.not_applicable,\n                            }}\n                          >\n                            {statusLabels[result.status as keyof typeof statusLabels]}\n                          </div>\n                        </div>\n                        \n                        {result.evidence && (\n                          <div className=\"mt-2\">\n                            <h4 className=\"text-sm font-medium\">Evidence</h4>\n                            <p className=\"text-sm\">{result.evidence}</p>\n                          </div>\n                        )}\n                        \n                        {result.comments && (\n                          <div className=\"mt-2\">\n                            <h4 className=\"text-sm font-medium\">Comments</h4>\n                            <p className=\"text-sm\">{result.comments}</p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </TabsContent>\n                \n                {/* Not Implemented Tab */}\n                <TabsContent value=\"notImplemented\" className=\"mt-4\">\n                  <div className=\"space-y-4\">\n                    {reportData.detailedResults\n                      .filter((result: any) => result.status === \"not_implemented\")\n                      .map((result: any) => (\n                        <div\n                          key={result.resultId}\n                          className=\"rounded-md border p-4\"\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h3 className=\"font-medium flex items-center gap-2\">\n                                {result.controlIdentifier}: {result.controlName}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Domain: {result.domainName}\n                              </p>\n                            </div>\n                            <div \n                              className=\"rounded-full px-3 py-1 text-xs font-medium bg-red-50 text-red-600\"\n                            >\n                              Not Implemented\n                            </div>\n                          </div>\n                          \n                          {result.evidence && (\n                            <div className=\"mt-2\">\n                              <h4 className=\"text-sm font-medium\">Evidence</h4>\n                              <p className=\"text-sm\">{result.evidence}</p>\n                            </div>\n                          )}\n                          \n                          {result.comments && (\n                            <div className=\"mt-2\">\n                              <h4 className=\"text-sm font-medium\">Comments</h4>\n                              <p className=\"text-sm\">{result.comments}</p>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                  </div>\n                </TabsContent>\n                \n                {/* Partially Implemented Tab */}\n                <TabsContent value=\"partiallyImplemented\" className=\"mt-4\">\n                  <div className=\"space-y-4\">\n                    {reportData.detailedResults\n                      .filter((result: any) => result.status === \"partially_implemented\")\n                      .map((result: any) => (\n                        <div\n                          key={result.resultId}\n                          className=\"rounded-md border p-4\"\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h3 className=\"font-medium flex items-center gap-2\">\n                                {result.controlIdentifier}: {result.controlName}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Domain: {result.domainName}\n                              </p>\n                            </div>\n                            <div \n                              className=\"rounded-full px-3 py-1 text-xs font-medium bg-amber-50 text-amber-600\"\n                            >\n                              Partially Implemented\n                            </div>\n                          </div>\n                          \n                          {result.evidence && (\n                            <div className=\"mt-2\">\n                              <h4 className=\"text-sm font-medium\">Evidence</h4>\n                              <p className=\"text-sm\">{result.evidence}</p>\n                            </div>\n                          )}\n                          \n                          {result.comments && (\n                            <div className=\"mt-2\">\n                              <h4 className=\"text-sm font-medium\">Comments</h4>\n                              <p className=\"text-sm\">{result.comments}</p>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                  </div>\n                </TabsContent>\n                \n                {/* Implemented Tab */}\n                <TabsContent value=\"implemented\" className=\"mt-4\">\n                  <div className=\"space-y-4\">\n                    {reportData.detailedResults\n                      .filter((result: any) => result.status === \"implemented\")\n                      .map((result: any) => (\n                        <div\n                          key={result.resultId}\n                          className=\"rounded-md border p-4\"\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h3 className=\"font-medium flex items-center gap-2\">\n                                {result.controlIdentifier}: {result.controlName}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Domain: {result.domainName}\n                              </p>\n                            </div>\n                            <div \n                              className=\"rounded-full px-3 py-1 text-xs font-medium bg-green-50 text-green-600\"\n                            >\n                              Implemented\n                            </div>\n                          </div>\n                          \n                          {result.evidence && (\n                            <div className=\"mt-2\">\n                              <h4 className=\"text-sm font-medium\">Evidence</h4>\n                              <p className=\"text-sm\">{result.evidence}</p>\n                            </div>\n                          )}\n                          \n                          {result.comments && (\n                            <div className=\"mt-2\">\n                              <h4 className=\"text-sm font-medium\">Comments</h4>\n                              <p className=\"text-sm\">{result.comments}</p>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n          \n          {/* Recommendations */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recommendations</CardTitle>\n              <CardDescription>\n                Actions to improve compliance\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {reportData.recommendations.length > 0 ? (\n                  reportData.recommendations.map((rec: any, index: number) => (\n                    <div\n                      key={`${rec.controlIdentifier}-${index}`}\n                      className=\"rounded-md border p-4\"\n                    >\n                      <div className=\"flex flex-col\">\n                        <div className=\"flex items-start justify-between\">\n                          <h3 className=\"font-medium\">\n                            {rec.controlIdentifier}: {rec.controlName}\n                          </h3>\n                          <div \n                            className=\"rounded-full px-3 py-1 text-xs font-medium\"\n                            style={{\n                              backgroundColor: rec.priority === \"high\" ? \"rgba(239, 68, 68, 0.1)\" : \n                                              rec.priority === \"medium\" ? \"rgba(245, 158, 11, 0.1)\" : \n                                              \"rgba(16, 185, 129, 0.1)\",\n                              color: rec.priority === \"high\" ? \"#ef4444\" : \n                                    rec.priority === \"medium\" ? \"#f59e0b\" : \n                                    \"#10b981\"\n                            }}\n                          >\n                            {rec.priority.charAt(0).toUpperCase() + rec.priority.slice(1)} Priority\n                          </div>\n                        </div>\n                        <p className=\"mt-1 text-sm\">\n                          {rec.recommendation}\n                        </p>\n                        {rec.domainName && (\n                          <p className=\"mt-1 text-xs text-muted-foreground\">\n                            Domain: {rec.domainName}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"rounded-md border border-dashed p-8 text-center\">\n                    <h3 className=\"font-medium\">No Recommendations</h3>\n                    <p className=\"mt-2 text-sm text-muted-foreground\">\n                      All controls are properly implemented.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      {/* Password Dialog */}\n      <AlertDialog open={isPasswordDialogOpen} onOpenChange={setIsPasswordDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Password Protected Report</AlertDialogTitle>\n            <AlertDialogDescription>\n              This report is password protected. Please enter the password to view it.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handlePasswordSubmit}>\n              Access Report\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":29422},"client/src/pages/virtual-assistant-page.tsx":{"content":"import React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport VirtualAdvisor from \"@/components/virtual-assistant/virtual-advisor\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bot, Info, Users, FileText, Zap } from \"lucide-react\";\n\nexport default function VirtualAssistantPage() {\n  const { user } = useAuth();\n  \n  // Add the loadDIDAgent function directly to the window\n  useEffect(() => {\n    console.log(\"Virtual Assistant page loaded\");\n    \n    // Define the loadDIDAgent function on the window object\n    (window as any).loadDIDAgent = function() {\n      console.log(\"Loading D-ID Agent...\");\n      const container = document.getElementById('agent-container');\n      if (container && container.innerHTML === '') {\n        console.log(\"Agent container found, loading script\");\n        const script = document.createElement('script');\n        script.type = 'module';\n        script.src = 'https://agent.d-id.com/v1/index.js';\n        script.setAttribute('data-name', 'did-agent');\n        script.setAttribute('data-target', '#agent-container');\n        script.setAttribute('data-mode', 'fabio'); // Or use 'widget' for corner view\n        script.setAttribute('data-client-key', 'YXV0aDB8NjdkYmZkZmY1MmQ3MzE2OWEzM2Q5NThiOklKaldaQmlNRjJnazZtVmlSSVpUag==');\n        script.setAttribute('data-agent-id', 'agt_954OZ9Ea');\n        script.setAttribute('data-monitor', 'true');\n        container.appendChild(script);\n        container.style.display = 'block';\n      } else {\n        console.log(\"Agent container not found or not empty\");\n      }\n    };\n    \n    // Clean up function\n    return () => {\n      delete (window as any).loadDIDAgent;\n    };\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>Virtual Consultant | MetaWorks</title>\n      </Helmet>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col md:flex-row gap-6\">\n          {/* Main content */}\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold mb-6 flex items-center\">\n              <Bot className=\"mr-2 h-8 w-8 text-primary\" />\n              Virtual Compliance Consultant\n            </h1>\n            \n            <div className=\"mb-6\">\n              <p className=\"text-muted-foreground\">\n                Get instant guidance on NCA ECC compliance, security policies, and best practices \n                with our AI-powered virtual consultant. Ask questions, request guidance, or\n                generate compliance materials in real-time.\n              </p>\n            </div>\n\n            <VirtualAdvisor />\n          </div>\n\n          {/* Sidebar content */}\n          <div className=\"w-full md:w-80 space-y-4\">\n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardContent className=\"pt-6\">\n                <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                  <Info className=\"h-5 w-5 mr-2 text-primary\" />\n                  How the Assistant Works\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Our virtual consultant uses advanced AI to answer your cybersecurity compliance\n                  questions, drawing from:\n                </p>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start\">\n                    <Badge variant=\"outline\" className=\"mr-2 mt-0.5\">NCA ECC</Badge>\n                    <span>Latest Essential Cybersecurity Controls</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Badge variant=\"outline\" className=\"mr-2 mt-0.5\">POLICY</Badge>\n                    <span>Best practice policy templates and guidance</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Badge variant=\"outline\" className=\"mr-2 mt-0.5\">RISK</Badge>\n                    <span>Risk assessment methodologies and examples</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardContent className=\"pt-6\">\n                <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                  <Users className=\"h-5 w-5 mr-2 text-primary\" />\n                  Staff Assistance\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  The consultant can help your cybersecurity staff understand compliance \n                  requirements and guide implementation efforts.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardContent className=\"pt-6\">\n                <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                  <FileText className=\"h-5 w-5 mr-2 text-primary\" />\n                  Suggested Topics\n                </h3>\n                <ul className=\"space-y-1 text-sm\">\n                  <li>• NCA ECC domain explanations</li>\n                  <li>• Security policy templates</li>\n                  <li>• Compliance checklists</li>\n                  <li>• Control implementation guidance</li>\n                  <li>• Risk assessment methods</li>\n                </ul>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n              <CardContent className=\"pt-6\">\n                <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                  <Zap className=\"h-5 w-5 mr-2 text-primary\" />\n                  Quick Commands\n                </h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"bg-muted rounded-md px-3 py-1\">explain control 4-5-2</div>\n                  <div className=\"bg-muted rounded-md px-3 py-1\">generate security policy</div>\n                  <div className=\"bg-muted rounded-md px-3 py-1\">create compliance checklist</div>\n                  <div className=\"bg-muted rounded-md px-3 py-1\">risk assessment steps</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":6433},"client/src/components/admin/user-form.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\n// User form schema\nconst userFormSchema = z.object({\n  fullName: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  role: z.string().min(1, \"Please select a role\"),\n  accessLevel: z.string().min(1, \"Please select an access level\"),\n});\n\ntype UserFormValues = z.infer<typeof userFormSchema>;\n\ninterface UserFormProps {\n  onCancel: () => void;\n}\n\nexport default function UserForm({ onCancel }: UserFormProps) {\n  const form = useForm<UserFormValues>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      fullName: \"\",\n      email: \"\",\n      role: \"\",\n      accessLevel: \"\",\n    },\n  });\n\n  const onSubmit = (data: UserFormValues) => {\n    console.log(\"User form data:\", data);\n    // Here you would typically make an API call to create the user\n    // Then call onCancel() to close the form on success\n    onCancel();\n  };\n\n  return (\n    <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n      <CardHeader>\n        <CardTitle>Create New User</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Doe\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"john@example.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>User Role</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"compliance_officer\">Compliance Officer</SelectItem>\n                        <SelectItem value=\"security_engineer\">Security Engineer</SelectItem>\n                        <SelectItem value=\"auditor\">Auditor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"accessLevel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Access Level</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select access level\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"trial\">Trial</SelectItem>\n                        <SelectItem value=\"basic\">Basic</SelectItem>\n                        <SelectItem value=\"premium\">Premium</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" type=\"button\" onClick={onCancel}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Create User</Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5118},"client/src/components/admin/user-list.tsx":{"content":"import React from \"react\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Sample user data (in a real app, this would be fetched from an API)\nconst users = [\n  {\n    id: 1,\n    name: \"Sarah Adams\",\n    email: \"sarah@example.com\",\n    role: \"Admin\",\n    accessLevel: \"Premium\",\n    isActive: true,\n  },\n  {\n    id: 2,\n    name: \"Michael Johnson\",\n    email: \"michael@example.com\",\n    role: \"Security Engineer\",\n    accessLevel: \"Basic\",\n    isActive: true,\n  },\n  {\n    id: 3,\n    name: \"David Chen\",\n    email: \"david@example.com\",\n    role: \"Compliance Officer\",\n    accessLevel: \"Premium\",\n    isActive: false,\n  },\n  {\n    id: 4,\n    name: \"Lisa Williams\",\n    email: \"lisa@example.com\",\n    role: \"Auditor\",\n    accessLevel: \"Basic\",\n    isActive: true,\n  },\n];\n\nexport default function UserList() {\n  // Function to get initials from name\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase();\n  };\n  \n  // Function to get avatar colors based on role\n  const getAvatarColors = (role: string) => {\n    switch (role) {\n      case \"Admin\":\n        return \"bg-primary/20 text-primary\";\n      case \"Security Engineer\":\n        return \"bg-emerald-500/20 text-emerald-500\";\n      case \"Compliance Officer\":\n        return \"bg-blue-500/20 text-blue-500\";\n      case \"Auditor\":\n        return \"bg-amber-500/20 text-amber-500\";\n      default:\n        return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n  \n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b border-border\">\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">User</th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Role</th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Access Level</th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n            <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">Actions</th>\n          </tr>\n        </thead>\n        <tbody className=\"divide-y divide-border\">\n          {users.map((user) => (\n            <tr key={user.id}>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <div className=\"flex items-center\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback className={getAvatarColors(user.role)}>\n                      {getInitials(user.name)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"ml-4\">\n                    <div className=\"text-sm font-medium\">{user.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                  </div>\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm\">{user.role}</td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm\">{user.accessLevel}</td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <Badge variant={user.isActive ? \"success\" : \"destructive\"} className=\"rounded-full\">\n                  {user.isActive ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/80 h-auto p-1\">Edit</Button>\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-destructive hover:text-destructive/80 h-auto p-1\">Delete</Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","size_bytes":4029},"client/src/components/admin-dashboard/admin-header.tsx":{"content":"import React from \"react\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport { Bell, Menu, Search, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { ThemeSwitch } from \"@/components/layout/theme-switch\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface AdminHeaderProps {\n  toggleSidebar?: () => void;\n}\n\nexport default function AdminHeader({ toggleSidebar }: AdminHeaderProps) {\n  const { user, signOut } = useClerkUser();\n  \n  // Get user initials for avatar fallback\n  const getInitials = () => {\n    if (!user) return \"A\";\n    \n    const firstName = user.firstName || \"\";\n    const lastName = user.lastName || \"\";\n    \n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`;\n    } else if (firstName) {\n      return firstName[0];\n    } else {\n      return \"A\";\n    }\n  };\n\n  return (\n    <header className=\"h-16 border-b border-border bg-card/30 backdrop-blur-sm px-4 flex items-center justify-between\">\n      {/* Left section with mobile menu toggle and search */}\n      <div className=\"flex items-center gap-4 flex-1\">\n        {toggleSidebar && (\n          <Button variant=\"ghost\" size=\"icon\" onClick={toggleSidebar} className=\"lg:hidden\">\n            <Menu className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Toggle menu</span>\n          </Button>\n        )}\n        \n        <div className=\"relative max-w-md w-full hidden md:flex\">\n          <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Search...\"\n            className=\"pl-8 bg-background/50\"\n          />\n        </div>\n      </div>\n      \n      {/* Admin badge */}\n      <div className=\"hidden md:flex mx-4\">\n        <Badge variant=\"default\" className=\"px-3 py-1 text-xs\">\n          Administrator\n        </Badge>\n      </div>\n      \n      {/* Right section with help, notifications and user menu */}\n      <div className=\"flex items-center space-x-2\">\n        <ThemeSwitch>Toggle theme</ThemeSwitch>\n        \n        {/* Help */}\n        <Button variant=\"ghost\" size=\"icon\">\n          <HelpCircle className=\"h-5 w-5\" />\n          <span className=\"sr-only\">Help</span>\n        </Button>\n        \n        {/* Notifications */}\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          <span className=\"absolute top-1 right-1 h-2 w-2 rounded-full bg-red-500\"></span>\n          <span className=\"sr-only\">Notifications</span>\n        </Button>\n        \n        {/* User menu */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={user?.imageUrl} alt={user?.firstName || \"Admin\"} />\n                <AvatarFallback>{getInitials()}</AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>\n              <div className=\"flex flex-col\">\n                <span>{user?.firstName} {user?.lastName}</span>\n                <span className=\"text-xs text-muted-foreground truncate max-w-52\">\n                  {user?.emailAddresses?.[0]?.emailAddress}\n                </span>\n                <span className=\"text-xs text-primary font-medium mt-1\">Administrator</span>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>My Profile</DropdownMenuItem>\n            <DropdownMenuItem>System Settings</DropdownMenuItem>\n            <DropdownMenuItem>Activity Log</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={() => signOut()}>\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}","size_bytes":4278},"client/src/components/admin-dashboard/admin-overview.tsx":{"content":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport {\n  Users,\n  Building2,\n  ClipboardCheck,\n  ArrowUpRight,\n  ArrowDownRight,\n  CheckCircle2,\n  AlertTriangle,\n  Shield,\n  XCircle,\n  BarChart,\n  Activity\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function AdminOverview() {\n  // Dummy data for demonstration\n  const statsCards = [\n    {\n      title: \"Total Users\",\n      value: \"412\",\n      change: \"+12%\",\n      trend: \"up\",\n      icon: <Users className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Organizations\",\n      value: \"43\",\n      change: \"+5%\",\n      trend: \"up\",\n      icon: <Building2 className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Assessments\",\n      value: \"187\",\n      change: \"+8%\",\n      trend: \"up\",\n      icon: <ClipboardCheck className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Compliance Avg\",\n      value: \"68%\",\n      change: \"-2%\",\n      trend: \"down\",\n      icon: <Shield className=\"h-5 w-5\" />\n    }\n  ];\n  \n  const recentUsers = [\n    {\n      id: 1,\n      name: \"Sarah Johnson\",\n      email: \"sarah.j@example.com\",\n      company: \"TechSolutions Inc.\",\n      role: \"Admin\",\n      joinDate: \"Oct 5, 2023\"\n    },\n    {\n      id: 2,\n      name: \"Mark Williams\",\n      email: \"m.williams@example.com\",\n      company: \"Global Services Ltd.\",\n      role: \"User\",\n      joinDate: \"Oct 3, 2023\"\n    },\n    {\n      id: 3,\n      name: \"Jessica Lee\",\n      email: \"jessica@example.com\",\n      company: \"Innovate Systems\",\n      role: \"User\",\n      joinDate: \"Oct 2, 2023\"\n    },\n    {\n      id: 4,\n      name: \"David Chen\",\n      email: \"d.chen@example.com\",\n      company: \"Secure Networks\",\n      role: \"Admin\",\n      joinDate: \"Sep 29, 2023\"\n    }\n  ];\n  \n  const recentAssessments = [\n    {\n      id: 1,\n      organization: \"TechSolutions Inc.\",\n      framework: \"NCA ECC\",\n      score: 78,\n      status: \"Completed\",\n      date: \"Oct 6, 2023\"\n    },\n    {\n      id: 2,\n      organization: \"Global Services Ltd.\",\n      framework: \"SAMA\",\n      score: 65,\n      status: \"In Progress\",\n      date: \"Oct 4, 2023\"\n    },\n    {\n      id: 3,\n      organization: \"Innovate Systems\",\n      framework: \"PDPL\",\n      score: 82,\n      status: \"Completed\",\n      date: \"Oct 3, 2023\"\n    },\n    {\n      id: 4,\n      organization: \"Secure Networks\",\n      framework: \"ISO 27001\",\n      score: 91,\n      status: \"Completed\",\n      date: \"Oct 1, 2023\"\n    }\n  ];\n  \n  const complianceByFramework = [\n    {\n      name: \"NCA ECC\",\n      compliant: 32,\n      partial: 14,\n      nonCompliant: 8,\n      progress: 74,\n      color: \"bg-green-500\"\n    },\n    {\n      name: \"SAMA\",\n      compliant: 28,\n      partial: 17,\n      nonCompliant: 12,\n      progress: 63,\n      color: \"bg-blue-500\"\n    },\n    {\n      name: \"PDPL\",\n      compliant: 18,\n      partial: 8,\n      nonCompliant: 6,\n      progress: 69,\n      color: \"bg-purple-500\"\n    },\n    {\n      name: \"ISO 27001\",\n      compliant: 40,\n      partial: 11,\n      nonCompliant: 5,\n      progress: 80,\n      color: \"bg-amber-500\"\n    }\n  ];\n\n  const getRoleBadge = (role: string) => {\n    switch (role) {\n      case \"Admin\":\n        return <Badge className=\"bg-primary\">Admin</Badge>;\n      case \"User\":\n        return <Badge variant=\"outline\">User</Badge>;\n      default:\n        return <Badge variant=\"outline\">User</Badge>;\n    }\n  };\n  \n  const getScoreBadge = (score: number) => {\n    if (score >= 80) return <Badge className=\"bg-green-500\">{score}%</Badge>;\n    if (score >= 60) return <Badge className=\"bg-amber-500\">{score}%</Badge>;\n    return <Badge variant=\"destructive\">{score}%</Badge>;\n  };\n  \n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"Completed\":\n        return <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500 border-green-500/20\">Completed</Badge>;\n      case \"In Progress\":\n        return <Badge variant=\"outline\" className=\"bg-blue-500/10 text-blue-500 border-blue-500/20\">In Progress</Badge>;\n      default:\n        return <Badge variant=\"outline\">Pending</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">Administration Dashboard</h1>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\">Export Data</Button>\n          <Button>Create Report</Button>\n        </div>\n      </div>\n      \n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {statsCards.map((stat, index) => (\n          <Card key={index} className=\"bg-card/50 backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between space-x-4\">\n                <div className=\"flex items-center justify-center rounded-full bg-primary/10 p-2\">\n                  {stat.icon}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center\">\n                    <div className=\"ml-auto flex items-center\">\n                      {stat.trend === \"up\" ? (\n                        <ArrowUpRight className=\"mr-1 h-4 w-4 text-green-500\" />\n                      ) : (\n                        <ArrowDownRight className=\"mr-1 h-4 w-4 text-red-500\" />\n                      )}\n                      <span className={`text-xs font-medium ${stat.trend === \"up\" ? \"text-green-500\" : \"text-red-500\"}`}>\n                        {stat.change}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground mt-1\">{stat.title}</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {/* Framework Compliance Overview */}\n      <Card className=\"bg-card/50 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <Shield className=\"mr-2 h-5 w-5 text-primary\" />\n            Compliance by Framework\n          </CardTitle>\n          <CardDescription>\n            Overview of compliance status across all frameworks\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-5\">\n            {complianceByFramework.map((framework, index) => (\n              <div key={index} className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <span className=\"font-medium\">{framework.name}</span>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {framework.progress}% Compliant\n                  </div>\n                </div>\n                <Progress value={framework.progress} className={`h-2 ${framework.color}`} />\n                <div className=\"grid grid-cols-3 text-xs gap-4 pt-1\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle2 className=\"h-3 w-3 mr-1 text-green-500\" />\n                    <span className=\"text-muted-foreground\">Compliant: {framework.compliant}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <AlertTriangle className=\"h-3 w-3 mr-1 text-amber-500\" />\n                    <span className=\"text-muted-foreground\">Partial: {framework.partial}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <XCircle className=\"h-3 w-3 mr-1 text-red-500\" />\n                    <span className=\"text-muted-foreground\">Non-compliant: {framework.nonCompliant}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Tabs section */}\n      <Tabs defaultValue=\"users\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"users\" className=\"flex items-center\">\n            <Users className=\"mr-2 h-4 w-4\" />\n            Recent Users\n          </TabsTrigger>\n          <TabsTrigger value=\"assessments\" className=\"flex items-center\">\n            <Activity className=\"mr-2 h-4 w-4\" />\n            Recent Assessments\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"users\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent User Registrations</CardTitle>\n              <CardDescription>\n                New users who have joined the platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <div className=\"grid grid-cols-10 bg-muted p-3 text-xs font-medium\">\n                  <div className=\"col-span-3\">Name</div>\n                  <div className=\"col-span-3\">Email</div>\n                  <div className=\"col-span-2\">Company</div>\n                  <div className=\"col-span-1\">Role</div>\n                  <div className=\"col-span-1 text-right\">Action</div>\n                </div>\n                <div className=\"divide-y\">\n                  {recentUsers.map((user) => (\n                    <div\n                      key={user.id}\n                      className=\"grid grid-cols-10 p-3 text-sm items-center\"\n                    >\n                      <div className=\"col-span-3 font-medium\">{user.name}</div>\n                      <div className=\"col-span-3 text-muted-foreground\">{user.email}</div>\n                      <div className=\"col-span-2 text-muted-foreground\">{user.company}</div>\n                      <div className=\"col-span-1\">{getRoleBadge(user.role)}</div>\n                      <div className=\"col-span-1 text-right\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          View\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"justify-between\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing 4 of 18 recent users\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                View All Users\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"assessments\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Assessments</CardTitle>\n              <CardDescription>\n                Latest compliance assessments conducted\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <div className=\"grid grid-cols-10 bg-muted p-3 text-xs font-medium\">\n                  <div className=\"col-span-3\">Organization</div>\n                  <div className=\"col-span-2\">Framework</div>\n                  <div className=\"col-span-1\">Score</div>\n                  <div className=\"col-span-2\">Status</div>\n                  <div className=\"col-span-1\">Date</div>\n                  <div className=\"col-span-1 text-right\">Action</div>\n                </div>\n                <div className=\"divide-y\">\n                  {recentAssessments.map((assessment) => (\n                    <div\n                      key={assessment.id}\n                      className=\"grid grid-cols-10 p-3 text-sm items-center\"\n                    >\n                      <div className=\"col-span-3 font-medium\">{assessment.organization}</div>\n                      <div className=\"col-span-2 text-muted-foreground\">{assessment.framework}</div>\n                      <div className=\"col-span-1\">{getScoreBadge(assessment.score)}</div>\n                      <div className=\"col-span-2\">{getStatusBadge(assessment.status)}</div>\n                      <div className=\"col-span-1 text-muted-foreground\">{assessment.date}</div>\n                      <div className=\"col-span-1 text-right\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          Details\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"justify-between\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing 4 of 32 recent assessments\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                View All Assessments\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      {/* Quick Actions */}\n      <Card className=\"bg-card/50 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <BarChart className=\"mr-2 h-5 w-5 text-primary\" />\n            Administrative Actions\n          </CardTitle>\n          <CardDescription>\n            Quick access to common administrative tasks\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Users className=\"h-8 w-8 text-primary/70\" />\n              <span>Manage Users</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Building2 className=\"h-8 w-8 text-primary/70\" />\n              <span>Manage Organizations</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Shield className=\"h-8 w-8 text-primary/70\" />\n              <span>View Compliance Reports</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Activity className=\"h-8 w-8 text-primary/70\" />\n              <span>System Audit Logs</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14670},"client/src/components/admin-dashboard/admin-sidebar.tsx":{"content":"import React from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Shield,\n  Users,\n  BarChart3,\n  ClipboardCheck,\n  Database,\n  Settings,\n  Home,\n  LineChart,\n  FileSpreadsheet,\n  HelpCircle,\n  Bell\n} from \"lucide-react\";\n\ninterface SidebarItem {\n  title: string;\n  href: string;\n  icon: React.ReactNode;\n}\n\nexport default function AdminSidebar() {\n  const [location] = useLocation();\n\n  // Define sidebar items for admin dashboard\n  const sidebarItems: SidebarItem[] = [\n    {\n      title: \"Overview\",\n      href: \"/admin-dashboard\",\n      icon: <BarChart3 className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Users\",\n      href: \"/admin-dashboard/users\",\n      icon: <Users className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Organizations\",\n      href: \"/admin-dashboard/organizations\",\n      icon: <Database className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Assessments\",\n      href: \"/admin-dashboard/assessments\",\n      icon: <ClipboardCheck className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Analytics\",\n      href: \"/admin-dashboard/analytics\",\n      icon: <LineChart className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Reports\",\n      href: \"/admin-dashboard/reports\",\n      icon: <FileSpreadsheet className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Notifications\",\n      href: \"/admin-dashboard/notifications\",\n      icon: <Bell className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Settings\",\n      href: \"/admin-dashboard/settings\",\n      icon: <Settings className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Support\",\n      href: \"/admin-dashboard/support\",\n      icon: <HelpCircle className=\"h-5 w-5\" />\n    }\n  ];\n\n  return (\n    <div className=\"w-64 border-r border-border bg-card/30 backdrop-blur-sm h-screen flex-shrink-0\">\n      {/* Logo and title */}\n      <div className=\"h-16 border-b border-border flex items-center px-4\">\n        <Shield className=\"h-6 w-6 text-primary mr-2\" />\n        <h1 className=\"font-bold text-lg\">MetaWorks Admin</h1>\n      </div>\n\n      {/* Sidebar content */}\n      <ScrollArea className=\"h-[calc(100vh-64px)]\">\n        <div className=\"py-4 px-2\">\n          {/* Home link */}\n          <div className=\"px-2 mb-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" className=\"w-full justify-start text-muted-foreground\">\n                <Home className=\"mr-2 h-4 w-4\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n\n          {/* Admin Nav links */}\n          <div className=\"px-2 mb-2\">\n            <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n              Administration\n            </h3>\n          </div>\n          <nav className=\"space-y-1 px-2\">\n            {sidebarItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <a\n                  className={cn(\n                    \"flex items-center px-3 py-2 text-sm rounded-md transition-colors\",\n                    location === item.href\n                      ? \"bg-primary/10 text-primary font-medium\"\n                      : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                  )}\n                >\n                  <span className=\"mr-3 text-primary/80\">{item.icon}</span>\n                  {item.title}\n                </a>\n              </Link>\n            ))}\n          </nav>\n          \n          {/* User Dashboard Link */}\n          <div className=\"px-2 mt-6\">\n            <Link href=\"/user-dashboard\">\n              <Button variant=\"secondary\" className=\"w-full justify-start\">\n                <Shield className=\"mr-2 h-4 w-4\" />\n                Switch to User View\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":3907},"client/src/components/charts/heat-map.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ScatterChart,\n  Scatter,\n  Cell,\n  ZAxis,\n} from 'recharts';\n\ninterface HeatMapDataPoint {\n  x: string;\n  y: string;\n  value: number;\n}\n\ninterface HeatMapProps {\n  data: HeatMapDataPoint[];\n}\n\nconst HeatMap: React.FC<HeatMapProps> = ({ data }) => {\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n\n  // Define color range for heatmap\n  const getColor = (value: number) => {\n    // Value is expected to be between 0 and 100\n    if (value <= 33) {\n      return \"#ef4444\"; // Red for high risk (low score)\n    } else if (value <= 66) {\n      return \"#f59e0b\"; // Amber for medium risk\n    } else {\n      return \"#10b981\"; // Green for low risk (high score)\n    }\n  };\n\n  // Create a unique list of X and Y axis values to form a grid\n  const uniqueXValues = Array.from(new Set(data.map(item => item.x)));\n  const uniqueYValues = Array.from(new Set(data.map(item => item.y)));\n  \n  // Create a map of X and Y values to indexes for positioning\n  const xMap = uniqueXValues.reduce((acc, val, i) => {\n    acc[val] = i;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const yMap = uniqueYValues.reduce((acc, val, i) => {\n    acc[val] = i;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  // Transform data for scatter chart\n  const transformedData = data.map((item, index) => ({\n    ...item,\n    index,\n    // Map string values to numeric positions\n    xPos: xMap[item.x],\n    yPos: yMap[item.y],\n  }));\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <ScatterChart\n        margin={{ top: 20, right: 20, bottom: 10, left: 10 }}\n      >\n        <XAxis\n          dataKey=\"xPos\"\n          type=\"number\"\n          name=\"Domain\"\n          tick={false}\n          axisLine={false}\n          domain={[0, uniqueXValues.length - 1]}\n        />\n        <YAxis\n          dataKey=\"yPos\"\n          type=\"number\"\n          name=\"Control\"\n          tick={false}\n          axisLine={false}\n          domain={[0, uniqueYValues.length - 1]}\n        />\n        <ZAxis\n          dataKey=\"value\"\n          range={[100, 500]} // Determines the size of the dots\n          domain={[0, 100]}\n        />\n        <Tooltip\n          cursor={{ strokeDasharray: '3 3' }}\n          content={({ active, payload }) => {\n            if (active && payload && payload.length) {\n              const data = payload[0].payload;\n              return (\n                <div className=\"rounded-md bg-black/80 p-2 text-xs text-white shadow-md\">\n                  <p>{`Domain: ${data.x}`}</p>\n                  <p>{`Control: ${data.y}`}</p>\n                  <p>{`Score: ${data.value.toFixed(0)}%`}</p>\n                </div>\n              );\n            }\n            return null;\n          }}\n        />\n        <Scatter\n          data={transformedData}\n          onMouseOver={(_, index) => setActiveIndex(index)}\n          onMouseLeave={() => setActiveIndex(null)}\n        >\n          {data.map((entry, index) => (\n            <Cell\n              key={`cell-${index}`}\n              fill={getColor(entry.value)}\n              fillOpacity={activeIndex === index ? 0.9 : 0.7}\n              stroke={activeIndex === index ? \"#ffffff\" : \"none\"}\n              strokeWidth={activeIndex === index ? 1 : 0}\n            />\n          ))}\n        </Scatter>\n      </ScatterChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default HeatMap;","size_bytes":3443},"client/src/components/charts/radar-chart.tsx":{"content":"import React from 'react';\nimport {\n  Radar,\n  RadarChart as RechartsRadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  ResponsiveContainer\n} from 'recharts';\n\ninterface RadarChartProps {\n  data: {\n    labels: string[];\n    datasets: {\n      label: string;\n      data: number[];\n      backgroundColor: string;\n      borderColor: string;\n      borderWidth: number;\n    }[]\n  }\n}\n\nconst RadarChart: React.FC<RadarChartProps> = ({ data }) => {\n  // Convert the input data format to the format expected by Recharts\n  const convertedData = data.labels.map((label, index) => {\n    const dataPoint: Record<string, any> = {\n      subject: label,\n    };\n\n    // Add all datasets for this label\n    data.datasets.forEach((dataset, datasetIndex) => {\n      dataPoint[dataset.label] = dataset.data[index];\n    });\n\n    return dataPoint;\n  });\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <RechartsRadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" data={convertedData}>\n        <PolarGrid />\n        <PolarAngleAxis dataKey=\"subject\" />\n        <PolarRadiusAxis angle={30} domain={[0, 100]} />\n        {data.datasets.map((dataset, index) => (\n          <Radar\n            key={index}\n            name={dataset.label}\n            dataKey={dataset.label}\n            stroke={dataset.borderColor}\n            fill={dataset.backgroundColor}\n            fillOpacity={0.6}\n          />\n        ))}\n      </RechartsRadarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default RadarChart;","size_bytes":1505},"client/src/components/clerk/clerk-auth.tsx":{"content":"import { SignIn, SignUp, UserProfile, UserButton } from \"@clerk/clerk-react\";\nimport { useUser, useAuth } from \"@clerk/clerk-react\";\n\nexport function ClerkSignIn() {\n  return (\n    <div className=\"w-full max-w-md\">\n      <SignIn \n        appearance={{\n          elements: {\n            formButtonPrimary: \n              \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            card: \"bg-card\",\n            headerTitle: \"text-foreground\",\n            formFieldLabel: \"text-foreground\",\n            formFieldInput: \"bg-background border-input\",\n            dividerLine: \"bg-border\",\n            dividerText: \"text-muted-foreground\",\n            footerActionLink: \"text-primary hover:text-primary/90\"\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport function ClerkSignUp() {\n  return (\n    <div className=\"w-full max-w-md\">\n      <SignUp \n        appearance={{\n          elements: {\n            formButtonPrimary: \n              \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            card: \"bg-card\",\n            headerTitle: \"text-foreground\",\n            formFieldLabel: \"text-foreground\",\n            formFieldInput: \"bg-background border-input\",\n            dividerLine: \"bg-border\",\n            dividerText: \"text-muted-foreground\",\n            footerActionLink: \"text-primary hover:text-primary/90\"\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport function ClerkUserProfile() {\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <UserProfile \n        appearance={{\n          elements: {\n            card: \"bg-card\",\n            navbar: \"bg-background\",\n            navbarButton: \"text-foreground\",\n            pageTitle: \"text-foreground\",\n            formFieldLabel: \"text-foreground\",\n            formFieldInput: \"bg-background border-input\",\n            formButtonPrimary: \n              \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            formButtonReset: \"text-destructive hover:text-destructive/90\",\n            accordionTriggerButton: \"text-foreground\",\n            profileSectionTitle: \"text-foreground\",\n            profileSectionPrimaryButton: \n              \"bg-primary text-primary-foreground hover:bg-primary/90\",\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport function ClerkUserButton() {\n  return (\n    <UserButton \n      appearance={{\n        elements: {\n          userButtonPopoverCard: \"bg-card\",\n          userButtonPopoverActionButton: \"text-foreground hover:bg-muted\",\n          userButtonPopoverActionButtonText: \"text-foreground\",\n          userButtonPopoverFooter: \"border-t border-border\",\n        },\n      }}\n    />\n  );\n}\n\nexport function useClerkUser() {\n  const { isSignedIn, user } = useUser();\n  const { signOut } = useAuth();\n  \n  return {\n    isSignedIn,\n    user,\n    signOut,\n  };\n}","size_bytes":2803},"client/src/components/clerk/custom-clerk-provider.tsx":{"content":"import { ClerkProvider } from \"@clerk/clerk-react\";\nimport { useState, useEffect } from \"react\";\nimport { fetchClerkPublishableKey } from \"@/lib/clerk\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface CustomClerkProviderProps {\n  children: React.ReactNode;\n}\n\nexport function CustomClerkProvider({ children }: CustomClerkProviderProps) {\n  const [key, setKey] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchClerkPublishableKey()\n      .then(fetchedKey => {\n        setKey(fetchedKey);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error fetching Clerk publishable key:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n          <p className=\"text-muted-foreground\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!key) {\n    console.warn(\"Missing Clerk Publishable Key. User authentication might not work correctly.\");\n    return <>{children}</>;\n  }\n\n  return <ClerkProvider publishableKey={key}>{children}</ClerkProvider>;\n}\n\nexport default CustomClerkProvider;","size_bytes":1316},"client/src/components/common/direct-file-uploader.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Upload } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DirectFileUploaderProps {\n  onFileUploaded: (fileId: number, filename: string, url: string) => void;\n  accept?: string;\n  buttonText?: string;\n  endpoint: string;\n  fieldName: string;\n  maxSize?: number;\n}\n\nexport function DirectFileUploader({\n  onFileUploaded,\n  accept = \"*/*\",\n  buttonText = \"Upload File\",\n  endpoint,\n  fieldName,\n  maxSize = 10 * 1024 * 1024 // 10MB default max size\n}: DirectFileUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    \n    // Check file size\n    if (maxSize && file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: `Maximum file size is ${maxSize / (1024 * 1024)}MB`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsUploading(true);\n    \n    // Create form data\n    const formData = new FormData();\n    formData.append(fieldName, file);\n    \n    // Display uploading toast\n    toast({\n      title: \"Uploading file...\",\n      description: \"Please wait while your file is being uploaded.\",\n    });\n    \n    try {\n      const response = await fetch(endpoint, {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\"\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(errorData.message || 'File upload failed');\n      }\n      \n      const data = await response.json();\n      \n      // Success notification\n      toast({\n        title: \"File uploaded successfully\",\n        description: file.name,\n      });\n      \n      // Call callback with file ID and URL\n      onFileUploaded(data.fileId, data.filename, data.url);\n      \n      // Clear the file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleUpload}\n        accept={accept}\n        className=\"hidden\"\n        id=\"file-upload\"\n      />\n      <Button \n        type=\"button\"\n        onClick={() => fileInputRef.current?.click()}\n        variant=\"outline\"\n        disabled={isUploading}\n        className=\"w-full\"\n      >\n        {isUploading ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Uploading...\n          </>\n        ) : (\n          <>\n            <Upload className=\"mr-2 h-4 w-4\" />\n            {buttonText}\n          </>\n        )}\n      </Button>\n    </div>\n  );\n}","size_bytes":3185},"client/src/components/common/page-header.tsx":{"content":"import React, { ReactNode } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PageHeaderProps {\n  heading: string;\n  description?: string;\n  icon?: ReactNode;\n  actions?: ReactNode;\n  className?: string;\n}\n\nexport default function PageHeader({\n  heading,\n  description,\n  icon,\n  actions,\n  className\n}: PageHeaderProps) {\n  return (\n    <Card className={cn(\"border-0 shadow-none bg-transparent\", className)}>\n      <CardHeader className=\"py-4 px-0\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center gap-3\">\n            {icon && (\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10 text-primary\">\n                {icon}\n              </div>\n            )}\n            <div>\n              <CardTitle className=\"text-2xl font-bold\">{heading}</CardTitle>\n              {description && (\n                <CardDescription className=\"mt-1 text-base\">{description}</CardDescription>\n              )}\n            </div>\n          </div>\n          {actions && (\n            <div className=\"flex items-center gap-2\">\n              {actions}\n            </div>\n          )}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}","size_bytes":1332},"client/src/components/company/company-dashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { useToast } from '@/hooks/use-toast';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { FileUploader } from '@/components/upload/file-uploader';\nimport { DirectFileUploader } from '@/components/common/direct-file-uploader';\nimport { Building2, FileText, Upload, Image, Download, FileIcon, Trash2, Save, Edit, X, Check } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface CompanyInfo {\n  id: number;\n  companyName: string;\n  sector?: string;\n  size?: string;\n  website?: string;\n  address?: string;\n  city?: string;\n  country?: string;\n  postalCode?: string;\n  contactEmail?: string;\n  contactPhone?: string;\n  ceoName?: string;\n  cioName?: string;\n  ctoName?: string;\n  cisoName?: string;\n  businessDescription?: string;\n  foundedYear?: number;\n  employeeCount?: number;\n  annualRevenue?: string;\n  logoId?: number;\n  documentsFileIds?: number[];\n  updatedAt?: string;\n  updatedBy?: number;\n  logoUrl?: string;\n}\n\ninterface Document {\n  id: number;\n  filename: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  path: string;\n  uploadedAt: string;\n  uploadedBy: number;\n  fileType: string;\n  downloadUrl: string;\n}\n\n// Form validation schema\nconst companyInfoSchema = z.object({\n  companyName: z.string().min(1, 'Company name is required'),\n  sector: z.string().optional(),\n  size: z.string().optional(),\n  website: z.string().url('Invalid website URL').optional().or(z.string().length(0)),\n  address: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  postalCode: z.string().optional(),\n  contactEmail: z.string().email('Invalid email address').optional().or(z.string().length(0)),\n  contactPhone: z.string().optional(),\n  ceoName: z.string().optional(),\n  cioName: z.string().optional(),\n  ctoName: z.string().optional(),\n  cisoName: z.string().optional(),\n  businessDescription: z.string().optional(),\n  foundedYear: z.number().int().min(1800).max(new Date().getFullYear()).optional(),\n  employeeCount: z.number().int().min(1).optional(),\n  annualRevenue: z.string().optional(),\n});\n\nexport default function CompanyDashboard() {\n  const [activeTab, setActiveTab] = useState('general');\n  const { toast } = useToast();\n  \n  // Fetch company information\n  const { data: companyInfo, isLoading, isError } = useQuery({\n    queryKey: ['/api/company'],\n  });\n  \n  // Fetch company documents\n  const { data: documentsData, isLoading: isLoadingDocuments } = useQuery({\n    queryKey: ['/api/company/documents'],\n    enabled: activeTab === 'documents'\n  });\n  \n  // Form setup\n  const form = useForm({\n    resolver: zodResolver(companyInfoSchema),\n    defaultValues: {\n      companyName: '',\n      sector: '',\n      size: '',\n      website: '',\n      address: '',\n      city: '',\n      country: '',\n      postalCode: '',\n      contactEmail: '',\n      contactPhone: '',\n      ceoName: '',\n      cioName: '',\n      ctoName: '',\n      cisoName: '',\n      businessDescription: '',\n      foundedYear: undefined as number | undefined,\n      employeeCount: undefined as number | undefined,\n      annualRevenue: '',\n    },\n    values: companyInfo as any || {},\n  });\n  \n  // Save company information mutation\n  const saveCompanyMutation = useMutation({\n    mutationFn: async (data: CompanyInfo) => {\n      const res = await apiRequest('POST', '/api/company', data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/company'] });\n      toast({\n        title: \"Company information saved\",\n        description: \"Your company information has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error saving company information\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Upload company logo mutation\n  const uploadLogoMutation = useMutation({\n    mutationFn: async (file: File) => {\n      // Create formData properly\n      const formData = new FormData();\n      formData.append('logo', file);\n      \n      // Manual fetch implementation for FormData upload instead of using apiRequest\n      const response = await fetch('/api/upload/logo', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include' // Include cookies for authentication\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(errorData.message || 'Failed to upload logo');\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/company'] });\n      toast({\n        title: \"Logo uploaded\",\n        description: \"Your company logo has been uploaded successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error uploading logo\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Upload company document mutation\n  const uploadDocumentMutation = useMutation({\n    mutationFn: async (file: File) => {\n      // Create formData properly\n      const formData = new FormData();\n      formData.append('document', file);\n      \n      // Manual fetch implementation for FormData upload\n      const response = await fetch('/api/upload/document', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include' // Include cookies for authentication\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: response.statusText }));\n        throw new Error(errorData.message || 'Failed to upload document');\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/company/documents'] });\n      toast({\n        title: \"Document uploaded\",\n        description: \"Your document has been uploaded successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error uploading document\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Delete document mutation\n  const deleteDocumentMutation = useMutation({\n    mutationFn: async (documentId: number) => {\n      const res = await apiRequest('DELETE', `/api/company/documents/${documentId}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/company/documents'] });\n      toast({\n        title: \"Document deleted\",\n        description: \"Your document has been deleted successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error deleting document\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  const onSubmit = (data: z.infer<typeof companyInfoSchema>) => {\n    saveCompanyMutation.mutate(data as CompanyInfo);\n  };\n  \n  const handleLogoUpload = (files: File[]) => {\n    if (files.length > 0) {\n      uploadLogoMutation.mutate(files[0]);\n    }\n  };\n  \n  const handleDocumentUpload = (files: File[]) => {\n    if (files.length > 0) {\n      uploadDocumentMutation.mutate(files[0]);\n    }\n  };\n  \n  const handleDeleteDocument = (documentId: number) => {\n    if (confirm('Are you sure you want to delete this document?')) {\n      deleteDocumentMutation.mutate(documentId);\n    }\n  };\n  \n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  \n  // Error state\n  if (isError) {\n    return (\n      <div className=\"text-center p-8\">\n        <div className=\"text-destructive text-6xl mb-4\">\n          <X className=\"mx-auto h-16 w-16\" />\n        </div>\n        <h3 className=\"text-xl font-semibold mb-2\">Failed to load company information</h3>\n        <p className=\"text-muted-foreground mb-4\">There was an error loading your company information.</p>\n        <Button \n          onClick={() => queryClient.invalidateQueries({ queryKey: ['/api/company'] })}\n          variant=\"outline\"\n        >\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto py-6 max-w-7xl\">\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Company Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage your company information and documents</p>\n        </div>\n      </div>\n      \n      <Tabs defaultValue=\"general\" value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mb-8\">\n          <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n            <Building2 className=\"h-4 w-4\" />\n            General Information\n          </TabsTrigger>\n          <TabsTrigger value=\"documents\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            Documents\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"general\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Company Logo */}\n            <Card className=\"md:col-span-1\">\n              <CardHeader>\n                <CardTitle>Company Logo</CardTitle>\n                <CardDescription>Upload your company logo</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col items-center gap-4\">\n                  {companyInfo?.logoUrl ? (\n                    <div className=\"relative h-48 w-48 rounded-md overflow-hidden border border-border\">\n                      <img \n                        src={companyInfo.logoUrl} \n                        alt={companyInfo.companyName} \n                        className=\"h-full w-full object-contain\" \n                      />\n                    </div>\n                  ) : (\n                    <div className=\"h-48 w-48 rounded-md bg-muted flex items-center justify-center\">\n                      <Image className=\"h-16 w-16 text-muted-foreground\" />\n                    </div>\n                  )}\n                  \n                  <DirectFileUploader\n                    endpoint=\"/api/upload/logo\"\n                    fieldName=\"logo\"\n                    accept=\"image/*\"\n                    buttonText=\"Upload Logo\"\n                    onFileUploaded={(fileId, filename, url) => {\n                      // Update company info with the uploaded logo info\n                      queryClient.invalidateQueries({ queryKey: ['/api/company'] });\n                      toast({\n                        title: \"Logo uploaded\",\n                        description: \"Your company logo has been uploaded successfully.\"\n                      });\n                    }}\n                  />\n                  \n                  {companyInfo?.logoId && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Last updated: {companyInfo.updatedAt ? \n                        format(new Date(companyInfo.updatedAt), 'PPP') : \n                        'Unknown'\n                      }\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Company Information Form */}\n            <Card className=\"md:col-span-2\">\n              <CardHeader>\n                <CardTitle>Company Details</CardTitle>\n                <CardDescription>Manage your company information</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Company Name *</label>\n                      <Input \n                        {...form.register('companyName')}\n                        placeholder=\"Enter company name\" \n                      />\n                      {form.formState.errors.companyName && (\n                        <p className=\"text-xs text-destructive\">{form.formState.errors.companyName.message}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Sector</label>\n                      <Select \n                        value={form.watch('sector')} \n                        onValueChange={(value) => form.setValue('sector', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select sector\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"technology\">Technology</SelectItem>\n                          <SelectItem value=\"finance\">Finance</SelectItem>\n                          <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                          <SelectItem value=\"education\">Education</SelectItem>\n                          <SelectItem value=\"government\">Government</SelectItem>\n                          <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                          <SelectItem value=\"retail\">Retail</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Company Size</label>\n                      <Select \n                        value={form.watch('size')} \n                        onValueChange={(value) => form.setValue('size', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select company size\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                          <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                          <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                          <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n                          <SelectItem value=\"501-1000\">501-1000 employees</SelectItem>\n                          <SelectItem value=\"1001-5000\">1001-5000 employees</SelectItem>\n                          <SelectItem value=\"5001+\">5001+ employees</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Website</label>\n                      <Input \n                        {...form.register('website')}\n                        placeholder=\"https://example.com\" \n                      />\n                      {form.formState.errors.website && (\n                        <p className=\"text-xs text-destructive\">{form.formState.errors.website.message}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Contact Email</label>\n                      <Input \n                        {...form.register('contactEmail')}\n                        placeholder=\"contact@example.com\" \n                      />\n                      {form.formState.errors.contactEmail && (\n                        <p className=\"text-xs text-destructive\">{form.formState.errors.contactEmail.message}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Contact Phone</label>\n                      <Input \n                        {...form.register('contactPhone')}\n                        placeholder=\"+1 (555) 123-4567\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Founded Year</label>\n                      <Input \n                        type=\"number\" \n                        {...form.register('foundedYear', { valueAsNumber: true })}\n                        placeholder=\"Year founded\"\n                      />\n                      {form.formState.errors.foundedYear && (\n                        <p className=\"text-xs text-destructive\">{form.formState.errors.foundedYear.message}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Employee Count</label>\n                      <Input \n                        type=\"number\" \n                        {...form.register('employeeCount', { valueAsNumber: true })}\n                        placeholder=\"Number of employees\"\n                      />\n                      {form.formState.errors.employeeCount && (\n                        <p className=\"text-xs text-destructive\">{form.formState.errors.employeeCount.message}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Address</label>\n                      <Input \n                        {...form.register('address')}\n                        placeholder=\"123 Main St\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">City</label>\n                      <Input \n                        {...form.register('city')}\n                        placeholder=\"City\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Country</label>\n                      <Input \n                        {...form.register('country')}\n                        placeholder=\"Country\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Postal Code</label>\n                      <Input \n                        {...form.register('postalCode')}\n                        placeholder=\"12345\" \n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">CEO Name</label>\n                      <Input \n                        {...form.register('ceoName')}\n                        placeholder=\"CEO full name\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">CIO Name</label>\n                      <Input \n                        {...form.register('cioName')}\n                        placeholder=\"CIO full name\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">CTO Name</label>\n                      <Input \n                        {...form.register('ctoName')}\n                        placeholder=\"CTO full name\" \n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">CISO Name</label>\n                      <Input \n                        {...form.register('cisoName')}\n                        placeholder=\"CISO full name\" \n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Business Description</label>\n                    <Textarea \n                      {...form.register('businessDescription')}\n                      placeholder=\"Describe your business\"\n                      rows={4}\n                    />\n                  </div>\n                  \n                  <div className=\"pt-2\">\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full md:w-auto\"\n                      disabled={saveCompanyMutation.isPending}\n                    >\n                      {saveCompanyMutation.isPending ? (\n                        <>\n                          <span className=\"animate-spin mr-2\">⧗</span>\n                          Saving...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          Save Company Information\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"documents\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Company Documents</CardTitle>\n              <CardDescription>Manage your company documents and certificates</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4 mb-4\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Upload important documents related to your company for compliance purposes.\n                  </p>\n                  \n                  <DirectFileUploader\n                    endpoint=\"/api/upload/document\"\n                    fieldName=\"document\"\n                    accept=\".pdf,.doc,.docx\"\n                    buttonText=\"Upload Document\"\n                    onFileUploaded={(fileId, filename, url) => {\n                      // Update documents list\n                      queryClient.invalidateQueries({ queryKey: ['/api/company/documents'] });\n                      toast({\n                        title: \"Document uploaded\",\n                        description: \"Your document has been uploaded successfully.\"\n                      });\n                    }}\n                  />\n                </div>\n                \n                {isLoadingDocuments ? (\n                  <div className=\"flex items-center justify-center py-10\">\n                    <div className=\"animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-primary\"></div>\n                  </div>\n                ) : (\n                  <>\n                    {documentsData?.documents && documentsData.documents.length > 0 ? (\n                      <div className=\"border rounded-md divide-y divide-border\">\n                        {documentsData.documents.map((doc: Document) => (\n                          <div key={doc.id} className=\"flex items-center justify-between p-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"rounded-md bg-primary/10 p-2\">\n                                <FileIcon className=\"h-6 w-6 text-primary\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{doc.originalName}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {format(new Date(doc.uploadedAt), 'PPP')} • \n                                  {doc.size < 1024 * 1024 \n                                    ? ` ${Math.round(doc.size / 1024)} KB` \n                                    : ` ${(doc.size / (1024 * 1024)).toFixed(1)} MB`}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                asChild\n                              >\n                                <a href={doc.downloadUrl} download>\n                                  <Download className=\"h-4 w-4 mr-1\" />\n                                  Download\n                                </a>\n                              </Button>\n                              <Button \n                                variant=\"destructive\" \n                                size=\"sm\"\n                                onClick={() => handleDeleteDocument(doc.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">Delete</span>\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-10 border rounded-md\">\n                        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No documents yet</h3>\n                        <p className=\"text-muted-foreground mb-4\">Upload your first document to get started.</p>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":27054},"client/src/components/company/company-info-form.tsx":{"content":"import React, { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { X, Plus, Upload } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport LogoUpload from \"./logo-upload\";\n\n// Company info form schema\nconst companyFormSchema = z.object({\n  companyName: z.string().min(2, \"Company name must be at least 2 characters\"),\n  ceoName: z.string().optional(),\n  cioName: z.string().optional(),\n  ctoName: z.string().optional(),\n  cisoName: z.string().optional(),\n  cybersecurityStaff: z.array(z.string()),\n});\n\ntype CompanyFormValues = z.infer<typeof companyFormSchema>;\n\nexport default function CompanyInfoForm() {\n  const [staffMembers, setStaffMembers] = React.useState<string[]>(['', '']);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Fetch existing company data\n  const { data: companyData, isLoading } = useQuery({\n    queryKey: [\"/api/company-info\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n  \n  const form = useForm<CompanyFormValues>({\n    resolver: zodResolver(companyFormSchema),\n    defaultValues: {\n      companyName: \"\",\n      ceoName: \"\",\n      cioName: \"\",\n      ctoName: \"\",\n      cisoName: \"\",\n      cybersecurityStaff: ['', ''],\n    },\n  });\n  \n  // Update form with existing data when fetched\n  useEffect(() => {\n    if (companyData) {\n      form.reset({\n        companyName: companyData.companyName || \"\",\n        ceoName: companyData.ceoName || \"\",\n        cioName: companyData.cioName || \"\",\n        ctoName: companyData.ctoName || \"\",\n        cisoName: companyData.cisoName || \"\",\n        cybersecurityStaff: companyData.cybersecurityStaff?.length \n          ? companyData.cybersecurityStaff \n          : ['', ''],\n      });\n      \n      setStaffMembers(companyData.cybersecurityStaff?.length \n        ? companyData.cybersecurityStaff \n        : ['', '']);\n    }\n  }, [companyData, form]);\n  \n  // Save company info mutation\n  const saveMutation = useMutation({\n    mutationFn: async (data: CompanyFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/company-info\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Company info saved\",\n        description: \"Your company information has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-info\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error saving company info\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CompanyFormValues) => {\n    // Filter out empty staff members\n    data.cybersecurityStaff = data.cybersecurityStaff.filter(staff => staff.trim() !== '');\n    saveMutation.mutate(data);\n  };\n  \n  const addStaffMember = () => {\n    const newStaffMembers = [...staffMembers, ''];\n    setStaffMembers(newStaffMembers);\n    form.setValue('cybersecurityStaff', newStaffMembers);\n  };\n  \n  const removeStaffMember = (index: number) => {\n    const newStaffMembers = staffMembers.filter((_, i) => i !== index);\n    setStaffMembers(newStaffMembers);\n    form.setValue('cybersecurityStaff', newStaffMembers);\n  };\n  \n  const updateStaffMember = (index: number, value: string) => {\n    const newStaffMembers = [...staffMembers];\n    newStaffMembers[index] = value;\n    setStaffMembers(newStaffMembers);\n    form.setValue('cybersecurityStaff', newStaffMembers);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Logo Upload Component */}\n      <LogoUpload />\n      \n      {/* Company Details Form */}\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n        <CardHeader>\n          <CardTitle>Company Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Company Name */}\n              <FormField\n                control={form.control}\n                name=\"companyName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Company Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Acme Corporation\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Executive Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"ceoName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>CEO Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John Smith\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"cioName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>CIO Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Sarah Johnson\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"ctoName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>CTO Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Michael Brown\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"cisoName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>CISO Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"David Chen\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              {/* Cybersecurity Staff */}\n              <div className=\"mb-6\">\n                <FormLabel className=\"block text-sm font-medium mb-2\">Cybersecurity Staff</FormLabel>\n                <div className=\"space-y-2\">\n                  {staffMembers.map((member, index) => (\n                    <div key={index} className=\"flex items-center\">\n                      <Input\n                        value={member}\n                        onChange={(e) => updateStaffMember(index, e.target.value)}\n                        placeholder=\"Staff Member Name\"\n                        className=\"flex-1 rounded-r-none\"\n                      />\n                      <Button\n                        type=\"button\"\n                        onClick={() => removeStaffMember(index)}\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        className=\"rounded-l-none h-10 w-10\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                \n                <Button\n                  type=\"button\"\n                  onClick={addStaffMember}\n                  variant=\"ghost\"\n                  className=\"mt-2 text-sm text-primary hover:bg-primary/10\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add Another Staff Member\n                </Button>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <Button \n                  type=\"submit\" \n                  disabled={saveMutation.isPending}\n                >\n                  {saveMutation.isPending ? \"Saving...\" : \"Save Company Information\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Helper function for query\nfunction getQueryFn<T>({ on401 }: { on401: \"returnNull\" | \"throw\" }) {\n  return async ({ queryKey }: { queryKey: (string | number)[] }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (on401 === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    if (!res.ok) {\n      const text = (await res.text()) || res.statusText;\n      throw new Error(`${res.status}: ${text}`);\n    }\n\n    return await res.json() as T;\n  };\n}\n","size_bytes":9537},"client/src/components/company/document-upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Upload, Check, FileText } from \"lucide-react\";\n\ninterface DocumentUploadProps {\n  onUploadComplete?: (fileId: number) => void;\n  title?: string;\n}\n\nexport default function DocumentUpload({ \n  onUploadComplete, \n  title = \"Document Upload\" \n}: DocumentUploadProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const uploadMutation = useMutation({\n    mutationFn: async (fileData: FormData) => {\n      const res = await apiRequest(\"POST\", \"/api/company/documents\", fileData, {\n        isFormData: true,\n      });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Document uploaded\",\n        description: \"Your document has been uploaded successfully.\",\n      });\n      \n      if (onUploadComplete) {\n        onUploadComplete(data.fileId);\n      }\n      \n      // Reset the file input\n      setFile(null);\n      const fileInput = document.getElementById(\"document\") as HTMLInputElement;\n      if (fileInput) {\n        fileInput.value = \"\";\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      \n      // Validate file type\n      const validTypes = [\n        'application/pdf', \n        'application/msword', \n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ];\n      \n      if (!validTypes.includes(selectedFile.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload a PDF or Word document.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Validate file size (max 10MB)\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please upload a file smaller than 10MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setFile(selectedFile);\n    }\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const formData = new FormData();\n    formData.append(\"document\", file);\n    \n    uploadMutation.mutate(formData);\n  };\n  \n  return (\n    <Card className=\"shadow-md\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"document\">Document File</Label>\n            <Input \n              id=\"document\" \n              type=\"file\" \n              accept=\".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\" \n              onChange={handleFileChange}\n              className=\"cursor-pointer\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              Upload a PDF or Word document (max 10MB)\n            </p>\n          </div>\n          \n          {file && (\n            <div className=\"flex items-center gap-2 p-2 border rounded\">\n              <FileText className=\"h-5 w-5 text-primary\" />\n              <span className=\"text-sm truncate\">{file.name}</span>\n              <span className=\"text-xs text-muted-foreground ml-auto\">\n                {(file.size / 1024 / 1024).toFixed(2)} MB\n              </span>\n            </div>\n          )}\n          \n          <Button \n            type=\"submit\" \n            disabled={!file || uploadMutation.isPending}\n            className=\"w-full\"\n          >\n            {uploadMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Uploading...\n              </>\n            ) : uploadMutation.isSuccess ? (\n              <>\n                <Check className=\"mr-2 h-4 w-4\" />\n                Uploaded\n              </>\n            ) : (\n              <>\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Upload Document\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4941},"client/src/components/company/logo-upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Upload, Check } from \"lucide-react\";\n\nexport default function LogoUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [preview, setPreview] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const uploadMutation = useMutation({\n    mutationFn: async (fileData: FormData) => {\n      const res = await apiRequest(\"POST\", \"/api/upload/logo\", fileData, {\n        isFormData: true,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logo uploaded\",\n        description: \"Your company logo has been uploaded successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/company\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const selectedFile = e.target.files[0];\n      \n      // Validate file type\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml'];\n      if (!validTypes.includes(selectedFile.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload a JPEG, PNG, GIF, or SVG file.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Validate file size (max 2MB)\n      if (selectedFile.size > 2 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please upload a file smaller than 2MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setFile(selectedFile);\n      \n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const formData = new FormData();\n    formData.append(\"logo\", file);\n    \n    uploadMutation.mutate(formData);\n  };\n  \n  return (\n    <Card className=\"shadow-md\">\n      <CardHeader>\n        <CardTitle>Company Logo</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"logo\">Logo Image</Label>\n            <Input \n              id=\"logo\" \n              type=\"file\" \n              accept=\"image/jpeg, image/png, image/gif, image/svg+xml\" \n              onChange={handleFileChange}\n              className=\"cursor-pointer\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              Upload a JPEG, PNG, GIF, or SVG file (max 2MB)\n            </p>\n          </div>\n          \n          {preview && (\n            <div className=\"mt-4\">\n              <p className=\"text-sm font-medium mb-2\">Preview:</p>\n              <div className=\"border rounded-md p-4 flex justify-center\">\n                <img \n                  src={preview} \n                  alt=\"Logo preview\" \n                  className=\"max-h-32 max-w-full object-contain\" \n                />\n              </div>\n            </div>\n          )}\n          \n          <Button \n            type=\"submit\" \n            disabled={!file || uploadMutation.isPending}\n            className=\"w-full\"\n          >\n            {uploadMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Uploading...\n              </>\n            ) : uploadMutation.isSuccess ? (\n              <>\n                <Check className=\"mr-2 h-4 w-4\" />\n                Uploaded\n              </>\n            ) : (\n              <>\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Upload Logo\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4637},"client/src/components/company/policy-list.tsx":{"content":"import React from \"react\";\nimport { useQuery, QueryFunction, QueryKey } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Download, Loader2, AlertCircle } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n// Policy types badge styles\nconst policyTypeBadges: Record<string, string> = {\n  information_security: \"bg-blue-500/20 text-blue-700 border-blue-300\",\n  acceptable_use: \"bg-green-500/20 text-green-700 border-green-300\",\n  data_protection: \"bg-purple-500/20 text-purple-700 border-purple-300\",\n  incident_response: \"bg-red-500/20 text-red-700 border-red-300\",\n  business_continuity: \"bg-amber-500/20 text-amber-700 border-amber-300\",\n  password: \"bg-indigo-500/20 text-indigo-700 border-indigo-300\",\n  remote_access: \"bg-cyan-500/20 text-cyan-700 border-cyan-300\",\n};\n\n// Policy type labels\nconst policyTypeLabels: Record<string, string> = {\n  information_security: \"Information Security\",\n  acceptable_use: \"Acceptable Use\",\n  data_protection: \"Data Protection\",\n  incident_response: \"Incident Response\",\n  business_continuity: \"Business Continuity\",\n  password: \"Password Policy\",\n  remote_access: \"Remote Access\",\n};\n\ntype Policy = {\n  id: number;\n  title: string;\n  type: string;\n  content: string | null;\n  fileId: number | null;\n  createdAt: string;\n  updatedAt: string;\n  documentUrl?: string | null;\n};\n\nexport default function PolicyList() {\n  // Custom query function\n  const customQueryFn: QueryFunction<Policy[], QueryKey> = async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (!res.ok) {\n      const text = await res.text();\n      throw new Error(text || res.statusText);\n    }\n\n    return res.json();\n  };\n\n  // Fetch policies\n  const { data: policies, isLoading, error } = useQuery<Policy[]>({\n    queryKey: [\"/api/policies\"],\n    queryFn: customQueryFn,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n        <CardHeader>\n          <CardTitle>Policy Documents</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex justify-center p-8\">\n          <div className=\"flex flex-col items-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"mt-2 text-muted-foreground\">Loading policies...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n        <CardHeader>\n          <CardTitle>Policy Documents</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex justify-center p-8\">\n          <div className=\"flex flex-col items-center text-center\">\n            <AlertCircle className=\"h-8 w-8 text-destructive\" />\n            <p className=\"mt-2 font-medium\">Error loading policies</p>\n            <p className=\"text-sm text-muted-foreground\">{error.message}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!policies || policies.length === 0) {\n    return (\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n        <CardHeader>\n          <CardTitle>Policy Documents</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex justify-center p-8\">\n          <div className=\"flex flex-col items-center text-center\">\n            <FileText className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"mt-2 font-medium\">No policies found</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Upload your first policy document to get started.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n      <CardHeader>\n        <CardTitle>Policy Documents</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Title</TableHead>\n              <TableHead>Type</TableHead>\n              <TableHead>Last Updated</TableHead>\n              <TableHead>Document</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {policies.map((policy) => (\n              <TableRow key={policy.id}>\n                <TableCell className=\"font-medium\">{policy.title}</TableCell>\n                <TableCell>\n                  <Badge\n                    variant=\"outline\"\n                    className={policyTypeBadges[policy.type] || \"\"}\n                  >\n                    {policyTypeLabels[policy.type] || policy.type}\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"text-muted-foreground\">\n                  {formatDistanceToNow(new Date(policy.updatedAt), { addSuffix: true })}\n                </TableCell>\n                <TableCell>\n                  {policy.documentUrl ? (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      asChild\n                      className=\"text-primary hover:text-primary/80\"\n                    >\n                      <a href={policy.documentUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Download\n                      </a>\n                    </Button>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">No document</span>\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n\n","size_bytes":5968},"client/src/components/company/policy-upload.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Upload, FileText, Check, Loader2, Sparkles, PenLine, List, UploadCloud } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DocumentUpload from \"./document-upload\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Switch } from \"@/components/ui/switch\";\n\n// Policy upload form schema\nconst policyUploadSchema = z.object({\n  title: z.string().min(2, \"Title must be at least 2 characters\"),\n  type: z.string().min(1, \"Please select a policy type\"),\n  content: z.string().optional(),\n});\n\n// AI policy generation schema\nconst aiGenerationSchema = z.object({\n  policyType: z.string().min(1, \"Please select a policy type\"),\n  organization: z.string().min(2, \"Organization name is required\"),\n  industry: z.string().min(1, \"Please select your industry\"),\n  companySize: z.string().min(1, \"Please select your company size\"),\n  includeRegulatory: z.boolean().default(false),\n  regulations: z.array(z.string()).optional(),\n});\n\ntype PolicyUploadValues = z.infer<typeof policyUploadSchema>;\ntype AIGenerationValues = z.infer<typeof aiGenerationSchema>;\n\n// Template options for predefined policy templates\nconst policyTemplates = [\n  {\n    id: \"is-basic\",\n    name: \"Basic Information Security Policy\",\n    description: \"A fundamental policy covering essential security controls\",\n    type: \"information_security\",\n  },\n  {\n    id: \"is-comprehensive\",\n    name: \"Comprehensive Information Security Policy\",\n    description: \"Detailed policy aligned with ISO 27001 standards\",\n    type: \"information_security\",\n  },\n  {\n    id: \"password-standard\",\n    name: \"Password Policy\",\n    description: \"Standard password requirements and management\",\n    type: \"password\",\n  },\n  {\n    id: \"acceptable-use-basic\",\n    name: \"Acceptable Use Policy\",\n    description: \"Basic guidelines for appropriate use of IT resources\",\n    type: \"acceptable_use\",\n  },\n  {\n    id: \"data-protection-standard\",\n    name: \"Data Protection Policy\",\n    description: \"Standard controls for protecting sensitive data\",\n    type: \"data_protection\",\n  },\n];\n\nexport default function PolicyUpload() {\n  const [fileId, setFileId] = useState<number | null>(null);\n  const [mode, setMode] = useState<string>(\"upload\");\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const [generatingPolicy, setGeneratingPolicy] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<PolicyUploadValues>({\n    resolver: zodResolver(policyUploadSchema),\n    defaultValues: {\n      title: \"\",\n      type: \"\",\n      content: \"\",\n    },\n  });\n  \n  const aiForm = useForm<AIGenerationValues>({\n    resolver: zodResolver(aiGenerationSchema),\n    defaultValues: {\n      policyType: \"\",\n      organization: \"\",\n      industry: \"\",\n      companySize: \"\",\n      includeRegulatory: false,\n      regulations: [],\n    },\n  });\n\n  // Create policy mutation\n  const policyMutation = useMutation({\n    mutationFn: async (data: PolicyUploadValues) => {\n      // Include fileId with policy data if a document was uploaded\n      const policyData = fileId ? { ...data, fileId } : data;\n      const res = await apiRequest(\"POST\", \"/api/policies\", policyData);\n      return res.json();\n    },\n    onSuccess: async (policy) => {\n      toast({\n        title: \"Policy created\",\n        description: fileId \n          ? \"Your policy has been created successfully with the attached document.\" \n          : \"Your policy has been created successfully.\",\n      });\n      \n      // Reset the form\n      form.reset();\n      setFileId(null);\n      \n      // Invalidate policies query to refresh the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/policies\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error creating policy\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PolicyUploadValues) => {\n    policyMutation.mutate(data);\n  };\n  \n  const handleDocumentUploaded = (uploadedFileId: number) => {\n    setFileId(uploadedFileId);\n    toast({\n      title: \"Document ready\",\n      description: \"Document uploaded and ready to be attached to the policy.\",\n    });\n  };\n\n  // Generate AI policy function\n  const generateAIPolicy = async (data: AIGenerationValues) => {\n    setGeneratingPolicy(true);\n    \n    try {\n      // In a real application, this would call the backend API\n      // to generate the policy using AI\n      const response = await fetch('/api/policies/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate policy');\n      }\n      \n      const generatedPolicy = await response.json();\n      \n      // Populate the main form with the generated content\n      form.setValue('title', `${data.organization} ${data.policyType.replace('_', ' ')} Policy`);\n      form.setValue('type', data.policyType);\n      form.setValue('content', generatedPolicy.content);\n      \n      // Switch to the upload tab to review and save\n      setMode('upload');\n      \n      toast({\n        title: \"Policy Generated\",\n        description: \"Your policy has been generated. Please review and save it.\",\n      });\n    } catch (error) {\n      console.error(\"Error generating policy:\", error);\n      toast({\n        title: \"Generation Failed\",\n        description: error instanceof Error ? error.message : \"Could not generate policy. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setGeneratingPolicy(false);\n    }\n  };\n  \n  // Use template function\n  const useTemplate = (templateId: string) => {\n    const template = policyTemplates.find(t => t.id === templateId);\n    if (template) {\n      setSelectedTemplate(templateId);\n      form.setValue('type', template.type);\n      form.setValue('title', template.name);\n      \n      // In a real application, you would fetch the template content\n      // from the backend\n      fetch(`/api/policies/templates/${templateId}`)\n        .then(res => {\n          if (!res.ok) {\n            throw new Error('Template not found');\n          }\n          return res.json();\n        })\n        .then(data => {\n          form.setValue('content', data.content);\n          setMode('upload');\n          toast({\n            title: \"Template Applied\",\n            description: \"Template has been applied. You can now customize and save it.\",\n          });\n        })\n        .catch(error => {\n          // Fallback content if template fetch fails - in production this would be handled properly\n          form.setValue('content', `# ${template.name}\\n\\n${template.description}\\n\\nThis is a placeholder for the template content. In production, this would be fetched from the server.`);\n          setMode('upload');\n          toast({\n            title: \"Template Applied\",\n            description: \"A template outline has been applied. Please customize it before saving.\",\n          });\n        });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n        <CardHeader>\n          <CardTitle>Policy Management</CardTitle>\n          <CardDescription>\n            Create, generate, or upload policy documents for your organization\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"upload\" value={mode} onValueChange={setMode}>\n            <TabsList className=\"grid grid-cols-3 mb-6\">\n              <TabsTrigger value=\"upload\" className=\"flex items-center gap-2\">\n                <UploadCloud className=\"h-4 w-4\" />\n                Upload & Create\n              </TabsTrigger>\n              <TabsTrigger value=\"template\" className=\"flex items-center gap-2\">\n                <List className=\"h-4 w-4\" />\n                Use Template\n              </TabsTrigger>\n              <TabsTrigger value=\"ai\" className=\"flex items-center gap-2\">\n                <Sparkles className=\"h-4 w-4\" />\n                AI Generate\n              </TabsTrigger>\n            </TabsList>\n            \n            {/* Upload & Create Tab */}\n            <TabsContent value=\"upload\">\n              <div className=\"space-y-6\">\n                {/* Document Upload Component */}\n                <DocumentUpload \n                  onUploadComplete={handleDocumentUploaded}\n                  title=\"Policy Document Upload (Optional)\"\n                />\n                \n                {/* Policy Details Form */}\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {fileId && (\n                      <div className=\"bg-primary/10 border border-primary/20 rounded-md p-3 flex items-center\">\n                        <FileText className=\"h-5 w-5 text-primary mr-2\" />\n                        <span className=\"text-sm font-medium\">Document uploaded and ready to attach</span>\n                        <Check className=\"h-4 w-4 text-green-500 ml-auto\" />\n                      </div>\n                    )}\n                  \n                    {/* Policy Title */}\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Policy Title</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Information Security Policy\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Policy Type */}\n                    <FormField\n                      control={form.control}\n                      name=\"type\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Policy Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a policy type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"information_security\">Information Security Policy</SelectItem>\n                              <SelectItem value=\"acceptable_use\">Acceptable Use Policy</SelectItem>\n                              <SelectItem value=\"data_protection\">Data Protection Policy</SelectItem>\n                              <SelectItem value=\"incident_response\">Incident Response Plan</SelectItem>\n                              <SelectItem value=\"business_continuity\">Business Continuity Plan</SelectItem>\n                              <SelectItem value=\"password\">Password Policy</SelectItem>\n                              <SelectItem value=\"remote_access\">Remote Access Policy</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Policy Content (Optional if document is uploaded) */}\n                    <FormField\n                      control={form.control}\n                      name=\"content\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Policy Content {fileId ? \"(Optional)\" : \"\"}</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Enter policy text content here (optional if document is uploaded)\"\n                              className=\"min-h-[200px]\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        type=\"button\"\n                        onClick={() => form.reset()}\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\"\n                        disabled={policyMutation.isPending}\n                      >\n                        {policyMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Creating...\n                          </>\n                        ) : (\n                          <>\n                            <Check className=\"mr-2 h-4 w-4\" />\n                            Create Policy\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            </TabsContent>\n            \n            {/* Template Tab */}\n            <TabsContent value=\"template\">\n              <div className=\"space-y-6\">\n                <div className=\"bg-primary/5 rounded-lg p-4 mb-6\">\n                  <h3 className=\"text-lg font-medium flex items-center gap-2\">\n                    <List className=\"h-5 w-5 text-primary\" />\n                    Policy Templates\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Select a pre-defined policy template to get started quickly. You can customize the content after selecting.\n                  </p>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <RadioGroup value={selectedTemplate || \"\"} onValueChange={setSelectedTemplate}>\n                    {policyTemplates.map((template) => (\n                      <div\n                        key={template.id}\n                        className={`flex items-start space-x-2 p-3 rounded-md border transition-colors ${\n                          selectedTemplate === template.id ? \"border-primary bg-primary/5\" : \"border-border\"\n                        }`}\n                      >\n                        <RadioGroupItem value={template.id} id={`template-${template.id}`} />\n                        <label\n                          htmlFor={`template-${template.id}`}\n                          className=\"flex flex-1 flex-col cursor-pointer\"\n                        >\n                          <span className=\"font-medium\">{template.name}</span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {template.description}\n                          </span>\n                        </label>\n                      </div>\n                    ))}\n                  </RadioGroup>\n                </div>\n                \n                <div className=\"flex justify-end space-x-2 mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    type=\"button\"\n                    onClick={() => setSelectedTemplate(null)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"button\"\n                    disabled={!selectedTemplate}\n                    onClick={() => selectedTemplate && useTemplate(selectedTemplate)}\n                  >\n                    <PenLine className=\"mr-2 h-4 w-4\" />\n                    Use Template\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n            \n            {/* AI Generate Tab */}\n            <TabsContent value=\"ai\">\n              <div className=\"space-y-6\">\n                <div className=\"bg-primary/5 rounded-lg p-4 mb-6 border border-primary/10\">\n                  <h3 className=\"text-lg font-medium flex items-center gap-2\">\n                    <Sparkles className=\"h-5 w-5 text-primary\" />\n                    AI Policy Generator\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Generate a customized policy document based on your organization's specific needs and context.\n                  </p>\n                </div>\n                \n                <Form {...aiForm}>\n                  <form onSubmit={aiForm.handleSubmit(generateAIPolicy)} className=\"space-y-6\">\n                    {/* Policy Type */}\n                    <FormField\n                      control={aiForm.control}\n                      name=\"policyType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Policy Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a policy type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"information_security\">Information Security Policy</SelectItem>\n                              <SelectItem value=\"acceptable_use\">Acceptable Use Policy</SelectItem>\n                              <SelectItem value=\"data_protection\">Data Protection Policy</SelectItem>\n                              <SelectItem value=\"incident_response\">Incident Response Plan</SelectItem>\n                              <SelectItem value=\"password\">Password Policy</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Organization Name */}\n                    <FormField\n                      control={aiForm.control}\n                      name=\"organization\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Organization Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your company name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Industry */}\n                    <FormField\n                      control={aiForm.control}\n                      name=\"industry\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Industry</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select your industry\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"financial\">Financial Services</SelectItem>\n                              <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                              <SelectItem value=\"tech\">Technology</SelectItem>\n                              <SelectItem value=\"government\">Government</SelectItem>\n                              <SelectItem value=\"retail\">Retail</SelectItem>\n                              <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                              <SelectItem value=\"education\">Education</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Company Size */}\n                    <FormField\n                      control={aiForm.control}\n                      name=\"companySize\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Company Size</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select company size\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"small\">Small (1-50 employees)</SelectItem>\n                              <SelectItem value=\"medium\">Medium (51-500 employees)</SelectItem>\n                              <SelectItem value=\"large\">Large (501+ employees)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Include Regulatory Requirements */}\n                    <FormField\n                      control={aiForm.control}\n                      name=\"includeRegulatory\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Regulatory Compliance</FormLabel>\n                            <FormDescription>\n                              Include regulatory compliance requirements\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        type=\"button\"\n                        onClick={() => aiForm.reset()}\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\"\n                        disabled={generatingPolicy}\n                      >\n                        {generatingPolicy ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Generating...\n                          </>\n                        ) : (\n                          <>\n                            <Sparkles className=\"mr-2 h-4 w-4\" />\n                            Generate Policy\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":24768},"client/src/components/dashboard/compliance-score.tsx":{"content":"import React from \"react\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ComplianceScoreProps {\n  score: number;\n}\n\nexport default function ComplianceScore({ score }: ComplianceScoreProps) {\n  // Get the status based on score\n  const getStatus = () => {\n    if (score >= 80) return { text: \"Good\", color: \"text-green-500\" };\n    if (score >= 60) return { text: \"Average\", color: \"text-amber-500\" };\n    return { text: \"Needs Improvement\", color: \"text-red-500\" };\n  };\n  \n  // Get progress color\n  const getProgressColor = () => {\n    if (score >= 80) return \"bg-green-500\";\n    if (score >= 60) return \"bg-amber-500\";\n    return \"bg-red-500\";\n  };\n  \n  const status = getStatus();\n  \n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-1\">\n        <div className=\"text-2xl font-bold\">{score}%</div>\n        <div className={`text-sm ${status.color}`}>{status.text}</div>\n      </div>\n      \n      <Progress \n        value={score} \n        max={100} \n        className=\"h-2 bg-muted\"\n        style={{ \n          \"--progress-background\": getProgressColor() \n        } as React.CSSProperties} \n      />\n      \n      <p className=\"text-xs text-muted-foreground mt-1\">\n        {80 - score > 0 ? `${80 - score}% needed for compliance` : \"Compliance achieved\"}\n      </p>\n    </div>\n  );\n}\n","size_bytes":1329},"client/src/components/dashboard/risk-heatmap.tsx":{"content":"import React from \"react\";\nimport { Card } from \"@/components/ui/card\";\n\n// Simulated risk data\nconst riskData = [\n  { category: \"Network Security\", level: \"high\", issues: 3 },\n  { category: \"Access Controls\", level: \"medium\", issues: 2 },\n  { category: \"Data Protection\", level: \"low\", issues: 1 },\n  { category: \"Incident Response\", level: \"medium\", issues: 2 },\n  { category: \"Physical Security\", level: \"low\", issues: 0 },\n  { category: \"Application Security\", level: \"high\", issues: 4 },\n  { category: \"Cloud Security\", level: \"medium\", issues: 2 },\n  { category: \"Third-Party Risk\", level: \"high\", issues: 3 },\n  { category: \"Compliance\", level: \"low\", issues: 1 },\n];\n\nexport default function RiskHeatmap() {\n  const getRiskColor = (level: string) => {\n    switch (level) {\n      case \"low\":\n        return \"bg-green-500/20 text-green-500 border-green-500/30\";\n      case \"medium\":\n        return \"bg-amber-500/20 text-amber-500 border-amber-500/30\";\n      case \"high\":\n        return \"bg-red-500/20 text-red-500 border-red-500/30\";\n      default:\n        return \"bg-gray-500/20 text-gray-500 border-gray-500/30\";\n    }\n  };\n  \n  return (\n    <div>\n      <div className=\"grid grid-cols-3 gap-4\">\n        {riskData.map((risk, index) => (\n          <Card \n            key={index}\n            className={`p-3 flex flex-col items-center justify-center border ${getRiskColor(risk.level)}`}\n          >\n            <div className=\"text-sm font-medium\">{risk.category}</div>\n            <div className=\"mt-1 flex items-center\">\n              <div className={`w-3 h-3 rounded-full mr-1 ${\n                risk.level === \"low\" ? \"bg-green-500\" : \n                risk.level === \"medium\" ? \"bg-amber-500\" : \"bg-red-500\"\n              }`}></div>\n              <span className=\"text-xs capitalize\">{risk.level} Risk</span>\n            </div>\n            <div className=\"text-xs mt-1\">\n              {risk.issues} {risk.issues === 1 ? \"issue\" : \"issues\"}\n            </div>\n          </Card>\n        ))}\n      </div>\n      \n      <div className=\"mt-4 flex justify-end\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-full bg-green-500 mr-1\"></div>\n            <span className=\"text-xs text-muted-foreground\">Low Risk</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-full bg-amber-500 mr-1\"></div>\n            <span className=\"text-xs text-muted-foreground\">Medium Risk</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500 mr-1\"></div>\n            <span className=\"text-xs text-muted-foreground\">High Risk</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2808},"client/src/components/dashboard/sidebar.tsx":{"content":"import React from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Shield,\n  LayoutDashboard,\n  Users,\n  FileText,\n  Star,\n  Clock,\n  Settings,\n  LogOut,\n  Bot,\n  Presentation,\n  BarChart4,\n  AlertTriangle,\n  History,\n  GraduationCap,\n} from \"lucide-react\";\n\nconst menuItems = [\n  {\n    name: \"Dashboard\",\n    icon: LayoutDashboard,\n    path: \"/dashboard\",\n  },\n  {\n    name: \"Onboarding\",\n    icon: GraduationCap,\n    path: \"/onboarding\",\n  },\n  {\n    name: \"User Management\",\n    icon: Users,\n    path: \"/admin\",\n  },\n  {\n    name: \"Policy Management\",\n    icon: FileText,\n    path: \"/policies\",\n  },\n  {\n    name: \"Risk Management\",\n    icon: AlertTriangle,\n    path: \"/risk-management\",\n  },\n  {\n    name: \"Security Timeline\",\n    icon: History,\n    path: \"/security-timeline\",\n  },\n  {\n    name: \"NCA ECC Assessment\",\n    icon: Star,\n    path: \"/frameworks/nca-ecc-assessment\",\n  },\n  {\n    name: \"SAMA Assessment\",\n    icon: Shield,\n    path: \"/frameworks/sama-assessment\",\n  },\n  {\n    name: \"Compliance Tasks\",\n    icon: Clock,\n    path: \"/tasks\",\n  },\n  {\n    name: \"Virtual Assistant\",\n    icon: Bot,\n    path: \"/virtual-assistant\",\n  },\n  {\n    name: \"D-ID Agent\",\n    icon: Presentation,\n    path: \"/did-agent\",\n  },\n  {\n    name: \"Settings\",\n    icon: Settings,\n    path: \"/settings\",\n  },\n];\n\nexport default function Sidebar() {\n  const [location, navigate] = useLocation();\n  const { logoutMutation } = useAuth();\n  \n  const isActive = (path: string) => {\n    if (path === \"/dashboard\" && location === \"/dashboard\") {\n      return true;\n    }\n    if (path === \"/onboarding\" && location === \"/onboarding\") {\n      return true;\n    }\n    if (path === \"/admin\" && location === \"/admin\") {\n      return true;\n    }\n    if (path === \"/virtual-assistant\" && location === \"/virtual-assistant\") {\n      return true;\n    }\n    if (path === \"/did-agent\" && location === \"/did-agent\") {\n      return true;\n    }\n    if (path === \"/risk-management\" && location === \"/risk-management\") {\n      return true;\n    }\n    if (path === \"/policies\" && location === \"/policies\") {\n      return true;\n    }\n    if (path === \"/security-timeline\" && location === \"/security-timeline\") {\n      return true;\n    }\n    if (path === \"/frameworks/nca-ecc-assessment\" && location === \"/frameworks/nca-ecc-assessment\") {\n      return true;\n    }\n    if (path === \"/frameworks/sama-assessment\" && location === \"/frameworks/sama-assessment\") {\n      return true;\n    }\n    return location === path;\n  };\n  \n  const handleLogout = () => {\n    logoutMutation.mutate();\n    navigate(\"/\");\n  };\n  \n  return (\n    <div className=\"hidden md:flex flex-col w-64 bg-background/60 backdrop-blur-sm border-r border-primary/10 p-4\">\n      <div className=\"flex items-center gap-2 py-4\">\n        <Shield className=\"h-8 w-8 text-primary\" />\n        <span className=\"text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-emerald-400\">MetaWorks</span>\n      </div>\n      \n      <div className=\"mt-8 flex flex-col flex-1 gap-1\">\n        {menuItems.map((item) => (\n          <div\n            key={item.name}\n            onClick={() => navigate(item.path)}\n            className={`flex items-center px-3 py-2 rounded-md cursor-pointer ${\n              isActive(item.path)\n                ? \"bg-primary bg-opacity-20 text-primary border-l-2 border-primary\"\n                : \"hover:bg-primary/10 hover:text-primary text-muted-foreground\"\n            } transition-colors`}\n          >\n            <item.icon className=\"mr-3 h-5 w-5\" />\n            <span>{item.name}</span>\n          </div>\n        ))}\n      </div>\n      \n      <div \n        onClick={handleLogout}\n        className=\"flex items-center px-3 py-2 mt-auto rounded-md cursor-pointer text-muted-foreground hover:bg-destructive/10 hover:text-destructive transition-colors\"\n      >\n        <LogOut className=\"mr-3 h-5 w-5\" />\n        <span>Logout</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3985},"client/src/components/did-agent/agent-iframe.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Sparkles } from \"lucide-react\";\n\ninterface AgentIframeProps {\n  title?: string;\n  shareLink?: string;\n  height?: string;\n}\n\nexport default function AgentIframe({\n  title = \"MetaWorks Security Assistant\",\n  shareLink = \"https://studio.d-id.com/agents/share?id=agt_YjpQXzSG&utm_source=copy&key=WjI5dloyeGxMVzloZFhSb01ud3hNRGM1TWpNME5qWTNORFkxTURVeU1UTTJPVEU2V0hKdlJGRlNZbkJITW5nMlNYSkdSRGxJY2paRA==\",\n  height = \"600px\"\n}: AgentIframeProps) {\n  return (\n    <Card className=\"w-full shadow-lg border-primary/10 backdrop-blur-sm bg-card/50\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n          <span>{title}</span>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"pb-2\">\n        <div className=\"rounded-lg overflow-hidden w-full bg-black/5\">\n          <iframe\n            src={shareLink}\n            width=\"100%\"\n            height={height}\n            className=\"border-0\"\n            allow=\"camera; microphone; clipboard-write; autoplay\"\n            allowFullScreen\n          ></iframe>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1295},"client/src/components/did-agent/agent-script.tsx":{"content":"import React, { useEffect, useRef } from 'react';\n\ninterface AgentScriptProps {\n  height?: string;\n  width?: string;\n  className?: string;\n  containerClassName?: string;\n}\n\nexport default function AgentScript({\n  height = '600px',\n  width = '100%',\n  className = '',\n  containerClassName = '',\n}: AgentScriptProps) {\n  const agentContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Create script element\n    const script = document.createElement('script');\n    script.type = 'module';\n    script.src = 'https://agent.d-id.com/v1/index.js';\n    script.dataset.name = 'did-agent';\n    script.dataset.mode = 'fabio';\n    script.dataset.clientKey = 'Z29vZ2xlLW9hdXRoMnwxMDc5MjM0NjY3NDY1MDUyMTM2OTE6WHJvRFFSYnBHMng2SXJGRDlIcjZD';\n    script.dataset.agentId = 'agt_YjpQXzSG';\n    script.dataset.monitor = 'true';\n    \n    // Only add the script if it doesn't already exist\n    if (agentContainerRef.current && !agentContainerRef.current.querySelector('script')) {\n      agentContainerRef.current.appendChild(script);\n    }\n    \n    // Cleanup function\n    return () => {\n      if (agentContainerRef.current) {\n        const scriptElement = agentContainerRef.current.querySelector('script');\n        if (scriptElement) {\n          agentContainerRef.current.removeChild(scriptElement);\n        }\n      }\n    };\n  }, []);\n\n  return (\n    <div className={`${containerClassName}`}>\n      <div \n        ref={agentContainerRef}\n        style={{ height, width }}\n        className={`bg-card rounded-lg overflow-hidden ${className}`}\n      />\n    </div>\n  );\n}","size_bytes":1566},"client/src/components/did-agent/agent-widget.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Send, Sparkles, Volume2, VolumeX } from \"lucide-react\";\n\ninterface AgentWidgetProps {\n  title?: string;\n  initialMessage?: string;\n  showInput?: boolean;\n}\n\nexport default function AgentWidget({ \n  title = \"MetaWorks Security Assistant\", \n  initialMessage = \"Hello, I'm your security assistant. How can I help you today?\", \n  showInput = true\n}: AgentWidgetProps) {\n  const [message, setMessage] = useState(\"\");\n  const [isSending, setIsSending] = useState(false);\n  const [agentId, setAgentId] = useState<string | null>(null);\n  const [apiKey, setApiKey] = useState<string | null>(null);\n  const [talkId, setTalkId] = useState<string | null>(null);\n  const [videoUrl, setVideoUrl] = useState<string | null>(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const { toast } = useToast();\n\n  // Fetch DID API keys when component mounts\n  useEffect(() => {\n    async function fetchDidKeys() {\n      try {\n        const response = await fetch('/api/did-keys');\n        if (!response.ok) {\n          throw new Error('Failed to fetch DID keys');\n        }\n        \n        const data = await response.json();\n        setAgentId(data.agentId || 'kgn-KqCZSo');\n        setApiKey(data.apiKey || null);\n        \n        // If no initial message is provided, don't send anything\n        if (initialMessage) {\n          await sendMessage(initialMessage);\n        }\n      } catch (error) {\n        console.error('Error fetching DID keys:', error);\n        toast({\n          title: \"Connection Error\",\n          description: \"Could not connect to the virtual agent service\",\n          variant: \"destructive\"\n        });\n      }\n    }\n    \n    fetchDidKeys();\n  }, [initialMessage, toast]);\n\n  // Handle sending a message to the DID API\n  const sendMessage = async (text: string) => {\n    try {\n      setIsSending(true);\n\n      // Call our backend API which will securely communicate with DID\n      const response = await fetch('/api/did-agent/talk', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text,\n          presenter_id: agentId\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to communicate with agent service');\n      }\n\n      const data = await response.json();\n      setTalkId(data.id);\n\n      // Poll for the completed talk\n      pollTalkStatus(data.id);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast({\n        title: \"Message Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message to the agent\",\n        variant: \"destructive\"\n      });\n      setIsSending(false);\n    }\n  };\n\n  // Poll the talk status until it's ready\n  const pollTalkStatus = async (id: string) => {\n    try {\n      const response = await fetch(`/api/did-agent/talk/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to check talk status');\n      }\n\n      const data = await response.json();\n      \n      if (data.status === 'done') {\n        setVideoUrl(data.result_url);\n        setIsSending(false);\n      } else if (data.status === 'error') {\n        throw new Error(data.error || 'An error occurred with the agent service');\n      } else {\n        // Continue polling if not done\n        setTimeout(() => pollTalkStatus(id), 1000);\n      }\n    } catch (error) {\n      console.error('Error polling talk status:', error);\n      toast({\n        title: \"Agent Error\",\n        description: error instanceof Error ? error.message : \"Failed to get agent response\",\n        variant: \"destructive\"\n      });\n      setIsSending(false);\n    }\n  };\n\n  // Handle user message submission\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!message.trim()) return;\n    \n    sendMessage(message);\n    setMessage(\"\");\n  };\n\n  // Toggle mute state\n  const toggleMute = () => {\n    if (videoRef.current) {\n      videoRef.current.muted = !videoRef.current.muted;\n      setIsMuted(!isMuted);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md shadow-lg border-primary/10 backdrop-blur-sm bg-card/50\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n          <span>{title}</span>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"pb-2\">\n        <div className=\"rounded-lg overflow-hidden bg-black/5 aspect-video w-full flex items-center justify-center relative\">\n          {videoUrl ? (\n            <>\n              <video \n                ref={videoRef} \n                src={videoUrl} \n                className=\"w-full h-full object-cover\"\n                autoPlay \n                loop\n              />\n              <Button \n                variant=\"outline\" \n                size=\"icon\" \n                className=\"absolute bottom-2 right-2 bg-background/80 hover:bg-background/90\"\n                onClick={toggleMute}\n              >\n                {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n              </Button>\n            </>\n          ) : (\n            <div className=\"text-center p-4\">\n              {isSending ? (\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n                  <p className=\"text-sm text-muted-foreground\">Your security assistant is thinking...</p>\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">Your security assistant is ready to help</p>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n      \n      {showInput && (\n        <CardFooter>\n          <form onSubmit={handleSubmit} className=\"w-full space-y-2\">\n            <div className=\"flex w-full items-center space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Ask me anything about cybersecurity...\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                disabled={isSending}\n                className=\"flex-1\"\n              />\n              <Button \n                type=\"submit\" \n                size=\"icon\"\n                disabled={isSending || !message.trim()}\n              >\n                {isSending ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Send className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </form>\n        </CardFooter>\n      )}\n    </Card>\n  );\n}","size_bytes":7055},"client/src/components/landing/admin-preview.tsx":{"content":"import React from \"react\";\nimport {\n  LayoutDashboard, Users, FileText, Star, Clock, Settings, Shield,\n} from \"lucide-react\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nconst sidebarItems = [\n  { name: \"Dashboard\", icon: LayoutDashboard, isActive: false },\n  { name: \"User Management\", icon: Users, isActive: true },\n  { name: \"Policy Management\", icon: FileText, isActive: false },\n  { name: \"Risk Assessment\", icon: Star, isActive: false },\n  { name: \"Compliance Tasks\", icon: Clock, isActive: false },\n  { name: \"Settings\", icon: Settings, isActive: false },\n];\n\nconst sampleUsers = [\n  {\n    name: \"Sarah Adams\",\n    email: \"sarah@example.com\",\n    role: \"Admin\",\n    accessLevel: \"Premium\",\n    isActive: true,\n    initials: \"SA\"\n  },\n  {\n    name: \"Michael Johnson\",\n    email: \"michael@example.com\",\n    role: \"Security Engineer\",\n    accessLevel: \"Basic\",\n    isActive: true,\n    initials: \"MJ\"\n  }\n];\n\nexport default function AdminPreview() {\n  return (\n    <section className=\"py-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Admin Control Panel</h2>\n          <p className=\"text-gray-400 max-w-3xl mx-auto\">Manage users, monitor compliance, and control all aspects of your cybersecurity posture.</p>\n        </div>\n        \n        <div className=\"backdrop-blur-sm bg-card/30 border border-primary/10 p-6 md:p-8 rounded-xl overflow-hidden shadow-xl\">\n          <div className=\"flex flex-col lg:flex-row\">\n            {/* Admin Sidebar Preview */}\n            <div className=\"lg:w-64 p-4 backdrop-blur-sm bg-card/30 border border-primary/10 rounded-lg mr-6 mb-6 lg:mb-0 flex-shrink-0\">\n              <div className=\"flex items-center mb-8\">\n                <Shield className=\"w-8 h-8 text-primary\" />\n                <span className=\"ml-2 text-lg font-bold\">Admin Panel</span>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {sidebarItems.map((item, index) => (\n                  <div\n                    key={index}\n                    className={`flex items-center p-2 rounded-md ${\n                      item.isActive \n                        ? \"bg-primary bg-opacity-20 text-primary border-l-2 border-primary\" \n                        : \"text-gray-400 hover:text-primary transition-colors\"\n                    }`}\n                  >\n                    <item.icon className=\"w-5 h-5 mr-3\" />\n                    {item.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Admin Content Preview */}\n            <div className=\"flex-1 backdrop-blur-sm bg-card/30 border border-primary/10 rounded-lg p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-semibold\">User Management</h3>\n                <button className=\"px-4 py-2 rounded-md bg-primary text-white text-sm font-medium hover:bg-primary/90 transition-colors\">\n                  Add New User\n                </button>\n              </div>\n              \n              {/* User Management Form */}\n              <div className=\"backdrop-blur-sm bg-card/40 border border-primary/10 rounded-lg p-6 mb-6\">\n                <h4 className=\"text-lg font-semibold mb-4\">Create New User</h4>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">Full Name</label>\n                    <input \n                      type=\"text\" \n                      className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                      placeholder=\"John Doe\" \n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">Email Address</label>\n                    <input \n                      type=\"email\" \n                      className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                      placeholder=\"john@example.com\" \n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">User Role</label>\n                    <select className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\">\n                      <option>Admin</option>\n                      <option>Compliance Officer</option>\n                      <option>Security Engineer</option>\n                      <option>Auditor</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">Access Level</label>\n                    <select className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\">\n                      <option>Trial</option>\n                      <option>Basic</option>\n                      <option>Premium</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <button className=\"px-4 py-2 rounded-md bg-gray-700 text-white text-sm font-medium mr-2 hover:bg-gray-600 transition-colors\">\n                    Cancel\n                  </button>\n                  <button className=\"px-4 py-2 rounded-md bg-primary text-white text-sm font-medium hover:bg-primary/90 transition-colors\">\n                    Create User\n                  </button>\n                </div>\n              </div>\n              \n              {/* User List */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-700\">\n                  <thead>\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">User</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Role</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Access Level</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Status</th>\n                      <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-700\">\n                    {sampleUsers.map((user, index) => (\n                      <tr key={index}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"flex-shrink-0 h-10 w-10\">\n                              <Avatar>\n                                <AvatarFallback className={`${\n                                  index === 0 ? \"bg-primary/20 text-primary\" : \"bg-emerald-500/20 text-emerald-400\"\n                                }`}>\n                                  {user.initials}\n                                </AvatarFallback>\n                              </Avatar>\n                            </div>\n                            <div className=\"ml-4\">\n                              <div className=\"text-sm font-medium\">{user.name}</div>\n                              <div className=\"text-sm text-gray-400\">{user.email}</div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">{user.role}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">{user.accessLevel}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-500 bg-opacity-20 text-green-500\">\n                            Active\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n                          <button className=\"text-primary hover:text-primary/80 mr-3\">Edit</button>\n                          <button className=\"text-red-500 hover:text-red-400\">Delete</button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9043},"client/src/components/landing/company-info-section.tsx":{"content":"import React from \"react\";\nimport { Upload, X, Plus, Eye, Download, FileText } from \"lucide-react\";\n\nexport default function CompanyInfoSection() {\n  return (\n    <section className=\"py-20 bg-background/80\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Company Information Dashboard</h2>\n          <p className=\"text-gray-400 max-w-3xl mx-auto\">Easily manage your organization's information and compliance documentation.</p>\n        </div>\n        \n        <div className=\"backdrop-blur-sm bg-card/30 border border-primary/10 p-6 md:p-8 rounded-xl shadow-xl\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Company Info Form */}\n            <div className=\"lg:w-1/2\">\n              <h3 className=\"text-xl font-semibold mb-6\">Company Details</h3>\n              \n              <div className=\"backdrop-blur-sm bg-card/30 border border-primary/10 rounded-lg p-6 mb-6\">\n                {/* Company Logo Upload */}\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">Company Logo</label>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-20 h-20 rounded-md bg-background border border-gray-700 flex items-center justify-center mr-4\">\n                      <Upload className=\"w-8 h-8 text-gray-500\" />\n                    </div>\n                    <div>\n                      <button className=\"px-4 py-2 rounded-md bg-primary/10 text-primary text-sm font-medium border border-primary/20 hover:bg-primary/20 transition-colors\">\n                        Upload Logo\n                      </button>\n                      <p className=\"text-xs text-gray-400 mt-1\">PNG, JPG or SVG (max. 2MB)</p>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Company Name */}\n                <div className=\"mb-4\">\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">Company Name</label>\n                  <input \n                    type=\"text\" \n                    className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                    placeholder=\"Acme Corporation\" \n                  />\n                </div>\n                \n                {/* Executive Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">CEO Name</label>\n                    <input \n                      type=\"text\" \n                      className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                      placeholder=\"John Smith\" \n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">CIO Name</label>\n                    <input \n                      type=\"text\" \n                      className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                      placeholder=\"Sarah Johnson\" \n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">CTO Name</label>\n                    <input \n                      type=\"text\" \n                      className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                      placeholder=\"Michael Brown\" \n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-1\">CISO Name</label>\n                    <input \n                      type=\"text\" \n                      className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                      placeholder=\"David Chen\" \n                    />\n                  </div>\n                </div>\n                \n                {/* Cybersecurity Staff */}\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">Cybersecurity Staff</label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center\">\n                      <input \n                        type=\"text\" \n                        className=\"flex-1 p-2 rounded-l-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                        placeholder=\"Staff Member Name\" \n                      />\n                      <button className=\"p-2 rounded-r-md bg-red-500 bg-opacity-20 text-red-500 border border-l-0 border-red-500 border-opacity-20 hover:bg-opacity-30 transition-colors\">\n                        <X className=\"w-5 h-5\" />\n                      </button>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <input \n                        type=\"text\" \n                        className=\"flex-1 p-2 rounded-l-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\" \n                        placeholder=\"Staff Member Name\" \n                      />\n                      <button className=\"p-2 rounded-r-md bg-red-500 bg-opacity-20 text-red-500 border border-l-0 border-red-500 border-opacity-20 hover:bg-opacity-30 transition-colors\">\n                        <X className=\"w-5 h-5\" />\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <button className=\"mt-2 flex items-center text-sm text-primary\">\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Another Staff Member\n                  </button>\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <button className=\"px-4 py-2 rounded-md bg-primary text-white text-sm font-medium hover:bg-primary/90 transition-colors\">\n                    Save Company Information\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            {/* Policy Document Management */}\n            <div className=\"lg:w-1/2\">\n              <h3 className=\"text-xl font-semibold mb-6\">Policy Document Management</h3>\n              \n              <div className=\"backdrop-blur-sm bg-card/30 border border-primary/10 rounded-lg p-6 mb-6\">\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">Upload Policy Document</label>\n                  <div className=\"border-2 border-dashed border-gray-700 rounded-lg p-6 text-center\">\n                    <Upload className=\"mx-auto h-12 w-12 text-gray-500\" />\n                    <p className=\"mt-1 text-sm text-gray-400\">Drag and drop your document here, or click to browse</p>\n                    <button className=\"mt-4 px-4 py-2 rounded-md bg-primary/10 text-primary text-sm font-medium border border-primary/20 hover:bg-primary/20 transition-colors\">\n                      Select Document\n                    </button>\n                    <p className=\"mt-1 text-xs text-gray-500\">DOCX, PDF (max. 10MB)</p>\n                  </div>\n                </div>\n                \n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">Policy Type</label>\n                  <select className=\"w-full p-2 rounded-md bg-background border border-gray-700 focus:border-primary transition-colors focus:outline-none\">\n                    <option>Information Security Policy</option>\n                    <option>Acceptable Use Policy</option>\n                    <option>Data Protection Policy</option>\n                    <option>Incident Response Plan</option>\n                    <option>Business Continuity Plan</option>\n                    <option>Password Policy</option>\n                    <option>Remote Access Policy</option>\n                  </select>\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <button className=\"px-4 py-2 rounded-md bg-gray-700 text-white text-sm font-medium mr-2 hover:bg-gray-600 transition-colors\">\n                    Cancel\n                  </button>\n                  <button className=\"px-4 py-2 rounded-md bg-primary text-white text-sm font-medium hover:bg-primary/90 transition-colors\">\n                    Process Document\n                  </button>\n                </div>\n              </div>\n              \n              {/* Document List */}\n              <div className=\"backdrop-blur-sm bg-card/30 border border-primary/10 rounded-lg p-6\">\n                <h4 className=\"text-lg font-semibold mb-4\">Automated Policies</h4>\n                \n                <div className=\"space-y-3\">\n                  {[\n                    {\n                      title: \"Information Security Policy\",\n                      updatedAt: \"2 days ago\"\n                    },\n                    {\n                      title: \"Acceptable Use Policy\",\n                      updatedAt: \"1 week ago\"\n                    },\n                    {\n                      title: \"Incident Response Plan\",\n                      updatedAt: \"3 weeks ago\"\n                    }\n                  ].map((policy, index) => (\n                    <div \n                      key={index} \n                      className=\"flex justify-between items-center p-3 hover:bg-background/50 rounded-lg transition-colors\"\n                    >\n                      <div className=\"flex items-center\">\n                        <FileText className=\"w-6 h-6 text-primary mr-3\" />\n                        <div>\n                          <p className=\"text-sm font-medium\">{policy.title}</p>\n                          <p className=\"text-xs text-gray-400\">Last updated: {policy.updatedAt}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button className=\"p-1.5 rounded-md text-gray-400 hover:text-primary hover:bg-primary/10 transition-colors\">\n                          <Eye className=\"w-5 h-5\" />\n                        </button>\n                        <button className=\"p-1.5 rounded-md text-gray-400 hover:text-emerald-400 hover:bg-emerald-400/10 transition-colors\">\n                          <Download className=\"w-5 h-5\" />\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11175},"client/src/components/landing/compliance-logos.tsx":{"content":"import React from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function ComplianceLogos() {\n  const [_, navigate] = useLocation();\n\n  // Navigate to framework pages\n  const navigateToNcaEcc = () => navigate(\"/frameworks/nca-ecc\");\n  const navigateToSama = () => navigate(\"/frameworks/sama\");\n  const navigateToPdpl = () => navigate(\"/frameworks/pdpl\");\n  const navigateToIso = () => navigate(\"/frameworks/iso-27001\");\n\n  return (\n    <div className=\"py-8 bg-background relative\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h2 className=\"text-2xl font-bold text-center text-primary mb-6\">Supported Compliance Frameworks</h2>\n        \n        <div className=\"flex flex-wrap justify-center items-center gap-8 md:gap-12\">\n          {/* NCA ECC Logo */}\n          <div \n            className=\"flex flex-col items-center cursor-pointer transition-transform hover:scale-110\"\n            onClick={navigateToNcaEcc}\n          >\n            <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mb-2\">\n              <div className=\"text-3xl font-bold text-primary\">NCA</div>\n            </div>\n            <span className=\"text-sm text-gray-300\">ECC Framework</span>\n          </div>\n          \n          {/* SAMA Logo */}\n          <div \n            className=\"flex flex-col items-center cursor-pointer transition-transform hover:scale-110\"\n            onClick={navigateToSama}\n          >\n            <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mb-2\">\n              <div className=\"text-3xl font-bold text-primary\">SAMA</div>\n            </div>\n            <span className=\"text-sm text-gray-300\">Cyber Security Framework</span>\n          </div>\n          \n          {/* PDPL Logo */}\n          <div \n            className=\"flex flex-col items-center cursor-pointer transition-transform hover:scale-110\"\n            onClick={navigateToPdpl}\n          >\n            <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mb-2\">\n              <div className=\"text-3xl font-bold text-primary\">PDPL</div>\n            </div>\n            <span className=\"text-sm text-gray-300\">Data Protection Law</span>\n          </div>\n          \n          {/* ISO 27001 Logo */}\n          <div \n            className=\"flex flex-col items-center cursor-pointer transition-transform hover:scale-110\"\n            onClick={navigateToIso}\n          >\n            <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mb-2\">\n              <div className=\"text-3xl font-bold text-primary\">ISO</div>\n            </div>\n            <span className=\"text-sm text-gray-300\">27001 Standard</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Background decoration */}\n      <div className=\"absolute top-0 left-0 w-full h-full overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-10 -left-10 w-40 h-40 bg-primary/5 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-10 -right-10 w-40 h-40 bg-primary/5 rounded-full blur-3xl\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":3334},"client/src/components/landing/features-section.tsx":{"content":"import React from \"react\";\nimport { \n  FileText, Shield, Star, HelpCircle, Users, Archive, \n} from \"lucide-react\";\n\nconst features = [\n  {\n    title: \"AI-Generated Policies\",\n    description: \"Automatically generate compliant policies mapped to NCA ECC controls.\",\n    icon: FileText,\n  },\n  {\n    title: \"One-Click Compliance\",\n    description: \"Assess your organization and get step-by-step compliance recommendations.\",\n    icon: Shield,\n  },\n  {\n    title: \"Risk Assessment\",\n    description: \"Interactive risk heatmaps and AI-based scoring to visualize your security posture.\",\n    icon: Star,\n  },\n  {\n    title: \"Virtual Consultant\",\n    description: \"AI chatbot for answering compliance questions and providing guidance.\",\n    icon: HelpCircle,\n  },\n  {\n    title: \"Multi-User Access\",\n    description: \"Role-based access control for admins, compliance officers, and team members.\",\n    icon: Users,\n  },\n  {\n    title: \"Document Repository\",\n    description: \"Secure storage for compliance documents with version control and audit logs.\",\n    icon: Archive,\n  },\n];\n\nexport default function FeaturesSection() {\n  return (\n    <section id=\"features\" className=\"py-20 bg-background/80\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Comprehensive Compliance Features</h2>\n          <p className=\"text-gray-400 max-w-3xl mx-auto\">Our platform offers everything you need to achieve and maintain NCA ECC compliance with minimal effort.</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <div \n              key={index} \n              className=\"backdrop-blur-sm border border-primary/10 bg-card/20 rounded-xl p-6 transition-all duration-300 hover:shadow-lg hover:shadow-primary/10\"\n            >\n              <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-primary to-emerald-400 flex items-center justify-center mb-4\">\n                <feature.icon className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n              <p className=\"text-gray-400\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2388},"client/src/components/landing/footer.tsx":{"content":"import React from \"react\";\nimport { Shield } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"py-16 border-t border-gray-800 backdrop-blur-sm bg-background/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-10\">\n          <div className=\"col-span-1 md:col-span-1\">\n            <div className=\"flex items-center space-x-2 mb-6\">\n              <Shield className=\"w-8 h-8 text-primary\" />\n              <span className=\"text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-emerald-400\">MetaWorks</span>\n            </div>\n            <p className=\"text-sm text-gray-400 mb-4\">\n              One-Click Cybersecurity Compliance Solution for organizations of all sizes.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"></path>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path fillRule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clipRule=\"evenodd\"></path>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path fillRule=\"evenodd\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c5.51 0 10-4.48 10-10S17.51 2 12 2zm6.605 4.61a8.502 8.502 0 011.93 5.314c-.281-.054-3.101-.629-5.943-.271-.065-.141-.12-.293-.184-.445a25.416 25.416 0 00-.564-1.236c3.145-1.28 4.577-3.124 4.761-3.362zM12 3.475c2.17 0 4.154.813 5.662 2.148-.152.216-1.443 1.941-4.48 3.08-1.399-2.57-2.95-4.675-3.189-5A8.687 8.687 0 0112 3.475zm-3.633.803a53.896 53.896 0 013.167 4.935c-3.992 1.063-7.517 1.04-7.896 1.04a8.581 8.581 0 014.729-5.975zM3.453 12.01v-.26c.37.01 4.512.065 8.775-1.215.25.477.477.965.694 1.453-.109.033-.228.065-.336.098-4.404 1.42-6.747 5.303-6.942 5.629a8.522 8.522 0 01-2.19-5.705zM12 20.547a8.482 8.482 0 01-5.239-1.8c.152-.315 1.888-3.656 6.703-5.337.022-.01.033-.01.054-.022a35.318 35.318 0 011.823 6.475 8.4 8.4 0 01-3.341.684zm4.761-1.465c-.086-.52-.542-3.015-1.659-6.084 2.679-.423 5.022.271 5.314.369a8.468 8.468 0 01-3.655 5.715z\" clipRule=\"evenodd\"></path>\n                </svg>\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-200 uppercase tracking-wider mb-4\">Product</h3>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Features</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Pricing</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Integrations</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">API</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-200 uppercase tracking-wider mb-4\">Resources</h3>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Documentation</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Guides</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Blog</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Support</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-200 uppercase tracking-wider mb-4\">Company</h3>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">About</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Careers</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Contact</a></li>\n              <li><a href=\"#\" className=\"text-sm text-gray-400 hover:text-primary transition-colors\">Privacy</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"mt-12 pt-8 border-t border-gray-800\">\n          <p className=\"text-center text-sm text-gray-400\">\n            &copy; {new Date().getFullYear()} MetaWorks. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6183},"client/src/components/landing/hero-section.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Shield } from \"lucide-react\";\nimport metaLogo from \"@assets/metawork keylogo.webp\";\n\nexport default function HeroSection() {\n  const [_, navigate] = useLocation();\n  const { user } = useAuth();\n  \n  const navigateToDashboard = () => {\n    if (user) {\n      navigate(\"/dashboard\");\n    } else {\n      navigate(\"/auth\");\n    }\n  };\n  \n  const navigateToAdmin = () => {\n    if (user) {\n      navigate(\"/admin\");\n    } else {\n      navigate(\"/auth\");\n    }\n  };\n  \n  return (\n    <section className=\"relative pt-28 pb-20 md:pt-36 md:pb-32 overflow-hidden bg-background\">\n      <div className=\"absolute inset-0 bg-gradient-to-r from-black/20 to-primary/5\"></div>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        {/* Header area with positioning for logo */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div className=\"text-2xl font-bold text-primary\">\n            <span>Meta Works</span>\n          </div>\n        </div>\n        \n        <div className=\"flex flex-col md:flex-row items-start\">\n          <div className=\"md:w-1/2 mb-10 md:mb-0 md:pr-10\">\n            <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-6 leading-tight text-white\">\n              <span className=\"block bg-gradient-to-r from-primary to-emerald-400 bg-clip-text text-transparent\">One-Click</span>\n              <span className=\"block\">Cybersecurity</span>\n              <span className=\"block\">Compliance</span>\n              <span className=\"block bg-gradient-to-r from-emerald-400 to-primary bg-clip-text text-transparent\">Solution</span>\n            </h1>\n            <p className=\"text-lg text-gray-300 mb-8 backdrop-blur-sm bg-black/20 p-4 rounded-lg border border-primary/20\">\n              Innovative Cybersecurity Solutions for Comprehensive Compliance and Protection.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4\">\n              {/* Dashboard Button */}\n              <button \n                onClick={navigateToDashboard}\n                className=\"py-3 px-8 rounded-lg font-medium text-center bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg transform transition-all duration-300 hover:scale-105 hover:shadow-xl focus:outline-none\"\n              >\n                Go to Dashboard\n              </button>\n              \n              {/* Admin Panel Button */}\n              <button \n                onClick={navigateToAdmin}\n                className=\"py-3 px-8 rounded-lg font-medium text-center border border-primary/50 bg-background/30 text-primary shadow-md backdrop-blur-sm transition-all duration-300 hover:bg-primary/10 focus:outline-none\"\n              >\n                Admin Control\n              </button>\n            </div>\n            \n            {/* Stats */}\n            <div className=\"mt-10 grid grid-cols-2 sm:grid-cols-3 gap-4\">\n              <div className=\"backdrop-blur-sm bg-primary/10 rounded-lg p-4 text-center border border-primary/20\">\n                <p className=\"text-2xl md:text-3xl font-bold text-primary\">99.9%</p>\n                <p className=\"text-xs text-gray-400\">Compliance Rate</p>\n              </div>\n              <div className=\"backdrop-blur-sm bg-primary/10 rounded-lg p-4 text-center border border-primary/20\">\n                <p className=\"text-2xl md:text-3xl font-bold text-emerald-400\">500+</p>\n                <p className=\"text-xs text-gray-400\">Controls Covered</p>\n              </div>\n              <div className=\"backdrop-blur-sm bg-primary/10 rounded-lg p-4 text-center col-span-2 sm:col-span-1 border border-primary/20\">\n                <p className=\"text-2xl md:text-3xl font-bold text-primary\">24/7</p>\n                <p className=\"text-xs text-gray-400\">Monitoring</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"md:w-1/2 flex justify-center lg:justify-end relative md:-mt-8\">\n            {/* MetaWorks Logo - Extra Large on right side */}\n            <div className=\"relative flex justify-center items-center\">\n              <img src={metaLogo} alt=\"Meta Works Security Shield\" className=\"h-96 lg:h-[450px] w-auto z-10\" />\n              \n              {/* Enhanced glowing effect behind logo */}\n              <div className=\"absolute inset-0 scale-110 bg-primary/30 blur-3xl rounded-full z-0\"></div>\n            </div>\n            \n            {/* Small floating element */}\n            <div className=\"absolute bottom-4 right-4 backdrop-blur-sm bg-primary/10 p-3 rounded-lg shadow-lg border border-primary/20 z-20\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 rounded-full bg-green-500 animate-pulse\"></div>\n                <span className=\"text-xs font-semibold\">ECC Compliant</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <style dangerouslySetInnerHTML={{ __html: `\n        @keyframes pulse-slow {\n          0%, 100% {\n            opacity: 1;\n          }\n          50% {\n            opacity: 0.7;\n          }\n        }\n        \n        .animate-pulse-slow {\n          animation: pulse-slow 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n        }\n      `}} />\n    </section>\n  );\n}\n","size_bytes":5382},"client/src/components/layout/dashboard-layout.tsx":{"content":"import React, { ReactNode } from \"react\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n}\n\nconst DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar */}\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <main>\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardLayout;","size_bytes":532},"client/src/components/layout/header.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Shield, Menu, X, Presentation } from \"lucide-react\";\nimport { ThemeSwitch } from \"./theme-switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [location, navigate] = useLocation();\n  const { user, logoutMutation } = useAuth();\n  \n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n  \n  const handleLogin = () => {\n    navigate(\"/auth\");\n  };\n  \n  const handleSignup = () => {\n    navigate(\"/auth\");\n  };\n  \n  const handleClerkAuth = () => {\n    navigate(\"/clerk-auth\");\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n  \n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50\">\n      <nav className=\"backdrop-blur-sm bg-background/60 border-b border-primary/10 px-4 py-3\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            {/* Logo */}\n            <div \n              onClick={() => navigate(\"/\")} \n              className=\"flex items-center space-x-2 cursor-pointer\"\n            >\n              <Shield className=\"w-10 h-10 text-primary\" />\n              <span className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-emerald-400\">MetaWorks</span>\n            </div>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <a href=\"/#features\" className=\"text-sm font-medium hover:text-primary transition-colors\">Features</a>\n            <button onClick={() => navigate(\"/solution\")} className=\"text-sm font-medium hover:text-primary transition-colors\">Solution</button>\n            <button onClick={() => navigate(\"/pricing\")} className=\"text-sm font-medium hover:text-primary transition-colors\">Pricing</button>\n            <button onClick={() => navigate(\"/about\")} className=\"text-sm font-medium hover:text-primary transition-colors\">About</button>\n            \n            {/* Dark/Light Mode Toggle */}\n            <ThemeSwitch>Toggle theme</ThemeSwitch>\n            \n            {/* D-ID Agent Quick Access */}\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    onClick={() => navigate(\"/did-agent\")}\n                    className=\"relative\"\n                  >\n                    <Presentation className=\"h-5 w-5 text-primary\" />\n                    <span className=\"absolute top-0 right-0 h-2 w-2 bg-green-500 rounded-full\"></span>\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>D-ID Virtual Agent</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => navigate(\"/user-dashboard\")}\n                  className=\"hidden md:inline-flex\"\n                >\n                  User Dashboard\n                </Button>\n                <Button onClick={handleLogout}>Logout</Button>\n              </>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleLogin}\n                  className=\"hidden md:inline-flex\"\n                >\n                  Login\n                </Button>\n                <Button onClick={handleSignup}>Get Started</Button>\n              </>\n            )}\n            \n            {/* Mobile menu button */}\n            <button \n              type=\"button\" \n              className=\"md:hidden text-gray-300 hover:text-white focus:outline-none\"\n              onClick={toggleMenu}\n            >\n              {isMenuOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </button>\n          </div>\n        </div>\n        \n        {/* Mobile menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden backdrop-blur-sm bg-background/90 absolute top-full left-0 w-full border-b border-primary/10\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              <a href=\"/#features\" className=\"block px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary\">Features</a>\n              <a \n                onClick={() => { navigate('/solution'); setIsMenuOpen(false); }}\n                className=\"block px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary cursor-pointer\"\n              >\n                Solution\n              </a>\n              <a \n                onClick={() => { navigate('/pricing'); setIsMenuOpen(false); }}\n                className=\"block px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary cursor-pointer\"\n              >\n                Pricing\n              </a>\n              <a \n                onClick={() => { navigate('/about'); setIsMenuOpen(false); }}\n                className=\"block px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary cursor-pointer\"\n              >\n                About\n              </a>\n              \n              {user ? (\n                <>\n                  <a \n                    onClick={() => { navigate('/user-dashboard'); setIsMenuOpen(false); }}\n                    className=\"block px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary cursor-pointer\"\n                  >\n                    User Dashboard\n                  </a>\n                </>\n              ) : (\n                <>\n                  <a \n                    onClick={() => { navigate('/auth'); setIsMenuOpen(false); }}\n                    className=\"block px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary cursor-pointer\"\n                  >\n                    Login\n                  </a>\n                </>\n              )}\n              \n              <a \n                onClick={() => { navigate('/did-agent'); setIsMenuOpen(false); }}\n                className=\"flex items-center px-3 py-2 rounded-md text-base font-medium hover:bg-primary/10 hover:text-primary cursor-pointer\"\n              >\n                <Presentation className=\"mr-2 h-4 w-4 text-primary\" />\n                <span>D-ID Agent</span>\n                <span className=\"ml-2 h-2 w-2 bg-green-500 rounded-full\"></span>\n              </a>\n              \n              <div className=\"flex items-center px-3 py-2\">\n                <span className=\"text-sm mr-2\">Theme:</span>\n                <ThemeSwitch>Toggle theme</ThemeSwitch>\n              </div>\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n}\n","size_bytes":7166},"client/src/components/layout/page-header.tsx":{"content":"import { ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PageHeaderProps {\n  title: string;\n  description?: string;\n  actions?: ReactNode;\n  className?: string;\n}\n\nexport default function PageHeader({\n  title,\n  description,\n  actions,\n  className,\n}: PageHeaderProps) {\n  return (\n    <div className={cn(\"flex flex-col sm:flex-row justify-between gap-4\", className)}>\n      <div>\n        <h1 className=\"text-2xl font-bold tracking-tight\">{title}</h1>\n        {description && (\n          <p className=\"text-muted-foreground mt-1\">{description}</p>\n        )}\n      </div>\n      {actions && <div className=\"flex items-center\">{actions}</div>}\n    </div>\n  );\n}","size_bytes":682},"client/src/components/layout/theme-switch.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { Sun, Moon } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\n\ntype Theme = \"dark\" | \"light\";\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\nexport default function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check local storage first\n    if (typeof window !== \"undefined\") {\n      const savedTheme = localStorage.getItem(\"theme\") as Theme;\n      if (savedTheme) return savedTheme;\n      \n      // Check system preference\n      if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n        return \"dark\";\n      }\n    }\n    return \"dark\"; // Default to dark mode\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function ThemeSwitch({ children }: { children?: ReactNode } = {}) {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Sun className=\"h-4 w-4 text-muted-foreground\" />\n      <Switch\n        checked={theme === \"dark\"}\n        onCheckedChange={toggleTheme}\n        aria-label=\"Toggle theme\"\n      />\n      <Moon className=\"h-4 w-4 text-muted-foreground\" />\n      {children && <span className=\"sr-only\">{children}</span>}\n    </div>\n  );\n}\n","size_bytes":2006},"client/src/components/layouts/dashboard-layout.tsx":{"content":"import React, { ReactNode, useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useClerk } from \"@clerk/clerk-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Home,\n  LayoutDashboard,\n  FileText,\n  Shield,\n  BarChartHorizontal,\n  HelpCircle,\n  LogOut,\n  Menu,\n  X,\n  ChevronRight,\n  AlertTriangle,\n  BarChart4,\n  HardHat,\n  Cog,\n  Waypoints,\n  GraduationCap,\n  LayoutGrid,\n  UserCircle,\n  Building,\n} from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [location] = useLocation();\n  const { user, signOut } = useClerk();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { logoutMutation } = useAuth();\n\n  const handleLogout = async () => {\n    if (user) {\n      await signOut();\n    } else {\n      logoutMutation.mutate();\n    }\n  };\n\n  const links = [\n    { href: \"/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard className=\"h-5 w-5\" /> },\n    { href: \"/risk-management\", label: \"Risk Management\", icon: <Shield className=\"h-5 w-5\" /> },\n    { href: \"/risk-assessment\", label: \"Risk Assessment\", icon: <AlertTriangle className=\"h-5 w-5\" /> },\n    { href: \"/risk-prediction\", label: \"Risk Prediction\", icon: <BarChart4 className=\"h-5 w-5\" /> },\n    { href: \"/policies\", label: \"Policy Management\", icon: <FileText className=\"h-5 w-5\" /> },\n    { href: \"/company\", label: \"Company Profile\", icon: <Building className=\"h-5 w-5\" /> },\n    { href: \"/security-progress\", label: \"Security Progress\", icon: <Waypoints className=\"h-5 w-5\" /> },\n    { href: \"/onboarding\", label: \"Onboarding\", icon: <GraduationCap className=\"h-5 w-5\" /> },\n    { href: \"/frameworks/nca-ecc\", label: \"NCA ECC\", icon: <HardHat className=\"h-5 w-5\" /> },\n    { href: \"/frameworks/sama\", label: \"SAMA\", icon: <BarChartHorizontal className=\"h-5 w-5\" /> },\n    { href: \"/virtual-assistant\", label: \"Virtual Assistant\", icon: <HelpCircle className=\"h-5 w-5\" /> },\n  ];\n\n  const adminLinks = [\n    { href: \"/admin\", label: \"Admin Panel\", icon: <Cog className=\"h-5 w-5\" /> },\n    { href: \"/admin-dashboard\", label: \"Admin Dashboard\", icon: <LayoutGrid className=\"h-5 w-5\" /> },\n  ];\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Mobile sidebar toggle */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"fixed top-4 left-4 z-50 md:hidden\"\n        onClick={toggleSidebar}\n      >\n        {sidebarOpen ? (\n          <X className=\"h-6 w-6\" />\n        ) : (\n          <Menu className=\"h-6 w-6\" />\n        )}\n      </Button>\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed inset-y-0 left-0 z-40 w-64 bg-card border-r transform transition-transform duration-300 ease-in-out md:translate-x-0\",\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex items-center p-4 pb-2\">\n            <Link href=\"/\">\n              <div className=\"flex items-center space-x-2 cursor-pointer\">\n                <Shield className=\"h-6 w-6 text-primary\" />\n                <span className=\"font-bold text-xl\">MetaWorks</span>\n              </div>\n            </Link>\n          </div>\n\n          <Separator className=\"my-2\" />\n\n          <div className=\"p-4 flex-grow overflow-y-auto\">\n            <nav className=\"space-y-1\">\n              {links.map((link) => (\n                <Link key={link.href} href={link.href}>\n                  <Button\n                    variant={location === link.href ? \"secondary\" : \"ghost\"}\n                    className={cn(\n                      \"w-full justify-start\",\n                      location === link.href\n                        ? \"bg-secondary text-secondary-foreground\"\n                        : \"text-muted-foreground hover:text-foreground\"\n                    )}\n                  >\n                    {link.icon}\n                    <span className=\"ml-3\">{link.label}</span>\n                    {location === link.href && (\n                      <ChevronRight className=\"ml-auto h-4 w-4\" />\n                    )}\n                  </Button>\n                </Link>\n              ))}\n\n              {/* Admin section if user has admin role */}\n              {user?.publicMetadata?.role === \"admin\" && (\n                <>\n                  <Separator className=\"my-2\" />\n                  <p className=\"px-3 text-xs font-semibold text-muted-foreground mb-2\">\n                    Admin\n                  </p>\n                  {adminLinks.map((link) => (\n                    <Link key={link.href} href={link.href}>\n                      <Button\n                        variant={location === link.href ? \"secondary\" : \"ghost\"}\n                        className={cn(\n                          \"w-full justify-start\",\n                          location === link.href\n                            ? \"bg-secondary text-secondary-foreground\"\n                            : \"text-muted-foreground hover:text-foreground\"\n                        )}\n                      >\n                        {link.icon}\n                        <span className=\"ml-3\">{link.label}</span>\n                        {location === link.href && (\n                          <ChevronRight className=\"ml-auto h-4 w-4\" />\n                        )}\n                      </Button>\n                    </Link>\n                  ))}\n                </>\n              )}\n            </nav>\n          </div>\n\n          <div className=\"p-4 border-t\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"bg-primary h-9 w-9 rounded-full flex items-center justify-center text-primary-foreground\">\n                  <UserCircle className=\"h-6 w-6\" />\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium\">\n                    {user?.firstName || user?.username || \"User\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {user?.emailAddresses?.[0]?.emailAddress || \"user@example.com\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              className=\"w-full flex items-center justify-start\"\n              onClick={handleLogout}\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 md:ml-64 relative\">\n        {/* Overlay for mobile sidebar */}\n        {sidebarOpen && (\n          <div\n            className=\"fixed inset-0 bg-black/50 z-30 md:hidden\"\n            onClick={toggleSidebar}\n          ></div>\n        )}\n\n        <main className=\"h-full overflow-y-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":7196},"client/src/components/onboarding/onboarding-wizard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { OnboardingStep, UserProgress } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Loader2, CheckCircle2, ArrowRight, Award, BookOpen, Star } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport function OnboardingWizard() {\n  const { user } = useAuth();\n  const [activeStep, setActiveStep] = useState<number>(0);\n  const [activeTab, setActiveTab] = useState<string>(\"content\");\n  const { toast } = useToast();\n\n  // Fetch onboarding steps\n  const { data: steps, isLoading: stepsLoading } = useQuery<OnboardingStep[]>({\n    queryKey: [\"/api/onboarding/steps\"],\n    staleTime: 60 * 1000, // 1 minute\n  });\n\n  // Fetch user progress if user is logged in\n  const { data: userProgress, isLoading: progressLoading } = useQuery<UserProgress[]>({\n    queryKey: [\"/api/onboarding/progress\", user?.id],\n    enabled: !!user?.id,\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  // Determine which step to start with based on user progress\n  useEffect(() => {\n    if (steps && userProgress) {\n      const incompleteStep = findFirstIncompleteStep(steps, userProgress);\n      if (incompleteStep !== -1) {\n        setActiveStep(incompleteStep);\n      }\n    }\n  }, [steps, userProgress]);\n\n  // Save user progress mutation\n  const updateProgressMutation = useMutation({\n    mutationFn: async (progress: { stepId: number; completed: boolean; score?: number }) => {\n      return apiRequest(\"POST\", \"/api/onboarding/progress\", progress);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/progress\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gamification/user-stats\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error saving progress\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Find the first incomplete step\n  const findFirstIncompleteStep = (steps: OnboardingStep[], progress: UserProgress[]): number => {\n    if (!steps || !progress) return 0;\n    \n    // Map step IDs to their completion status\n    const completionMap = progress.reduce((acc, curr) => {\n      acc[curr.stepId] = curr.completed;\n      return acc;\n    }, {} as Record<number, boolean>);\n\n    // Find first incomplete step\n    for (let i = 0; i < steps.length; i++) {\n      const stepId = steps[i].id;\n      if (!completionMap[stepId]) {\n        return i;\n      }\n    }\n    \n    return 0; // Default to first step if all completed\n  };\n\n  // Mark current step as complete and move to next step\n  const completeStep = async (stepId: number, score?: number) => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please login to save your progress\",\n        variant: \"default\",\n      });\n      return;\n    }\n\n    await updateProgressMutation.mutateAsync({\n      stepId,\n      completed: true,\n      score,\n    });\n\n    if (steps && activeStep < steps.length - 1) {\n      setActiveStep(activeStep + 1);\n      setActiveTab(\"content\"); // Reset to content tab for new step\n      \n      toast({\n        title: \"Step completed!\",\n        description: `Moving to ${steps[activeStep + 1]?.title}`,\n        variant: \"default\",\n      });\n    } else {\n      toast({\n        title: \"Onboarding Complete!\",\n        description: \"You have completed all onboarding steps\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  // Calculate overall progress\n  const calculateProgress = (): number => {\n    if (!steps || !userProgress) return 0;\n    \n    const completedSteps = userProgress.filter(p => p.completed).length;\n    return Math.round((completedSteps / steps.length) * 100);\n  };\n\n  // Check if a step is completed\n  const isStepCompleted = (stepId: number): boolean => {\n    if (!userProgress) return false;\n    const progress = userProgress.find(p => p.stepId === stepId);\n    return progress?.completed || false;\n  };\n\n  // Loading state\n  if (stepsLoading || progressLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  // No steps found\n  if (!steps || steps.length === 0) {\n    return (\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col items-center justify-center h-64\">\n            <p className=\"text-muted-foreground\">No onboarding steps available</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const currentStep = steps[activeStep];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Progress bar */}\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h3 className=\"text-sm font-medium\">Onboarding Progress</h3>\n          <span className=\"text-sm text-muted-foreground\">{calculateProgress()}%</span>\n        </div>\n        <Progress value={calculateProgress()} className=\"h-2\" />\n      </div>\n\n      {/* Step list */}\n      <div className=\"flex gap-2 overflow-x-auto pb-2 mb-6\">\n        {steps.map((step, index) => (\n          <Button\n            key={step.id}\n            variant={activeStep === index ? \"default\" : \"outline\"}\n            size=\"sm\"\n            className=\"flex items-center gap-2 whitespace-nowrap\"\n            onClick={() => setActiveStep(index)}\n          >\n            {isStepCompleted(step.id) ? (\n              <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n            ) : (\n              <span className=\"h-5 w-5 rounded-full bg-muted flex items-center justify-center text-xs\">\n                {index + 1}\n              </span>\n            )}\n            {step.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Current step card */}\n      <Card className=\"border border-border/40 shadow-sm\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle className=\"text-xl\">{currentStep.title}</CardTitle>\n              <CardDescription>{currentStep.description}</CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                <BookOpen className=\"h-3 w-3\" />\n                <span>{currentStep.estimatedDuration} min</span>\n              </Badge>\n              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                <Star className=\"h-3 w-3\" />\n                <span>{currentStep.points} points</span>\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <div className=\"px-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">Content</TabsTrigger>\n              <TabsTrigger value=\"quiz\" disabled={currentStep.type !== 'quiz'}>\n                Quiz\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"content\" className=\"p-0\">\n            <CardContent className=\"pt-6\">\n              <div className=\"prose prose-invert max-w-none\">\n                {currentStep?.content && typeof currentStep.content === 'object' && 'content' in currentStep.content ? (\n                  <div dangerouslySetInnerHTML={{ __html: currentStep.content.content as string }} />\n                ) : (\n                  <p className=\"text-muted-foreground\">Content not available</p>\n                )}\n              </div>\n            </CardContent>\n          </TabsContent>\n\n          <TabsContent value=\"quiz\" className=\"p-0\">\n            <CardContent className=\"pt-6\">\n              {currentStep?.content && currentStep.type === 'quiz' && typeof currentStep.content === 'object' && 'questions' in currentStep.content ? (\n                <div className=\"space-y-4\">\n                  <p className=\"font-medium\">Test your knowledge</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Complete this quiz to earn points and mark this step as complete.\n                  </p>\n                  {/* Quiz implementation would go here */}\n                  <p className=\"text-sm text-muted-foreground italic\">\n                    Quiz content will be implemented in a future update.\n                  </p>\n                </div>\n              ) : (\n                <p className=\"text-muted-foreground\">No quiz available for this step</p>\n              )}\n            </CardContent>\n          </TabsContent>\n        </Tabs>\n\n        <CardFooter className=\"flex justify-between py-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => activeStep > 0 && setActiveStep(activeStep - 1)}\n            disabled={activeStep === 0}\n          >\n            Previous\n          </Button>\n          \n          <div className=\"space-x-2\">\n            {!isStepCompleted(currentStep.id) ? (\n              <Button \n                onClick={() => completeStep(currentStep.id)} \n                disabled={updateProgressMutation.isPending}\n              >\n                {updateProgressMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                Mark Complete\n              </Button>\n            ) : (\n              <Button\n                onClick={() => activeStep < steps.length - 1 && setActiveStep(activeStep + 1)}\n                disabled={activeStep === steps.length - 1}\n              >\n                Next Step\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </CardFooter>\n      </Card>\n\n      {/* Badges section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Award className=\"h-5 w-5\" />\n            Available Badges\n          </CardTitle>\n          <CardDescription>\n            Complete onboarding steps to earn badges\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n            {/* Badge display would go here */}\n            <div className=\"flex items-center justify-center h-24 bg-muted/30 rounded-md\">\n              <p className=\"text-sm text-muted-foreground\">Badges loading...</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10949},"client/src/components/progress/security-timeline.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  CheckCircle2, \n  Clock, \n  AlertCircle,\n\n  ChevronRight\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TimelineStep {\n  id: number;\n  title: string;\n  description: string | null;\n  order: number;\n  type: string;\n  points: number;\n  estimatedDuration: number;\n  completed?: boolean;\n  startedAt?: string | null;\n  completedAt?: string | null;\n  status?: 'not_started' | 'in_progress' | 'completed';\n}\n\nexport function SecurityTimeline() {\n  const [activeStep, setActiveStep] = useState<number | null>(null);\n  const { toast } = useToast();\n  \n  const { data: timelineSteps, isLoading, error } = useQuery<TimelineStep[]>({\n    queryKey: ['/api/progress/timeline'],\n    refetchOnWindowFocus: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full space-y-4\">\n        {[1, 2, 3, 4, 5].map((i) => (\n          <Skeleton key={i} className=\"w-full h-24\" />\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-6 text-center\">\n          <AlertCircle className=\"h-10 w-10 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold\">Failed to load timeline</h3>\n          <p className=\"text-muted-foreground\">Please try again later</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Sort timeline steps by order\n  const sortedSteps = timelineSteps?.sort((a, b) => a.order - b.order) || [];\n  \n  // Find the most recent in-progress step\n  const currentStep = sortedSteps.find(step => step.status === 'in_progress') || \n                     sortedSteps.find(step => step.status === 'not_started') ||\n                     sortedSteps[sortedSteps.length - 1];\n  \n  // Calculate overall progress\n  const completedSteps = sortedSteps.filter(step => step.status === 'completed').length;\n  const totalSteps = sortedSteps.length;\n  const progressPercentage = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4 mb-4\">\n            <div>\n              <h3 className=\"text-xl font-semibold\">Security Journey Progress</h3>\n              <p className=\"text-muted-foreground\">\n                {completedSteps} of {totalSteps} steps completed\n              </p>\n            </div>\n            <Badge variant=\"outline\" className=\"px-3 py-1\">\n              {progressPercentage.toFixed(0)}% Complete\n            </Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"h-2 mb-2\" />\n        </CardContent>\n      </Card>\n\n      <div className=\"space-y-4\">\n        {sortedSteps.map((step) => (\n          <TimelineItem \n            key={step.id}\n            step={step}\n            isActive={activeStep === step.id}\n            onClick={() => setActiveStep(activeStep === step.id ? null : step.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface TimelineItemProps {\n  step: TimelineStep;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nfunction TimelineItem({ step, isActive, onClick }: TimelineItemProps) {\n  const StatusIcon = {\n    completed: () => <CheckCircle2 className=\"h-6 w-6 text-green-500\" />,\n    in_progress: () => <Clock className=\"h-6 w-6 text-amber-500\" />,\n    not_started: () => <Clock className=\"h-6 w-6 text-muted-foreground\" />,\n  }[step.status || 'not_started'];\n\n  const formatTimeEstimate = (minutes: number) => {\n    if (minutes < 60) {\n      return `${minutes} min`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n\n  return (\n    <Card className={`border-l-4 ${\n      step.status === 'completed' ? 'border-l-green-500' :\n      step.status === 'in_progress' ? 'border-l-amber-500' : 'border-l-muted-foreground'\n    }`}>\n      <CardContent className=\"p-0\">\n        <div \n          className=\"p-4 flex items-center cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={onClick}\n        >\n          <div className=\"mr-4\">\n            <StatusIcon />\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"font-medium\">{step.title}</h3>\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"outline\" className=\"px-2\">\n                  {step.points} pts\n                </Badge>\n                <Badge variant=\"secondary\" className=\"text-xs px-2\">\n                  {formatTimeEstimate(step.estimatedDuration)}\n                </Badge>\n                <ChevronRight className={`h-5 w-5 transition-transform ${isActive ? 'rotate-90' : ''}`} />\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">{step.type}</p>\n          </div>\n        </div>\n        \n        {isActive && (\n          <div className=\"p-4 pt-0 border-t\">\n            {step.description && (\n              <p className=\"text-sm mb-4\">{step.description}</p>\n            )}\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n              {step.startedAt && (\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Started</p>\n                  <p className=\"text-sm\">{format(new Date(step.startedAt), 'MMM d, yyyy')}</p>\n                </div>\n              )}\n              \n              {step.completedAt && (\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Completed</p>\n                  <p className=\"text-sm\">{format(new Date(step.completedAt), 'MMM d, yyyy')}</p>\n                </div>\n              )}\n              \n              <div>\n                <p className=\"text-xs text-muted-foreground\">Status</p>\n                <p className=\"text-sm capitalize\">{step.status?.replace('_', ' ')}</p>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-2 mt-2\">\n              {step.status !== 'completed' && (\n                <Button size=\"sm\">\n                  {step.status === 'not_started' ? 'Start' : 'Continue'}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6771},"client/src/components/reports/generate-report-button.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, FileText, Share2 } from \"lucide-react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormDescription,\n  FormMessage \n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst generateReportSchema = z.object({\n  assessmentId: z.number(),\n  title: z.string().min(1, \"Title is required\"),\n  summary: z.string().optional(),\n  isPublic: z.boolean().default(false),\n  format: z.enum([\"pdf\", \"html\", \"json\"]).default(\"pdf\"),\n});\n\ntype GenerateReportFormValues = z.infer<typeof generateReportSchema>;\n\ninterface GenerateReportButtonProps {\n  assessmentId: number;\n  assessmentName: string;\n}\n\nexport default function GenerateReportButton({\n  assessmentId,\n  assessmentName,\n}: GenerateReportButtonProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<GenerateReportFormValues>({\n    resolver: zodResolver(generateReportSchema),\n    defaultValues: {\n      assessmentId,\n      title: `Compliance Report - ${assessmentName} - ${new Date().toLocaleDateString()}`,\n      summary: `Comprehensive compliance report for ${assessmentName}`,\n      isPublic: false,\n      format: \"pdf\",\n    },\n  });\n\n  const generateReportMutation = useMutation({\n    mutationFn: async (values: GenerateReportFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/reports\", values);\n      return res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Report Generated\",\n        description: \"Your compliance report has been generated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/assessment\", assessmentId] });\n      setOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to generate report: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  function onSubmit(data: GenerateReportFormValues) {\n    generateReportMutation.mutate(data);\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"default\" \n          className=\"flex items-center gap-2\"\n        >\n          <FileText className=\"w-4 h-4\" />\n          Generate Report\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Generate Compliance Report</DialogTitle>\n          <DialogDescription>\n            Create a comprehensive compliance report for this assessment.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 pt-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Report Title</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"summary\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Summary</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} />\n                  </FormControl>\n                  <FormDescription>\n                    A brief description of the report\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"format\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Report Format</FormLabel>\n                  <FormControl>\n                    <select\n                      className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                      {...field}\n                    >\n                      <option value=\"pdf\">PDF</option>\n                      <option value=\"html\">HTML</option>\n                      <option value=\"json\">JSON</option>\n                    </select>\n                  </FormControl>\n                  <FormDescription>\n                    Select the format for your report\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isPublic\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center space-x-3 space-y-0 rounded-md border p-4\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel>Make this report public</FormLabel>\n                    <FormDescription>\n                      Public reports can be accessed without authentication\n                    </FormDescription>\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"submit\"\n                disabled={generateReportMutation.isPending}\n                className=\"w-full mt-4\"\n              >\n                {generateReportMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <FileText className=\"mr-2 h-4 w-4\" />\n                    Generate Report\n                  </>\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7034},"client/src/components/reports/one-click-report-button.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { Loader2, FileText, Share2, Copy, Check, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface OneClickReportButtonProps {\n  assessmentId: number;\n  assessmentName: string;\n}\n\nexport default function OneClickReportButton({\n  assessmentId,\n  assessmentName,\n}: OneClickReportButtonProps) {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [shareLink, setShareLink] = useState<string | null>(null);\n  const [reportId, setReportId] = useState<number | null>(null);\n  const [showDialog, setShowDialog] = useState(false);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Generate report mutation\n  const generateReportMutation = useMutation({\n    mutationFn: async () => {\n      setIsGenerating(true);\n      \n      // Generate a default title based on assessment name and current date\n      const title = `Compliance Report - ${assessmentName} - ${new Date().toLocaleDateString()}`;\n      const summary = `Comprehensive compliance report for ${assessmentName}`;\n      \n      // Generate the report with default settings\n      const reportRes = await apiRequest(\"POST\", \"/api/reports\", {\n        assessmentId,\n        title,\n        summary,\n        isPublic: false,\n        format: \"pdf\"\n      });\n      \n      if (!reportRes.ok) {\n        throw new Error(\"Failed to generate report\");\n      }\n      \n      const reportData = await reportRes.json();\n      setReportId(reportData.id);\n      \n      // Create a share link for the report\n      const shareRes = await apiRequest(\"POST\", `/api/reports/${reportData.id}/share`, {});\n      \n      if (!shareRes.ok) {\n        throw new Error(\"Failed to create share link\");\n      }\n      \n      const shareLinkData = await shareRes.json();\n      \n      // Generate the full shareable URL\n      const baseUrl = window.location.origin;\n      const fullShareLink = `${baseUrl}/shared-report/${shareLinkData.shareToken}`;\n      \n      return { report: reportData, shareLink: fullShareLink };\n    },\n    onSuccess: (data) => {\n      setIsGenerating(false);\n      setShareLink(data.shareLink);\n      setShowDialog(true);\n      \n      toast({\n        title: \"Report Generated\",\n        description: \"Your compliance report has been generated with a shareable link.\",\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/assessment\", assessmentId] });\n    },\n    onError: (error: Error) => {\n      setIsGenerating(false);\n      \n      toast({\n        title: \"Error\",\n        description: `Failed to generate report: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  async function copyToClipboard(text: string) {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n      \n      toast({\n        title: \"Copied!\",\n        description: \"Link copied to clipboard.\",\n      });\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link.\",\n        variant: \"destructive\",\n      });\n    }\n  }\n\n  function handleGenerateReport() {\n    generateReportMutation.mutate();\n  }\n\n  return (\n    <>\n      <Button \n        variant=\"default\" \n        className=\"flex items-center gap-2\"\n        onClick={handleGenerateReport}\n        disabled={isGenerating}\n      >\n        {isGenerating ? (\n          <>\n            <Loader2 className=\"w-4 h-4 animate-spin\" />\n            Generating One-Click Report...\n          </>\n        ) : (\n          <>\n            <Share2 className=\"w-4 h-4\" />\n            Generate Report with Link\n          </>\n        )}\n      </Button>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Report Generated Successfully</DialogTitle>\n            <DialogDescription>\n              Your compliance report has been generated. Use the shareable link below to share it with others.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"mt-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <FileText className=\"w-4 h-4 text-primary\" />\n              <span className=\"font-medium\">Shareable Link</span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Input \n                value={shareLink || \"\"} \n                readOnly \n                className=\"flex-1\"\n              />\n              <Button \n                variant=\"outline\" \n                size=\"icon\"\n                onClick={() => shareLink && copyToClipboard(shareLink)}\n              >\n                {copySuccess ? (\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                ) : (\n                  <Copy className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            \n            <p className=\"mt-2 text-sm text-muted-foreground\">\n              This link can be shared with anyone, no login required.\n            </p>\n          </div>\n          \n          <DialogFooter className=\"flex flex-col sm:flex-row gap-2 mt-4\">\n            {reportId && (\n              <Button \n                variant=\"outline\" \n                className=\"w-full sm:w-auto\"\n                asChild\n              >\n                <a \n                  href={`/reports/${reportId}`} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                >\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  View Report\n                </a>\n              </Button>\n            )}\n            \n            {shareLink && (\n              <Button \n                variant=\"outline\" \n                className=\"w-full sm:w-auto\"\n                asChild\n              >\n                <a \n                  href={shareLink} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                >\n                  <ExternalLink className=\"mr-2 h-4 w-4\" />\n                  Open Shared Link\n                </a>\n              </Button>\n            )}\n            \n            <Button \n              variant=\"default\" \n              className=\"w-full sm:w-auto\"\n              onClick={() => setShowDialog(false)}\n            >\n              Done\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":6925},"client/src/components/reports/reports-list.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, FileText, Download, Share2, Copy, Check, Calendar, ExternalLink } from \"lucide-react\";\nimport { ComplianceReport, ReportShareLink } from \"@shared/schema\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ReportsListProps {\n  assessmentId: number;\n}\n\nconst createShareLinkSchema = z.object({\n  reportId: z.number(),\n  expiresAt: z.string().optional(),\n  password: z.string().optional(),\n  maxViews: z.number().optional(),\n});\n\ntype CreateShareLinkFormValues = z.infer<typeof createShareLinkSchema>;\n\nexport default function ReportsList({ assessmentId }: ReportsListProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedReport, setSelectedReport] = useState<ComplianceReport | null>(null);\n  const [shareLinkDialogOpen, setShareLinkDialogOpen] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [hasExpiry, setHasExpiry] = useState(false);\n  const [hasMaxViews, setHasMaxViews] = useState(false);\n  const [copySuccess, setCopySuccess] = useState(false);\n\n  const { data: reports, isLoading } = useQuery<ComplianceReport[]>({\n    queryKey: [\"/api/reports/assessment\", assessmentId],\n    queryFn: async () => {\n      const res = await fetch(`/api/reports/assessment/${assessmentId}`);\n      if (!res.ok) throw new Error(\"Failed to load reports\");\n      return res.json();\n    },\n  });\n\n  const { data: shareLinks, isLoading: isLoadingShareLinks } = useQuery<ReportShareLink[]>({\n    queryKey: [\"/api/reports/share\", selectedReport?.id],\n    queryFn: async () => {\n      if (!selectedReport) return [];\n      const res = await fetch(`/api/reports/${selectedReport.id}/share`);\n      if (!res.ok) throw new Error(\"Failed to load share links\");\n      return res.json();\n    },\n    enabled: !!selectedReport,\n  });\n\n  const form = useForm<CreateShareLinkFormValues>({\n    resolver: zodResolver(createShareLinkSchema),\n    defaultValues: {\n      reportId: selectedReport?.id || 0,\n      expiresAt: undefined,\n      password: undefined,\n      maxViews: undefined,\n    },\n  });\n\n  const createShareLinkMutation = useMutation({\n    mutationFn: async (values: CreateShareLinkFormValues) => {\n      const reportId = selectedReport?.id;\n      if (!reportId) throw new Error(\"No report selected\");\n      \n      // Format the values properly\n      const payload: any = { ...values, reportId };\n      \n      // Only include expiresAt if hasExpiry is true\n      if (!hasExpiry) {\n        delete payload.expiresAt;\n      }\n      \n      // Only include maxViews if hasMaxViews is true\n      if (!hasMaxViews) {\n        delete payload.maxViews;\n      }\n      \n      const res = await apiRequest(\"POST\", `/api/reports/${reportId}/share`, payload);\n      return res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Share Link Created\",\n        description: \"Your share link has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/share\", selectedReport?.id] });\n      setShareLinkDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create share link: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deactivateShareLinkMutation = useMutation({\n    mutationFn: async (linkId: number) => {\n      const res = await apiRequest(\"POST\", `/api/reports/share/${linkId}/deactivate`, {});\n      return res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Share Link Deactivated\",\n        description: \"The share link has been deactivated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/share\", selectedReport?.id] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to deactivate share link: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  function onCreateShareLink(data: CreateShareLinkFormValues) {\n    createShareLinkMutation.mutate(data);\n  }\n\n  function getReportLink(report: ComplianceReport) {\n    return `/reports/${report.id}`;\n  }\n\n  function getShareLink(token: string, password?: string) {\n    const baseUrl = window.location.origin;\n    let url = `${baseUrl}/shared-report/${token}`;\n    if (password) {\n      url += `?password=${password}`;\n    }\n    return url;\n  }\n\n  async function copyToClipboard(text: string) {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n      toast({\n        title: \"Copied!\",\n        description: \"Link copied to clipboard.\",\n      });\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link.\",\n        variant: \"destructive\",\n      });\n    }\n  }\n\n  function formatDate(dateString: string) {\n    const date = new Date(dateString);\n    return formatDistanceToNow(date, { addSuffix: true });\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Compliance Reports</h2>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      ) : reports && reports.length > 0 ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {reports.map((report) => (\n            <Card key={report.id} className=\"overflow-hidden\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">{report.title}</CardTitle>\n                <CardDescription className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-3 w-3\" />\n                  {formatDate(report.createdAt)}\n                </CardDescription>\n                <Badge \n                  variant={report.isPublic ? \"outline\" : \"secondary\"}\n                  className=\"absolute top-2 right-2\"\n                >\n                  {report.isPublic ? \"Public\" : \"Private\"}\n                </Badge>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">{report.summary || \"No summary provided.\"}</p>\n                \n                <div className=\"mt-3 flex items-center text-xs text-muted-foreground\">\n                  <Badge variant=\"outline\">{report.format.toUpperCase()}</Badge>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-between gap-2\">\n                <Button variant=\"outline\" size=\"sm\" asChild>\n                  <a href={getReportLink(report)} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <FileText className=\"mr-1 h-3 w-3\" />\n                    View\n                  </a>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => {\n                    setSelectedReport(report);\n                    setShareLinkDialogOpen(true);\n                  }}\n                >\n                  <Share2 className=\"mr-1 h-3 w-3\" />\n                  Share\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"mr-1 h-3 w-3\" />\n                  Download\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"rounded-md border border-dashed p-8 text-center\">\n          <h3 className=\"text-lg font-medium\">No Reports Yet</h3>\n          <p className=\"mt-2 text-sm text-muted-foreground\">\n            Generate a report to see it here.\n          </p>\n        </div>\n      )}\n\n      {/* Share Link Dialog */}\n      <Dialog open={shareLinkDialogOpen} onOpenChange={setShareLinkDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Share Report</DialogTitle>\n            <DialogDescription>\n              Create a shareable link to this report that can be accessed without logging in.\n            </DialogDescription>\n          </DialogHeader>\n\n          <Tabs defaultValue=\"create\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"create\">Create New Link</TabsTrigger>\n              <TabsTrigger value=\"manage\">Manage Links</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"create\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onCreateShareLink)} className=\"space-y-3\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel>Password Protection</FormLabel>\n                      <Switch \n                        checked={showPassword} \n                        onCheckedChange={setShowPassword} \n                      />\n                    </div>\n                    {showPassword && (\n                      <FormField\n                        control={form.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormControl>\n                              <Input \n                                type=\"text\" \n                                placeholder=\"Enter password\" \n                                {...field} \n                                value={field.value || ''}\n                                onChange={(e) => field.onChange(e.target.value)}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Viewers will need this password to access the report\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel>Expiration Date</FormLabel>\n                      <Switch \n                        checked={hasExpiry} \n                        onCheckedChange={setHasExpiry} \n                      />\n                    </div>\n                    {hasExpiry && (\n                      <FormField\n                        control={form.control}\n                        name=\"expiresAt\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormControl>\n                              <Input \n                                type=\"datetime-local\" \n                                {...field}\n                                value={field.value || ''}\n                                onChange={(e) => field.onChange(e.target.value)} \n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Link will expire at this date and time\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel>Maximum Views</FormLabel>\n                      <Switch \n                        checked={hasMaxViews} \n                        onCheckedChange={setHasMaxViews} \n                      />\n                    </div>\n                    {hasMaxViews && (\n                      <FormField\n                        control={form.control}\n                        name=\"maxViews\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                min=\"1\"\n                                max=\"100\"\n                                {...field}\n                                value={field.value || ''}\n                                onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Link will deactivate after this many views\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                  </div>\n\n                  <DialogFooter className=\"pt-4\">\n                    <Button\n                      type=\"submit\"\n                      disabled={createShareLinkMutation.isPending}\n                      className=\"w-full\"\n                    >\n                      {createShareLinkMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Creating...\n                        </>\n                      ) : (\n                        <>\n                          <Share2 className=\"mr-2 h-4 w-4\" />\n                          Create Share Link\n                        </>\n                      )}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </TabsContent>\n            \n            <TabsContent value=\"manage\">\n              {isLoadingShareLinks ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                </div>\n              ) : shareLinks && shareLinks.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {shareLinks.map((link) => (\n                    <div \n                      key={link.id} \n                      className=\"rounded-md border p-3\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex flex-col\">\n                          <span className=\"text-sm font-medium\">\n                            Created {formatDate(link.createdAt)}\n                          </span>\n                          <div className=\"mt-1 flex items-center gap-2\">\n                            {link.isActive ? (\n                              <Badge variant=\"outline\" className=\"bg-green-50 text-green-600 border-green-200\">\n                                Active\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\" className=\"bg-red-50 text-red-600 border-red-200\">\n                                Inactive\n                              </Badge>\n                            )}\n                            \n                            {link.password && (\n                              <Badge variant=\"outline\">\n                                Password Protected\n                              </Badge>\n                            )}\n                            \n                            {link.expiresAt && (\n                              <Badge variant=\"outline\">\n                                Expires {formatDate(link.expiresAt)}\n                              </Badge>\n                            )}\n                            \n                            {link.maxViews && (\n                              <Badge variant=\"outline\">\n                                {link.viewCount}/{link.maxViews} Views\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\"\n                            onClick={() => copyToClipboard(getShareLink(link.shareToken, link.password || undefined))}\n                          >\n                            {copySuccess ? (\n                              <Check className=\"h-4 w-4 text-green-500\" />\n                            ) : (\n                              <Copy className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            asChild\n                          >\n                            <a \n                              href={`/shared-report/${link.shareToken}`} \n                              target=\"_blank\" \n                              rel=\"noopener noreferrer\"\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </a>\n                          </Button>\n                          \n                          {link.isActive && (\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => deactivateShareLinkMutation.mutate(link.id)}\n                              disabled={deactivateShareLinkMutation.isPending}\n                            >\n                              {deactivateShareLinkMutation.isPending ? (\n                                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                              ) : (\n                                \"Deactivate\"\n                              )}\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"rounded-md border border-dashed p-8 text-center\">\n                  <h3 className=\"text-lg font-medium\">No Share Links</h3>\n                  <p className=\"mt-2 text-sm text-muted-foreground\">\n                    Create a share link to let others view this report.\n                  </p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19411},"client/src/components/risk-management/risk-assessment-report.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, Filter, Printer, RefreshCw, AlertTriangle, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\n\n// Define the risk assessment entry type\ntype RiskAssessmentEntry = {\n  domain: string;\n  subdomain: string;\n  domainCode: string;\n  controlCode: string;\n  controlName: string;\n  controlStatus: \"not_implemented\" | \"partially_implemented\" | \"implemented\" | \"not_applicable\";\n  currentStatus: string;\n  recommendation: string;\n  managementResponse: string;\n  targetDate: string;\n  priority: \"High\" | \"Medium\" | \"Low\";\n};\n\n// Assessment type\ntype Assessment = {\n  id: number;\n  name: string;\n  startDate: string;\n  status: string;\n  companyId: number;\n  frameworkId: number;\n  createdBy: number;\n  frameworkName: string;\n  score?: number;\n  completionDate?: string;\n};\n\n// Assessment result type\ntype AssessmentResult = {\n  id: number;\n  assessmentId: number;\n  controlId: number;\n  status: \"not_implemented\" | \"partially_implemented\" | \"implemented\" | \"not_applicable\";\n  evidence: string | null;\n  recommendation: string;\n  managementResponse: string;\n  targetDate: string | null;\n  updatedBy: number;\n  controlName: string;\n  controlDescription: string;\n  domainName: string;\n  domainCode: string;\n  controlCode: string;\n  comments?: string | null;\n};\n\n// Create a mapping function to transform assessment results into risk assessment entries\nconst mapAssessmentResultsToEntries = (results: AssessmentResult[]): RiskAssessmentEntry[] => {\n  return results.map(result => ({\n    domain: result.domainName,\n    subdomain: result.controlDescription,\n    domainCode: result.domainCode,\n    controlCode: result.controlCode,\n    controlName: result.controlName,\n    controlStatus: result.status,\n    currentStatus: result.evidence || `No status details available for ${result.controlName}`,\n    recommendation: result.recommendation || \"No recommendation provided\",\n    managementResponse: result.managementResponse || \"No response provided\",\n    targetDate: result.targetDate || \"Not set\",\n    priority: calculatePriority(result)\n  }));\n};\n\n// Calculate priority based on control attributes\nconst calculatePriority = (result: AssessmentResult): \"High\" | \"Medium\" | \"Low\" => {\n  // For now, apply a simple rule-based approach\n  // In a real app, this could use more sophisticated logic\n  if (result.status === \"not_implemented\") {\n    return \"High\"; \n  } else if (result.status === \"partially_implemented\") {\n    return \"Medium\";\n  } else {\n    return \"Low\";\n  }\n};\n\n// Format status for display\nconst formatStatus = (status: RiskAssessmentEntry[\"controlStatus\"]): string => {\n  switch (status) {\n    case \"not_implemented\":\n      return \"Not Implemented\";\n    case \"partially_implemented\":\n      return \"Partially Implemented\";\n    case \"implemented\":\n      return \"Implemented\";\n    case \"not_applicable\":\n      return \"Not Applicable\";\n    default:\n      return status;\n  }\n};\n\n// Generate summary statistics\nconst generateSummaryStats = (data: RiskAssessmentEntry[]) => {\n  const applicableEntries = data.filter(entry => entry.controlStatus !== \"not_applicable\");\n  \n  const domainStats: Record<string, { \n    total: number; \n    notImplemented: number; \n    partiallyImplemented: number; \n    implemented: number;\n  }> = {};\n  \n  applicableEntries.forEach(entry => {\n    if (!domainStats[entry.domain]) {\n      domainStats[entry.domain] = { total: 0, notImplemented: 0, partiallyImplemented: 0, implemented: 0 };\n    }\n    \n    domainStats[entry.domain].total++;\n    \n    if (entry.controlStatus === \"not_implemented\") {\n      domainStats[entry.domain].notImplemented++;\n    } else if (entry.controlStatus === \"partially_implemented\") {\n      domainStats[entry.domain].partiallyImplemented++;\n    } else if (entry.controlStatus === \"implemented\") {\n      domainStats[entry.domain].implemented++;\n    }\n  });\n  \n  return {\n    total: applicableEntries.length,\n    notImplemented: applicableEntries.filter(e => e.controlStatus === \"not_implemented\").length,\n    partiallyImplemented: applicableEntries.filter(e => e.controlStatus === \"partially_implemented\").length,\n    implemented: applicableEntries.filter(e => e.controlStatus === \"implemented\").length,\n    notApplicable: data.filter(e => e.controlStatus === \"not_applicable\").length,\n    domainStats\n  };\n};\n\n// Generate chart data\nconst generateChartData = (stats: ReturnType<typeof generateSummaryStats>) => {\n  // For pie chart\n  const pieData = [\n    { name: \"Not Implemented\", value: stats.notImplemented, color: \"#f87171\" },\n    { name: \"Partially Implemented\", value: stats.partiallyImplemented, color: \"#facc15\" },\n    { name: \"Implemented\", value: stats.implemented, color: \"#4ade80\" }\n  ];\n  \n  // For bar chart\n  const barData = Object.entries(stats.domainStats).map(([domain, data]) => ({\n    name: domain,\n    \"Not Implemented\": data.notImplemented,\n    \"Partially Implemented\": data.partiallyImplemented,\n    \"Implemented\": data.implemented\n  }));\n  \n  return { pieData, barData };\n};\n\n// Status badge component\nconst StatusBadge = ({ status }: { status: RiskAssessmentEntry[\"controlStatus\"] }) => {\n  const variants: Record<string, string> = {\n    \"not_implemented\": \"bg-red-500/20 text-red-500 border-red-500/20\",\n    \"partially_implemented\": \"bg-amber-500/20 text-amber-500 border-amber-500/20\",\n    \"implemented\": \"bg-green-500/20 text-green-500 border-green-500/20\",\n    \"not_applicable\": \"bg-gray-500/20 text-gray-400 border-gray-400/20\"\n  };\n  \n  return (\n    <Badge className={`${variants[status]} border`}>\n      {formatStatus(status)}\n    </Badge>\n  );\n};\n\nexport default function RiskAssessmentReport() {\n  const [activeTab, setActiveTab] = useState(\"summary\");\n  const [selectedDomain, setSelectedDomain] = useState<string | null>(null);\n  const [selectedPriority, setSelectedPriority] = useState<string | null>(null);\n  const [selectedAssessmentId, setSelectedAssessmentId] = useState<number | null>(null);\n  \n  // Fetch assessments\n  const { data: assessments, isLoading: isLoadingAssessments } = useQuery<Assessment[]>({\n    queryKey: [\"/api/assessments\"],\n    retry: 1,\n  });\n  \n  // Get the latest assessment ID if none is selected\n  const latestAssessmentId = selectedAssessmentId || \n    (assessments && assessments.length > 0 \n      ? assessments.sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime())[0].id \n      : null);\n  \n  // Fetch assessment results\n  const { data: assessmentResults, isLoading: isLoadingResults } = useQuery<AssessmentResult[]>({\n    queryKey: [\"/api/assessment-results\", latestAssessmentId],\n    enabled: !!latestAssessmentId,\n    retry: 1,\n  });\n  \n  // Fetch risk prediction\n  const { data: riskPrediction, isLoading: isLoadingPrediction } = useQuery({\n    queryKey: [\"/api/risk-prediction/assessment\", latestAssessmentId],\n    enabled: !!latestAssessmentId,\n    retry: 1,\n  });\n  \n  // Transform assessment results to risk assessment entries\n  const riskAssessmentData: RiskAssessmentEntry[] = assessmentResults \n    ? mapAssessmentResultsToEntries(assessmentResults)\n    : [];\n  \n  // Filter data based on selected filters\n  const filteredData = riskAssessmentData.filter(entry => {\n    if (selectedDomain && entry.domain !== selectedDomain) return false;\n    if (selectedPriority && entry.priority !== selectedPriority) return false;\n    return true;\n  });\n  \n  // Generate statistics and chart data\n  const stats = generateSummaryStats(filteredData);\n  const { pieData, barData } = generateChartData(stats);\n  \n  // Get unique domains for filter\n  const uniqueDomains = Array.from(new Set(riskAssessmentData.map(e => e.domain)));\n  \n  // Calculate compliance score\n  const complianceScore = stats.total > 0 \n    ? Math.round(((stats.implemented + stats.partiallyImplemented * 0.5) / stats.total) * 100)\n    : 0;\n  \n  // High risks count from the risk prediction\n  const highRisksCount = riskPrediction?.domain_risks\n    ? riskPrediction.domain_risks.filter((domain: any) => domain.risk_level === \"High\").length\n    : filteredData.filter(entry => entry.priority === \"High\").length;\n  \n  // Medium risks count\n  const mediumRisksCount = riskPrediction?.domain_risks\n    ? riskPrediction.domain_risks.filter((domain: any) => domain.risk_level === \"Medium\").length\n    : filteredData.filter(entry => entry.priority === \"Medium\").length;\n  \n  // Determine if we're in loading state\n  const isLoading = isLoadingAssessments || isLoadingResults || isLoadingPrediction;\n  \n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-primary\" />\n          <p className=\"text-muted-foreground\">Loading risk assessment data...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Show empty state if no assessments\n  if (!assessments || assessments.length === 0) {\n    return (\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10 p-12\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n          <h3 className=\"mt-4 text-xl font-medium\">No Assessments Found</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            You haven't created any risk assessments yet.\n          </p>\n          <div className=\"flex justify-center mt-6\">\n            <Link href=\"/risk-assessment/new\">\n              <Button>Create Assessment</Button>\n            </Link>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n  \n  // Show empty state if no results\n  if (!assessmentResults || assessmentResults.length === 0) {\n    return (\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10 p-12\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n          <h3 className=\"mt-4 text-xl font-medium\">No Assessment Results Found</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            The selected assessment doesn't have any results yet.\n          </p>\n          <div className=\"flex justify-center mt-6\">\n            <Link href={`/risk-assessment/${latestAssessmentId}`}>\n              <Button>Complete Assessment</Button>\n            </Link>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n  \n  // Find the current assessment\n  const currentAssessment = assessments?.find(a => a.id === latestAssessmentId);\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n            <div>\n              <CardTitle className=\"text-2xl font-bold\">\n                {currentAssessment?.frameworkName || \"NCA ECC\"} Risk Assessment Report\n              </CardTitle>\n              <CardDescription>\n                Comprehensive analysis of compliance with Essential Cybersecurity Controls\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-1\">\n                <Printer className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Print</span>\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-1\">\n                <Download className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Export</span>\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-1\">\n                <RefreshCw className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Refresh</span>\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {assessments && assessments.length > 1 && (\n            <div className=\"mb-6\">\n              <Select \n                value={latestAssessmentId?.toString() || \"\"} \n                onValueChange={(value) => setSelectedAssessmentId(parseInt(value))}\n              >\n                <SelectTrigger className=\"w-full sm:w-[300px]\">\n                  <SelectValue placeholder=\"Select Assessment\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {assessments.map(assessment => (\n                    <SelectItem key={assessment.id} value={assessment.id.toString()}>\n                      {assessment.name} ({new Date(assessment.startDate).toLocaleDateString()})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4 mb-6\">\n            <div className=\"flex items-center gap-2\">\n              <Filter className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Filters:</span>\n            </div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 w-full sm:w-auto\">\n              <Select value={selectedDomain || \"\"} onValueChange={(value) => setSelectedDomain(value || null)}>\n                <SelectTrigger className=\"w-full sm:w-[200px]\">\n                  <SelectValue placeholder=\"All Domains\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Domains</SelectItem>\n                  {uniqueDomains.map(domain => (\n                    <SelectItem key={domain} value={domain}>{domain}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedPriority || \"\"} onValueChange={(value) => setSelectedPriority(value || null)}>\n                <SelectTrigger className=\"w-full sm:w-[200px]\">\n                  <SelectValue placeholder=\"All Priorities\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Priorities</SelectItem>\n                  <SelectItem value=\"High\">High Priority</SelectItem>\n                  <SelectItem value=\"Medium\">Medium Priority</SelectItem>\n                  <SelectItem value=\"Low\">Low Priority</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <Tabs defaultValue=\"summary\" value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n              <TabsTrigger value=\"detailed\">Detailed Report</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"summary\" className=\"py-4 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">Overall Compliance</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex justify-center\">\n                      <div className=\"text-center\">\n                        <div className=\"text-4xl font-bold mb-2\">{complianceScore}%</div>\n                        <Progress value={complianceScore} className=\"h-2 w-[150px]\" />\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Based on {stats.total} applicable controls\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">Implementation Status</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-[150px]\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart>\n                          <Pie\n                            data={pieData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={40}\n                            outerRadius={70}\n                            paddingAngle={2}\n                            dataKey=\"value\"\n                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                            labelLine={false}\n                          >\n                            {pieData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">Status Breakdown</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-sm\">Not Implemented</span>\n                          <span className=\"text-sm font-medium\">{stats.notImplemented}</span>\n                        </div>\n                        <Progress value={(stats.notImplemented / stats.total) * 100} className=\"h-2 bg-red-100\">\n                          <div className=\"h-full bg-red-500 rounded-full\"></div>\n                        </Progress>\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-sm\">Partially Implemented</span>\n                          <span className=\"text-sm font-medium\">{stats.partiallyImplemented}</span>\n                        </div>\n                        <Progress value={(stats.partiallyImplemented / stats.total) * 100} className=\"h-2 bg-amber-100\">\n                          <div className=\"h-full bg-amber-500 rounded-full\"></div>\n                        </Progress>\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-sm\">Implemented</span>\n                          <span className=\"text-sm font-medium\">{stats.implemented}</span>\n                        </div>\n                        <Progress value={(stats.implemented / stats.total) * 100} className=\"h-2 bg-green-100\">\n                          <div className=\"h-full bg-green-500 rounded-full\"></div>\n                        </Progress>\n                      </div>\n                      {stats.notApplicable > 0 && (\n                        <div>\n                          <div className=\"flex justify-between mb-1\">\n                            <span className=\"text-sm\">Not Applicable</span>\n                            <span className=\"text-sm font-medium\">{stats.notApplicable}</span>\n                          </div>\n                          <Progress value={(stats.notApplicable / (stats.total + stats.notApplicable)) * 100} className=\"h-2 bg-gray-100\">\n                            <div className=\"h-full bg-gray-400 rounded-full\"></div>\n                          </Progress>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">Implementation by Domain</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-[300px]\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart\n                          data={barData}\n                          layout=\"vertical\"\n                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                        >\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis type=\"number\" />\n                          <YAxis dataKey=\"name\" type=\"category\" width={150} />\n                          <Tooltip />\n                          <Legend />\n                          <Bar dataKey=\"Not Implemented\" stackId=\"a\" fill=\"#f87171\" />\n                          <Bar dataKey=\"Partially Implemented\" stackId=\"a\" fill=\"#facc15\" />\n                          <Bar dataKey=\"Implemented\" stackId=\"a\" fill=\"#4ade80\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">Risk Assessment Summary</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm text-muted-foreground\">High Risks</p>\n                          <p className=\"text-2xl font-bold text-red-500\">{highRisksCount}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm text-muted-foreground\">Medium Risks</p>\n                          <p className=\"text-2xl font-bold text-amber-500\">{mediumRisksCount}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm text-muted-foreground\">Assessment Date</p>\n                          <p className=\"text-sm\">\n                            {currentAssessment?.startDate \n                              ? new Date(currentAssessment.startDate).toLocaleDateString() \n                              : \"Not available\"}\n                          </p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm text-muted-foreground\">Framework</p>\n                          <p className=\"text-sm\">{currentAssessment?.frameworkName || \"NCA ECC\"}</p>\n                        </div>\n                      </div>\n                      \n                      {riskPrediction?.risk_summary && (\n                        <div className=\"pt-2\">\n                          <h4 className=\"text-sm font-medium mb-1\">Risk Analysis</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {riskPrediction.risk_summary}\n                          </p>\n                        </div>\n                      )}\n                      \n                      {riskPrediction?.recommendations && (\n                        <div className=\"pt-2\">\n                          <h4 className=\"text-sm font-medium mb-1\">Key Recommendations</h4>\n                          <ul className=\"text-sm text-muted-foreground list-disc list-inside\">\n                            {riskPrediction.recommendations.slice(0, 3).map((rec: string, index: number) => (\n                              <li key={index} className=\"mb-1\">{rec}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"detailed\" className=\"py-4\">\n              <Card>\n                <CardContent className=\"p-0 overflow-auto\">\n                  <Table>\n                    <TableHeader className=\"bg-muted/50\">\n                      <TableRow>\n                        <TableHead className=\"w-[180px]\">Domain</TableHead>\n                        <TableHead className=\"w-[100px]\">Control ID</TableHead>\n                        <TableHead className=\"min-w-[250px]\">Control</TableHead>\n                        <TableHead className=\"w-[150px]\">Status</TableHead>\n                        <TableHead className=\"min-w-[200px]\">Current Status</TableHead>\n                        <TableHead className=\"min-w-[200px]\">Recommendation</TableHead>\n                        <TableHead className=\"min-w-[150px]\">Priority</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredData.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"h-24 text-center\">\n                            No results found.\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        filteredData.map((entry, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{entry.domain}</TableCell>\n                            <TableCell>{entry.controlCode}</TableCell>\n                            <TableCell>{entry.controlName}</TableCell>\n                            <TableCell><StatusBadge status={entry.controlStatus} /></TableCell>\n                            <TableCell className=\"max-w-[300px] truncate\">{entry.currentStatus}</TableCell>\n                            <TableCell className=\"max-w-[300px] truncate\">{entry.recommendation}</TableCell>\n                            <TableCell>\n                              <Badge \n                                className={\n                                  entry.priority === \"High\" \n                                    ? \"bg-red-500/20 text-red-500 border-red-500/20\" \n                                    : entry.priority === \"Medium\"\n                                    ? \"bg-amber-500/20 text-amber-500 border-amber-500/20\"\n                                    : \"bg-blue-500/20 text-blue-500 border-blue-500/20\"\n                                }\n                              >\n                                {entry.priority}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":27554},"client/src/components/risks/assessment-result-item.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { AlertTriangle, CheckCircle, ChevronDown, ChevronUp, Clock, Edit } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AssessmentResultItemProps {\n  result: {\n    id: number;\n    assessmentId: number;\n    controlId: number;\n    status: string;\n    evidence?: string;\n    recommendation?: string;\n    managementResponse?: string;\n    targetDate?: string;\n    updatedAt: string;\n    controlName?: string;\n    controlDescription?: string;\n    domainName?: string;\n    subdomainName?: string;\n    controlCode?: string;\n    domainCode?: string;\n  };\n  onUpdate?: () => void;\n}\n\nexport function AssessmentResultItem({ result, onUpdate }: AssessmentResultItemProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [status, setStatus] = useState(result.status);\n  const [evidence, setEvidence] = useState(result.evidence || \"\");\n  const [recommendation, setRecommendation] = useState(result.recommendation || \"\");\n  const { toast } = useToast();\n  \n  const updateMutation = useMutation({\n    mutationFn: async (data: {\n      status: string;\n      evidence: string;\n      recommendation: string;\n    }) => {\n      const response = await apiRequest(\"PATCH\", `/api/assessment-results/${result.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Control Updated\",\n        description: \"Control status has been updated successfully\",\n      });\n      setIsEditing(false);\n      if (onUpdate) onUpdate();\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update control\",\n        description: error.message,\n      });\n    },\n  });\n  \n  function handleUpdate() {\n    updateMutation.mutate({\n      status,\n      evidence,\n      recommendation,\n    });\n  }\n  \n  function getStatusIcon(status: string) {\n    switch (status) {\n      case \"implemented\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"partially_implemented\":\n        return <Clock className=\"h-4 w-4 text-amber-600\" />;\n      case \"not_implemented\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return null;\n    }\n  }\n  \n  function getStatusLabel(status: string) {\n    switch (status) {\n      case \"implemented\":\n        return \"Implemented\";\n      case \"partially_implemented\":\n        return \"Partially Implemented\";\n      case \"not_implemented\":\n        return \"Not Implemented\";\n      default:\n        return \"Unknown\";\n    }\n  }\n  \n  function getStatusColor(status: string) {\n    switch (status) {\n      case \"implemented\":\n        return \"bg-green-500/10 text-green-600 border-green-600/20\";\n      case \"partially_implemented\":\n        return \"bg-amber-500/10 text-amber-600 border-amber-600/20\";\n      case \"not_implemented\":\n        return \"bg-red-500/10 text-red-600 border-red-600/20\";\n      default:\n        return \"bg-gray-500/10 text-gray-600 border-gray-600/20\";\n    }\n  }\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center gap-3\">\n            {getStatusIcon(result.status)}\n            <div>\n              <div className=\"flex items-center gap-2\">\n                <p className=\"font-medium\">\n                  {result.controlCode ? `${result.controlCode} - ` : \"\"}\n                  {result.controlName || \"Unknown Control\"}\n                </p>\n                <Badge className={getStatusColor(result.status)}>\n                  {getStatusLabel(result.status)}\n                </Badge>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {result.domainName} {result.subdomainName ? `> ${result.subdomainName}` : \"\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Dialog open={isEditing} onOpenChange={setIsEditing}>\n              <DialogTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                  <Edit className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Edit</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Update Control Status</DialogTitle>\n                  <DialogDescription>\n                    Update the implementation status and provide evidence for this control.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"status\" className=\"text-right\">\n                      Status\n                    </Label>\n                    <Select\n                      value={status}\n                      onValueChange={setStatus}\n                    >\n                      <SelectTrigger className=\"col-span-3\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"implemented\">Implemented</SelectItem>\n                        <SelectItem value=\"partially_implemented\">Partially Implemented</SelectItem>\n                        <SelectItem value=\"not_implemented\">Not Implemented</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"evidence\" className=\"text-right\">\n                      Evidence\n                    </Label>\n                    <Textarea\n                      id=\"evidence\"\n                      className=\"col-span-3\"\n                      placeholder=\"Provide evidence for this control\"\n                      value={evidence}\n                      onChange={(e) => setEvidence(e.target.value)}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"recommendation\" className=\"text-right\">\n                      Recommendation\n                    </Label>\n                    <Textarea\n                      id=\"recommendation\"\n                      className=\"col-span-3\"\n                      placeholder=\"Provide a recommendation (if needed)\"\n                      value={recommendation}\n                      onChange={(e) => setRecommendation(e.target.value)}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleUpdate} disabled={updateMutation.isPending}>\n                    {updateMutation.isPending ? \"Updating...\" : \"Update\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n            <CollapsibleTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                {isOpen ? (\n                  <ChevronUp className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronDown className=\"h-4 w-4\" />\n                )}\n                <span className=\"sr-only\">Toggle</span>\n              </Button>\n            </CollapsibleTrigger>\n          </div>\n        </div>\n        <CollapsibleContent>\n          <div className=\"px-4 pb-4 pt-0 space-y-3\">\n            <div>\n              <h4 className=\"text-sm font-medium mb-1\">Description</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                {result.controlDescription || \"No description available.\"}\n              </p>\n            </div>\n            \n            {result.evidence && (\n              <div>\n                <h4 className=\"text-sm font-medium mb-1\">Evidence</h4>\n                <p className=\"text-sm text-muted-foreground\">{result.evidence}</p>\n              </div>\n            )}\n            \n            {result.recommendation && (\n              <div>\n                <h4 className=\"text-sm font-medium mb-1\">Recommendation</h4>\n                <p className=\"text-sm text-muted-foreground\">{result.recommendation}</p>\n              </div>\n            )}\n            \n            {result.managementResponse && (\n              <div>\n                <h4 className=\"text-sm font-medium mb-1\">Management Response</h4>\n                <p className=\"text-sm text-muted-foreground\">{result.managementResponse}</p>\n              </div>\n            )}\n            \n            {result.targetDate && (\n              <div>\n                <h4 className=\"text-sm font-medium mb-1\">Target Date</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {new Date(result.targetDate).toLocaleDateString()}\n                </p>\n              </div>\n            )}\n          </div>\n        </CollapsibleContent>\n      </Collapsible>\n    </Card>\n  );\n}","size_bytes":9938},"client/src/components/risks/risk-assessment-form.tsx":{"content":"import { useState } from \"react\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Framework {\n  id: number;\n  name: string;\n  description?: string;\n}\n\ninterface RiskAssessmentFormProps {\n  onSuccess?: () => void;\n  frameworks: Framework[];\n}\n\nconst assessmentSchema = z.object({\n  name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n  frameworkId: z.coerce.number().positive({ message: \"Please select a framework\" }),\n  startDate: z.date(),\n});\n\ntype AssessmentFormValues = z.infer<typeof assessmentSchema>;\n\nexport default function RiskAssessmentForm({ onSuccess, frameworks }: RiskAssessmentFormProps) {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  \n  const form = useForm<AssessmentFormValues>({\n    resolver: zodResolver(assessmentSchema),\n    defaultValues: {\n      name: \"\",\n      startDate: new Date(),\n    },\n  });\n  \n  const createAssessmentMutation = useMutation({\n    mutationFn: async (values: AssessmentFormValues) => {\n      const response = await apiRequest(\"POST\", \"/api/assessments\", {\n        ...values,\n        startDate: format(values.startDate, 'yyyy-MM-dd'),\n        status: \"in_progress\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Assessment Created\",\n        description: \"Your risk assessment has been created successfully.\",\n      });\n      form.reset();\n      if (onSuccess) onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error Creating Assessment\",\n        description: error.message || \"Something went wrong. Please try again.\",\n      });\n    },\n  });\n  \n  function onSubmit(values: AssessmentFormValues) {\n    createAssessmentMutation.mutate(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Assessment Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., Annual Security Assessment 2025\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Provide a descriptive name for this assessment\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"frameworkId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Compliance Framework</FormLabel>\n              <Select \n                onValueChange={(value) => field.onChange(parseInt(value))}\n                defaultValue={field.value?.toString()}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a compliance framework\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {frameworks.map((framework) => (\n                    <SelectItem key={framework.id} value={framework.id.toString()}>\n                      {framework.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                Select the compliance framework you want to assess against\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"startDate\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Start Date</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-full pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value}\n                    onSelect={(date) => date && field.onChange(date)}\n                    disabled={(date) => date > new Date() || date < new Date(\"2020-01-01\")}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormDescription>\n                The date when this assessment was started\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <Button \n          type=\"submit\" \n          className=\"w-full\"\n          disabled={createAssessmentMutation.isPending}\n        >\n          {createAssessmentMutation.isPending ? \"Creating...\" : \"Create Assessment\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}","size_bytes":6316},"client/src/components/risks/risk-bulk-import.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, Upload } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\ninterface RiskBulkImportProps {\n  companyId?: number;\n  onSuccess?: () => void;\n}\n\ninterface ImportResult {\n  totalProcessed: number;\n  successCount: number;\n  failureCount: number;\n  results: Array<{\n    success: boolean;\n    risk: any;\n    error?: string;\n  }>;\n}\n\nexport default function RiskBulkImport({ companyId, onSuccess }: RiskBulkImportProps) {\n  const [jsonData, setJsonData] = useState<string>(\"\");\n  const [fileData, setFileData] = useState<File | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const importRisksMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/risks/import\", {\n        risks: data,\n        companyId\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Risks Imported\",\n        description: `Successfully imported ${data.successCount} out of ${data.totalProcessed} risks.`,\n      });\n      setImportResult(data);\n      queryClient.invalidateQueries({ queryKey: ['/api/risks'] });\n      if (onSuccess) onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Import Failed\",\n        description: error.message || \"Failed to import risks. Please check your data format.\",\n      });\n    },\n  });\n  \n  const handleJsonImport = () => {\n    try {\n      const parsedData = JSON.parse(jsonData);\n      if (!Array.isArray(parsedData)) {\n        toast({\n          variant: \"destructive\",\n          title: \"Invalid Format\",\n          description: \"The JSON data must be an array of risk objects.\",\n        });\n        return;\n      }\n      \n      importRisksMutation.mutate(parsedData);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid JSON\",\n        description: \"Please provide valid JSON data.\",\n      });\n    }\n  };\n  \n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setFileData(e.target.files[0]);\n    }\n  };\n  \n  const handleFileUpload = async () => {\n    if (!fileData) {\n      toast({\n        variant: \"destructive\",\n        title: \"No File Selected\",\n        description: \"Please select a file to upload.\",\n      });\n      return;\n    }\n    \n    try {\n      const fileReader = new FileReader();\n      fileReader.onload = (e) => {\n        try {\n          const result = e.target?.result as string;\n          const parsedData = JSON.parse(result);\n          if (!Array.isArray(parsedData)) {\n            toast({\n              variant: \"destructive\",\n              title: \"Invalid File Format\",\n              description: \"The file must contain a JSON array of risk objects.\",\n            });\n            return;\n          }\n          \n          importRisksMutation.mutate(parsedData);\n        } catch (error) {\n          toast({\n            variant: \"destructive\",\n            title: \"Invalid File Content\",\n            description: \"The file does not contain valid JSON data.\",\n          });\n        }\n      };\n      fileReader.readAsText(fileData);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"File Reading Error\",\n        description: \"Failed to read the file.\",\n      });\n    }\n  };\n  \n  const clearData = () => {\n    setJsonData(\"\");\n    setFileData(null);\n    setImportResult(null);\n  };\n  \n  const preloadSampleData = () => {\n    // Sample data structure for the first few risks from the dataset\n    const sampleData = [\n      {\n        \"title\": \"Absence of IT Strategy\",\n        \"description\": \"Unclear IT governance for business goals.\",\n        \"cause\": \"Lack of cybersecurity strategy.\",\n        \"category\": \"Strategic\",\n        \"owner\": \"IT Department\",\n        \"likelihood\": \"Very Likely\",\n        \"impact\": \"Major\",\n        \"inherentRiskLevel\": \"High\",\n        \"existingControls\": \"None\",\n        \"controlEffectiveness\": \"None\",\n        \"residualRiskLevel\": \"High\",\n        \"mitigationActions\": \"Develop IT strategy and roadmap.\",\n        \"isAccepted\": false\n      },\n      {\n        \"title\": \"No Periodic IT Policy Reviews\",\n        \"description\": \"Outdated policies lead to inefficiencies.\",\n        \"cause\": \"No review process.\",\n        \"category\": \"Strategic\",\n        \"owner\": \"IT Department\",\n        \"likelihood\": \"Very Likely\",\n        \"impact\": \"Major\",\n        \"inherentRiskLevel\": \"High\",\n        \"existingControls\": \"Last reviewed in 2020.\",\n        \"controlEffectiveness\": \"None\",\n        \"residualRiskLevel\": \"High\",\n        \"mitigationActions\": \"Regular policy updates.\",\n        \"isAccepted\": false\n      },\n      {\n        \"title\": \"Missing IT Steering Committee\",\n        \"description\": \"No oversight for IT operations.\",\n        \"cause\": \"No committee/charter.\",\n        \"category\": \"Strategic\",\n        \"owner\": \"IT Department\",\n        \"likelihood\": \"Very Likely\",\n        \"impact\": \"Major\",\n        \"inherentRiskLevel\": \"High\",\n        \"existingControls\": \"None\",\n        \"controlEffectiveness\": \"None\",\n        \"residualRiskLevel\": \"High\",\n        \"mitigationActions\": \"Establish committee and charter.\",\n        \"isAccepted\": false\n      }\n    ];\n    \n    setJsonData(JSON.stringify(sampleData, null, 2));\n  };\n  \n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle>Bulk Import Risks</CardTitle>\n        <CardDescription>\n          Import multiple risks at once using JSON format or a file upload\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {importResult ? (\n          <div className=\"space-y-4\">\n            <Alert variant={importResult.failureCount > 0 ? \"destructive\" : \"default\"}>\n              <AlertTitle>Import Results</AlertTitle>\n              <AlertDescription>\n                Successfully imported {importResult.successCount} out of {importResult.totalProcessed} risks.\n                {importResult.failureCount > 0 && (\n                  <p className=\"mt-2\">Failed to import {importResult.failureCount} risks. See details below.</p>\n                )}\n              </AlertDescription>\n            </Alert>\n            \n            {importResult.failureCount > 0 && (\n              <div className=\"mt-4\">\n                <h4 className=\"text-sm font-medium mb-2\">Failed Imports:</h4>\n                <div className=\"max-h-60 overflow-auto border rounded-md p-4\">\n                  {importResult.results\n                    .filter(r => !r.success)\n                    .map((result, idx) => (\n                      <div key={idx} className=\"mb-2 pb-2 border-b last:border-0\">\n                        <p className=\"text-destructive font-medium\">{result.risk.title || 'Unknown Risk'}</p>\n                        <p className=\"text-sm\">{result.error}</p>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n            \n            <Button onClick={clearData} variant=\"outline\" className=\"mt-4\">\n              Import More Risks\n            </Button>\n          </div>\n        ) : (\n          <Tabs defaultValue=\"json\">\n            <TabsList className=\"w-full mb-4\">\n              <TabsTrigger value=\"json\" className=\"flex-1\">JSON Input</TabsTrigger>\n              <TabsTrigger value=\"file\" className=\"flex-1\">File Upload</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"json\" className=\"space-y-4\">\n              <Textarea \n                value={jsonData}\n                onChange={(e) => setJsonData(e.target.value)}\n                placeholder=\"Paste JSON array of risk objects here...\"\n                className=\"min-h-[300px] font-mono text-xs\"\n              />\n              <div className=\"flex justify-between\">\n                <Button onClick={preloadSampleData} variant=\"outline\" size=\"sm\">\n                  Load Sample Data\n                </Button>\n                <Button \n                  onClick={handleJsonImport}\n                  disabled={!jsonData || importRisksMutation.isPending}\n                >\n                  {importRisksMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Importing...\n                    </>\n                  ) : (\n                    'Import Risks'\n                  )}\n                </Button>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"file\" className=\"space-y-4\">\n              <div className=\"border-2 border-dashed rounded-md p-6 flex flex-col items-center justify-center min-h-[200px]\">\n                <Upload className=\"h-10 w-10 text-muted-foreground mb-4\" />\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Upload a JSON file containing an array of risk objects\n                </p>\n                <input \n                  type=\"file\" \n                  accept=\".json\"\n                  onChange={handleFileChange}\n                  className=\"text-sm\"\n                />\n                {fileData && (\n                  <p className=\"text-sm mt-2\">\n                    Selected file: {fileData.name}\n                  </p>\n                )}\n              </div>\n              <Button \n                onClick={handleFileUpload} \n                disabled={!fileData || importRisksMutation.isPending}\n                className=\"w-full\"\n              >\n                {importRisksMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Importing...\n                  </>\n                ) : (\n                  'Upload and Import'\n                )}\n              </Button>\n            </TabsContent>\n          </Tabs>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex flex-col items-start\">\n        <p className=\"text-sm text-muted-foreground\">\n          <strong>Note:</strong> Each risk object must include title, description, category, likelihood, impact, and inherentRiskLevel fields at minimum.\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":10793},"client/src/components/risks/risk-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport RiskHeatmap, { RiskHeatmapComponent } from \"@/components/risks/risk-heatmap\";\nimport { RiskStatusChart } from \"@/components/risks/risk-status-chart\";\nimport { FileText, AlertTriangle, CheckCircle } from \"lucide-react\";\n\ninterface RiskDashboardProps {\n  assessmentId: number;\n}\n\nexport default function RiskDashboard({ assessmentId }: RiskDashboardProps) {\n  const [view, setView] = useState<string>(\"summary\");\n\n  // Fetch assessment data\n  const { data: assessment } = useQuery<any>({\n    queryKey: [\"/api/assessments\", assessmentId],\n  });\n\n  // Fetch assessment results\n  const { data: assessmentResults, isLoading: resultsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/assessment-results\", assessmentId],\n    queryFn: async () => {\n      const response = await fetch(`/api/assessment-results?assessmentId=${assessmentId}`);\n      return await response.json();\n    },\n  });\n\n  // Calculate stats from results\n  const stats = assessmentResults ? assessmentResults.reduce((acc: any, result: any) => {\n    acc.total++;\n    acc[result.status]++;\n    return acc;\n  }, {\n    total: 0,\n    implemented: 0,\n    partially_implemented: 0,\n    not_implemented: 0,\n  }) : {\n    total: 0,\n    implemented: 0,\n    partially_implemented: 0,\n    not_implemented: 0,\n  };\n\n  // Group results by domain for the heatmap\n  const domainResults = () => {\n    if (!assessmentResults || assessmentResults.length === 0) return [];\n    \n    // Group by domain\n    const domainGroups: Record<string, any> = {};\n    \n    const total = assessmentResults.length;\n    const implementedCount = assessmentResults.filter((r: any) => r.status === \"implemented\").length;\n    const partiallyCount = assessmentResults.filter((r: any) => r.status === \"partially_implemented\").length;\n    \n    assessmentResults.forEach((result: any) => {\n      const domain = result.domainName || \"Unknown\";\n      \n      if (!domainGroups[domain]) {\n        domainGroups[domain] = {\n          domain,\n          domainCode: result.domainCode || \"\",\n          controls: [],\n          implemented: 0,\n          partially_implemented: 0,\n          not_implemented: 0,\n          risk_level: 0\n        };\n      }\n      \n      domainGroups[domain].controls.push(result);\n      domainGroups[domain][result.status]++;\n    });\n    \n    // Calculate risk level for each domain (0-100, where 0 is no risk and 100 is high risk)\n    Object.values(domainGroups).forEach((domain: any) => {\n      const totalControls = domain.controls.length;\n      const implementedWeight = 0;  // No risk\n      const partiallyWeight = 50;   // Medium risk\n      const notImplementedWeight = 100;  // High risk\n      \n      const riskScore = (\n        (domain.implemented * implementedWeight) +\n        (domain.partially_implemented * partiallyWeight) +\n        (domain.not_implemented * notImplementedWeight)\n      ) / totalControls;\n      \n      domain.risk_level = Math.round(riskScore);\n    });\n    \n    return Object.values(domainGroups);\n  };\n\n  // Calculate the compliance score (0-100)\n  const complianceScore = () => {\n    if (assessment && assessment.score !== undefined && assessment.score !== null) {\n      return Math.round(assessment.score);\n    }\n    \n    if (!assessmentResults || assessmentResults.length === 0) return 0;\n    \n    const totalControls = assessmentResults.length;\n    const implementedWeight = 1.0;  // Full weight\n    const partiallyWeight = 0.5;    // Half weight\n    \n    const score = (\n      (stats.implemented * implementedWeight) +\n      (stats.partially_implemented * partiallyWeight)\n    ) / totalControls * 100;\n    \n    return Math.round(score);\n  };\n\n  // Simple overview of the assessment\n  const renderOverview = () => {\n    if (!assessment || !assessmentResults) return null;\n    \n    // No results yet\n    if (assessmentResults.length === 0) {\n      return (\n        <div className=\"flex flex-col items-center justify-center p-6 space-y-4\">\n          <AlertTriangle className=\"h-12 w-12 text-yellow-500\" />\n          <h3 className=\"text-xl font-medium\">No Assessment Results</h3>\n          <p className=\"text-center text-gray-500\">\n            There are no control evaluations for this assessment yet.\n            Navigate to the Controls tab to start your assessment.\n          </p>\n        </div>\n      );\n    }\n\n    const frameworks = assessment?.frameworkName || assessmentResults[0]?.frameworkName;\n    const statusLabel = assessment?.status || \"draft\";\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Framework</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{frameworks}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold capitalize\">{statusLabel.replace('_', ' ')}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Compliance Score</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{complianceScore()}%</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Control Implementation Status</CardTitle>\n              <CardDescription>\n                Overview of control implementation across all domains\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-2\">\n              <RiskStatusChart \n                implemented={stats.implemented}\n                partiallyImplemented={stats.partially_implemented}\n                notImplemented={stats.not_implemented}\n              />\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Domain Risk Heatmap</CardTitle>\n              <CardDescription>\n                Risk level by domain based on control implementation\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-2\">\n              <RiskHeatmapComponent domains={domainResults()} />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  };\n  \n  if (resultsLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-6\">\n        <div className=\"animate-pulse text-center\">\n          <div className=\"h-4 w-32 bg-gray-300 rounded mb-4 mx-auto\"></div>\n          <div className=\"h-32 w-32 bg-gray-300 rounded-full mx-auto mb-4\"></div>\n          <div className=\"h-4 w-48 bg-gray-300 rounded mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"summary\" value={view} onValueChange={setView}>\n        <TabsList>\n          <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n          <TabsTrigger value=\"details\">Detailed View</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"summary\">\n          {renderOverview()}\n        </TabsContent>\n        <TabsContent value=\"details\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Detailed Assessment Results</CardTitle>\n              <CardDescription>\n                View detailed implementation status by domain and control\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {assessmentResults && assessmentResults.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {domainResults().map((domain: any, index: number) => (\n                    <div key={index} className=\"mb-8\">\n                      <h3 className=\"text-lg font-semibold mb-2 flex items-center\">\n                        <FileText className=\"h-5 w-5 mr-2\" />\n                        {domain.domainCode} - {domain.domain}\n                      </h3>\n                      <div className=\"ml-7 space-y-1 text-sm\">\n                        <div className=\"grid grid-cols-12 gap-2 font-medium pb-2 border-b\">\n                          <div className=\"col-span-6\">Control</div>\n                          <div className=\"col-span-3\">Status</div>\n                          <div className=\"col-span-3\">Last Updated</div>\n                        </div>\n                        {domain.controls.map((control: any, ctrlIndex: number) => (\n                          <div key={ctrlIndex} className=\"grid grid-cols-12 gap-2 py-2 border-b border-gray-100\">\n                            <div className=\"col-span-6\">\n                              {control.controlCode} - {control.controlName}\n                            </div>\n                            <div className=\"col-span-3\">\n                              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                                control.status === \"implemented\" \n                                  ? \"bg-green-100 text-green-800\" \n                                  : control.status === \"partially_implemented\" \n                                  ? \"bg-yellow-100 text-yellow-800\" \n                                  : \"bg-red-100 text-red-800\"\n                              }`}>\n                                {control.status === \"implemented\" && <CheckCircle className=\"h-3 w-3 mr-1\" />}\n                                {control.status === \"partially_implemented\" && <AlertTriangle className=\"h-3 w-3 mr-1\" />}\n                                {control.status === \"not_implemented\" && <FileText className=\"h-3 w-3 mr-1\" />}\n                                {control.status.replace(\"_\", \" \")}\n                              </span>\n                            </div>\n                            <div className=\"col-span-3 text-gray-500\">\n                              {new Date(control.updatedAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-6\">\n                  <AlertTriangle className=\"mx-auto h-12 w-12 text-yellow-500 mb-4\" />\n                  <h3 className=\"text-lg font-medium\">No Assessment Results</h3>\n                  <p className=\"text-gray-500 mt-1\">\n                    There are no control evaluations for this assessment yet.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11239},"client/src/components/risks/risk-entry-form.tsx":{"content":"import { useState } from \"react\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport interface Risk {\n  id?: number;\n  title: string;\n  description: string;\n  cause?: string;\n  category: string;\n  owner?: string;\n  likelihood: string;\n  impact: string;\n  inherentRiskLevel: string;\n  existingControls?: string;\n  controlEffectiveness?: string;\n  residualRiskLevel?: string;\n  mitigationActions?: string;\n  targetDate?: string;\n  isAccepted: boolean;\n  companyId?: number;\n}\n\ninterface RiskEntryFormProps {\n  onSuccess?: () => void;\n  initialData?: Risk;\n  companyId?: number;\n}\n\nconst riskSchema = z.object({\n  title: z.string().min(3, { message: \"Title must be at least 3 characters\" }),\n  description: z.string().min(5, { message: \"Description must be at least 5 characters\" }),\n  cause: z.string().optional(),\n  category: z.string().min(1, { message: \"Please select a category\" }),\n  owner: z.string().optional(),\n  likelihood: z.string().min(1, { message: \"Please select likelihood\" }),\n  impact: z.string().min(1, { message: \"Please select impact\" }),\n  inherentRiskLevel: z.string().min(1, { message: \"Please select inherent risk level\" }),\n  existingControls: z.string().optional(),\n  controlEffectiveness: z.string().optional(),\n  residualRiskLevel: z.string().optional(),\n  mitigationActions: z.string().optional(),\n  targetDate: z.string().optional(),\n  isAccepted: z.boolean().default(false),\n  companyId: z.number().optional(),\n});\n\nexport type RiskFormValues = z.infer<typeof riskSchema>;\n\nexport default function RiskEntryForm({ onSuccess, initialData, companyId }: RiskEntryFormProps) {\n  const [targetDateString, setTargetDateString] = useState<string | undefined>(initialData?.targetDate);\n  const { toast } = useToast();\n  \n  const defaultValues: Partial<RiskFormValues> = {\n    title: initialData?.title || \"\",\n    description: initialData?.description || \"\",\n    cause: initialData?.cause || \"\",\n    category: initialData?.category || \"\",\n    owner: initialData?.owner || \"\",\n    likelihood: initialData?.likelihood || \"\",\n    impact: initialData?.impact || \"\",\n    inherentRiskLevel: initialData?.inherentRiskLevel || \"\",\n    existingControls: initialData?.existingControls || \"\",\n    controlEffectiveness: initialData?.controlEffectiveness || \"\",\n    residualRiskLevel: initialData?.residualRiskLevel || \"\",\n    mitigationActions: initialData?.mitigationActions || \"\",\n    targetDate: initialData?.targetDate || \"\",\n    isAccepted: initialData?.isAccepted || false,\n    companyId: companyId || initialData?.companyId,\n  };\n  \n  const form = useForm<RiskFormValues>({\n    resolver: zodResolver(riskSchema),\n    defaultValues,\n  });\n  \n  const saveRiskMutation = useMutation({\n    mutationFn: async (values: RiskFormValues) => {\n      const response = await apiRequest(\"POST\", \"/api/risks\", {\n        ...values,\n        id: initialData?.id,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: initialData ? \"Risk Updated\" : \"Risk Created\",\n        description: `The risk has been ${initialData ? \"updated\" : \"created\"} successfully.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/risks'] });\n      if (onSuccess) onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: initialData ? \"Error Updating Risk\" : \"Error Creating Risk\",\n        description: error.message || \"Something went wrong. Please try again.\",\n      });\n    },\n  });\n  \n  function onSubmit(values: RiskFormValues) {\n    saveRiskMutation.mutate(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"title\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Risk Title</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., Missing IT Strategy\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"category\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Risk Category</FormLabel>\n                <Select \n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a category\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Strategic\">Strategic</SelectItem>\n                    <SelectItem value=\"Operational\">Operational</SelectItem>\n                    <SelectItem value=\"Compliance\">Compliance</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Risk Description</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Provide a detailed description of the risk\"\n                  className=\"min-h-[100px]\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"cause\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Cause</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"What causes this risk?\"\n                  {...field}\n                  value={field.value || ''}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"owner\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Risk Owner</FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., IT Department\" {...field} value={field.value || ''} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"likelihood\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Likelihood</FormLabel>\n                <Select \n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select likelihood\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Very Likely\">Very Likely</SelectItem>\n                    <SelectItem value=\"Likely\">Likely</SelectItem>\n                    <SelectItem value=\"Possible\">Possible</SelectItem>\n                    <SelectItem value=\"Unlikely\">Unlikely</SelectItem>\n                    <SelectItem value=\"Very Unlikely\">Very Unlikely</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"impact\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Impact</FormLabel>\n                <Select \n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select impact\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Catastrophic\">Catastrophic</SelectItem>\n                    <SelectItem value=\"Major\">Major</SelectItem>\n                    <SelectItem value=\"Serious\">Serious</SelectItem>\n                    <SelectItem value=\"Medium\">Medium</SelectItem>\n                    <SelectItem value=\"Minor\">Minor</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <FormField\n          control={form.control}\n          name=\"inherentRiskLevel\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Inherent Risk Level</FormLabel>\n              <Select \n                onValueChange={field.onChange}\n                defaultValue={field.value}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select risk level\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"High\">High</SelectItem>\n                  <SelectItem value=\"Medium\">Medium</SelectItem>\n                  <SelectItem value=\"Low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"existingControls\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Existing Controls</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"What controls are already in place?\"\n                  {...field}\n                  value={field.value || ''}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"controlEffectiveness\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Control Effectiveness</FormLabel>\n              <Select \n                onValueChange={field.onChange}\n                defaultValue={field.value}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select effectiveness\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"Effective\">Effective</SelectItem>\n                  <SelectItem value=\"Needs Improvement\">Needs Improvement</SelectItem>\n                  <SelectItem value=\"None\">None</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"residualRiskLevel\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Residual Risk Level (Post-Mitigation)</FormLabel>\n              <Select \n                onValueChange={field.onChange}\n                defaultValue={field.value}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select risk level\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"High\">High</SelectItem>\n                  <SelectItem value=\"Medium\">Medium</SelectItem>\n                  <SelectItem value=\"Low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"mitigationActions\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Mitigation Actions</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"What actions can be taken to mitigate this risk?\"\n                  className=\"min-h-[100px]\"\n                  {...field}\n                  value={field.value || ''}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"targetDate\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Target Date</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-full pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        field.value\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value ? new Date(field.value) : undefined}\n                    onSelect={(date) => {\n                      const formattedDate = date ? format(date, 'yyyy-MM-dd') : undefined;\n                      field.onChange(formattedDate);\n                      setTargetDateString(formattedDate);\n                    }}\n                    disabled={(date) => date < new Date()}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"isAccepted\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel>Risk Accepted</FormLabel>\n                <FormDescription>\n                  Check this if the organization has formally accepted this risk\n                </FormDescription>\n              </div>\n            </FormItem>\n          )}\n        />\n        \n        <Button \n          type=\"submit\" \n          className=\"w-full\"\n          disabled={saveRiskMutation.isPending}\n        >\n          {saveRiskMutation.isPending ? \"Saving...\" : initialData ? \"Update Risk\" : \"Add Risk\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}","size_bytes":16352},"client/src/components/risks/risk-heatmap.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, Shield, ShieldAlert, ShieldCheck, ShieldOff, Info } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface DomainData {\n  domain: string;\n  domainCode: string;\n  controls: any[];\n  implemented: number;\n  partially_implemented: number;\n  not_implemented: number;\n  risk_level: number;\n}\n\ninterface RiskHeatmapProps {\n  domains?: DomainData[];\n}\n\nfunction RiskHeatmapComponent({ domains = [] }: RiskHeatmapProps) {\n  // If no domains or empty data, show placeholder\n  if (!domains || domains.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-6 space-y-4 h-64 bg-card/30 backdrop-blur-sm rounded-lg border border-border/30\">\n        <AlertTriangle className=\"h-12 w-12 text-amber-500 opacity-80\" />\n        <h3 className=\"text-lg font-medium\">No Risk Data Available</h3>\n        <p className=\"text-center text-muted-foreground max-w-md\">\n          There is no risk data to display for this assessment. Complete an assessment to view your risk heatmap.\n        </p>\n      </div>\n    );\n  }\n\n  // Function to determine color based on risk level\n  const getRiskColor = (riskLevel: number) => {\n    if (riskLevel <= 20) return \"bg-emerald-600/90\"; // Very Low Risk\n    if (riskLevel <= 40) return \"bg-green-500/90\"; // Low Risk\n    if (riskLevel <= 60) return \"bg-amber-500/90\"; // Medium Risk\n    if (riskLevel <= 80) return \"bg-orange-500/90\"; // High Risk\n    return \"bg-red-600/90\"; // Very High Risk\n  };\n\n  // Function to get badge colors\n  const getRiskBadgeColor = (riskLevel: number) => {\n    if (riskLevel <= 20) return \"bg-emerald-500/20 text-emerald-600 border-emerald-500/30\"; \n    if (riskLevel <= 40) return \"bg-green-500/20 text-green-600 border-green-500/30\"; \n    if (riskLevel <= 60) return \"bg-amber-500/20 text-amber-600 border-amber-500/30\"; \n    if (riskLevel <= 80) return \"bg-orange-500/20 text-orange-600 border-orange-500/30\"; \n    return \"bg-red-500/20 text-red-600 border-red-500/30\"; \n  };\n\n  // Function to get text color\n  const getTextColor = (riskLevel: number) => {\n    return \"text-white\"; // All backgrounds are dark enough for white text\n  };\n\n  // Function to get risk level label\n  const getRiskLabel = (riskLevel: number) => {\n    if (riskLevel <= 20) return \"Very Low\";\n    if (riskLevel <= 40) return \"Low\";\n    if (riskLevel <= 60) return \"Medium\";\n    if (riskLevel <= 80) return \"High\";\n    return \"Very High\";\n  };\n\n  // Function to get risk icon\n  const getRiskIcon = (riskLevel: number) => {\n    if (riskLevel <= 20) return <ShieldCheck className=\"h-4 w-4\" />;\n    if (riskLevel <= 40) return <Shield className=\"h-4 w-4\" />;\n    if (riskLevel <= 60) return <ShieldAlert className=\"h-4 w-4\" />;\n    if (riskLevel <= 80) return <ShieldOff className=\"h-4 w-4\" />;\n    return <ShieldOff className=\"h-4 w-4\" />;\n  };\n\n  // Calculate compliance percentage for visual bars\n  const getCompliancePercentage = (domain: DomainData) => {\n    const total = domain.implemented + domain.partially_implemented + domain.not_implemented;\n    if (total === 0) return 0;\n    \n    // Full compliance for implemented, half for partially implemented\n    return Math.round(((domain.implemented * 1.0) + (domain.partially_implemented * 0.5)) / total * 100);\n  };\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-h-[440px] overflow-y-auto pr-2\">\n          {domains.map((domain, index) => {\n            const compliancePercentage = getCompliancePercentage(domain);\n            return (\n              <Card key={index} className=\"overflow-hidden border border-border/50 shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <div className={`h-1.5 ${getRiskColor(domain.risk_level)}`}></div>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h4 className=\"text-base font-medium flex items-center\">\n                        {domain.domainCode} - {domain.domain}\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Info className=\"h-3.5 w-3.5 ml-1.5 text-muted-foreground cursor-help\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p className=\"text-xs\">\n                              Risk level is calculated based on control implementation status and criticality\n                            </p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </h4>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        {domain.controls.length} controls\n                      </div>\n                    </div>\n                    <Badge className={`${getRiskBadgeColor(domain.risk_level)}`}>\n                      <span className=\"flex items-center gap-1\">\n                        {getRiskIcon(domain.risk_level)}\n                        {getRiskLabel(domain.risk_level)} Risk\n                      </span>\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"mb-3\">\n                    <div className=\"flex justify-between items-center text-xs mb-1\">\n                      <span className=\"text-muted-foreground\">Compliance</span>\n                      <span className=\"font-medium\">{compliancePercentage}%</span>\n                    </div>\n                    <Progress value={compliancePercentage} className=\"h-2\" />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-2 text-center\">\n                    <div className=\"bg-emerald-500/10 border border-emerald-500/30 rounded-md py-2 px-2\">\n                      <span className=\"text-lg font-semibold text-emerald-600\">{domain.implemented}</span>\n                      <span className=\"block text-xs text-muted-foreground\">Implemented</span>\n                    </div>\n                    <div className=\"bg-amber-500/10 border border-amber-500/30 rounded-md py-2 px-2\">\n                      <span className=\"text-lg font-semibold text-amber-600\">{domain.partially_implemented}</span>\n                      <span className=\"block text-xs text-muted-foreground\">Partial</span>\n                    </div>\n                    <div className=\"bg-red-500/10 border border-red-500/30 rounded-md py-2 px-2\">\n                      <span className=\"text-lg font-semibold text-red-600\">{domain.not_implemented}</span>\n                      <span className=\"block text-xs text-muted-foreground\">Not Impl.</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        {/* Legend */}\n        <div className=\"flex flex-wrap justify-center gap-x-6 gap-y-2 p-2 bg-card/30 backdrop-blur-sm rounded-lg border border-border/30\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-sm bg-emerald-600/90 mr-2\"></div>\n            <span className=\"text-xs font-medium\">Very Low Risk</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-sm bg-green-500/90 mr-2\"></div>\n            <span className=\"text-xs font-medium\">Low Risk</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-sm bg-amber-500/90 mr-2\"></div>\n            <span className=\"text-xs font-medium\">Medium Risk</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-sm bg-orange-500/90 mr-2\"></div>\n            <span className=\"text-xs font-medium\">High Risk</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 rounded-sm bg-red-600/90 mr-2\"></div>\n            <span className=\"text-xs font-medium\">Very High Risk</span>\n          </div>\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n}\n\n// Sample data for dashboard view when no props are provided\nconst sampleDomainData: DomainData[] = [\n  {\n    domain: \"Governance\",\n    domainCode: \"GOV\",\n    controls: new Array(12),\n    implemented: 5,\n    partially_implemented: 4,\n    not_implemented: 3,\n    risk_level: 40\n  },\n  {\n    domain: \"Defense\",\n    domainCode: \"DEF\",\n    controls: new Array(8),\n    implemented: 6,\n    partially_implemented: 1,\n    not_implemented: 1,\n    risk_level: 20\n  },\n  {\n    domain: \"Resilience\",\n    domainCode: \"RES\",\n    controls: new Array(10),\n    implemented: 4,\n    partially_implemented: 3,\n    not_implemented: 3,\n    risk_level: 60\n  },\n  {\n    domain: \"Risk Management\",\n    domainCode: \"RISK\",\n    controls: new Array(7),\n    implemented: 2,\n    partially_implemented: 2,\n    not_implemented: 3,\n    risk_level: 70\n  }\n];\n\n// Default export with data fetching for dashboard\nexport default function RiskHeatmap() {\n  const { data: riskData, isLoading, error } = useQuery({\n    queryKey: [\"/api/risk-prediction/dashboard\"],\n    retry: 1,\n  });\n  \n  // If still loading or no data, show loading state or sample data\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-6 h-64\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 border-4 border-t-primary border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin mx-auto mb-3\"></div>\n          <p className=\"text-sm text-muted-foreground\">Loading risk data...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // If there is an error or no risk data\n  if (error || !riskData || !riskData.domain_risk_distribution) {\n    return <RiskHeatmapComponent domains={[]} />;\n  }\n  \n  // Map API data to the format expected by the heatmap component\n  const domainData: DomainData[] = riskData.high_risk_domains?.map((domain: any) => {\n    return {\n      domain: domain.domain,\n      domainCode: domain.domain_code || domain.domain.substring(0, 3).toUpperCase(),\n      controls: domain.control_risks || [],\n      implemented: domain.implemented || 0,\n      partially_implemented: domain.partially_implemented || 0,\n      not_implemented: domain.not_implemented || 0,\n      risk_level: \n        domain.risk_level === \"High\" ? 80 :\n        domain.risk_level === \"Medium\" ? 60 :\n        domain.risk_level === \"Low\" ? 40 : 20\n    };\n  }) || [];\n  \n  // If no data is available from the API, fallback to sample data for demonstration\n  if (domainData.length === 0) {\n    // For demo purposes, otherwise we would just show empty state\n    return <RiskHeatmapComponent domains={sampleDomainData} />;\n  }\n  \n  return <RiskHeatmapComponent domains={domainData} />;\n}\n\n// Named export for when data is provided\nexport { RiskHeatmapComponent };","size_bytes":11163},"client/src/components/risks/risk-status-chart.tsx":{"content":"import React from 'react';\nimport { Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip } from 'recharts';\n\ninterface RiskStatusChartProps {\n  implemented: number;\n  partiallyImplemented: number;\n  notImplemented: number;\n}\n\nexport function RiskStatusChart({ \n  implemented, \n  partiallyImplemented, \n  notImplemented \n}: RiskStatusChartProps) {\n  const data = [\n    { name: 'Implemented', value: implemented, color: '#22c55e' },\n    { name: 'Partially Implemented', value: partiallyImplemented, color: '#f59e0b' },\n    { name: 'Not Implemented', value: notImplemented, color: '#ef4444' },\n  ].filter(item => item.value > 0); // Only include non-zero values\n  \n  const total = implemented + partiallyImplemented + notImplemented;\n  \n  if (total === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full text-center\">\n        <p className=\"text-muted-foreground mb-2\">No assessment data available</p>\n        <p className=\"text-xs text-muted-foreground\">\n          Complete the assessment to view compliance status\n        </p>\n      </div>\n    );\n  }\n  \n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          outerRadius={80}\n          innerRadius={40}\n          dataKey=\"value\"\n          label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n        <Tooltip \n          formatter={(value: number) => [\n            `${value} controls (${((value / total) * 100).toFixed(1)}%)`, \n            'Controls'\n          ]}\n        />\n        <Legend />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}","size_bytes":1834},"client/src/components/timeline/security-progress-timeline.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  Check, \n  AlertTriangle, \n  Clock, \n  FileCheck, \n  CalendarCheck, \n  ShieldCheck,\n  ArrowRight,\n  FileWarning,\n  Shield,\n  ChevronDown,\n  ChevronUp\n} from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TimelineEvent {\n  id: string | number;\n  title: string;\n  description?: string;\n  date: string;\n  type: 'assessment' | 'milestone' | 'risk' | 'improvement' | 'compliance';\n  status: 'completed' | 'in-progress' | 'planned' | 'overdue';\n  frameworkName?: string;\n  score?: number;\n  metadata?: Record<string, any>;\n}\n\ninterface SecurityProgressTimelineProps {\n  events: TimelineEvent[];\n  className?: string;\n  maxVisible?: number;\n  showIcons?: boolean;\n  compact?: boolean;\n  animate?: boolean;\n}\n\nexport function SecurityProgressTimeline({ \n  events = [], \n  className, \n  maxVisible = 5,\n  showIcons = true,\n  compact = false,\n  animate = true\n}: SecurityProgressTimelineProps) {\n  const [visibleEvents, setVisibleEvents] = useState<TimelineEvent[]>([]);\n  const [expanded, setExpanded] = useState(false);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  \n  // Sort events by date (most recent first)\n  const sortedEvents = [...events].sort((a, b) => \n    new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n  \n  // Control how many events are shown\n  const displayEvents = expanded \n    ? sortedEvents \n    : sortedEvents.slice(0, maxVisible);\n  \n  useEffect(() => {\n    // Initialize animation only when needed\n    if (animate && !animationComplete) {\n      // Start with no events\n      setVisibleEvents([]);\n      \n      // Animate events appearing one by one\n      let displayCount = 0;\n      const interval = setInterval(() => {\n        if (displayCount < displayEvents.length) {\n          setVisibleEvents(prev => [...prev, displayEvents[displayCount]]);\n          displayCount++;\n        } else {\n          clearInterval(interval);\n          setAnimationComplete(true);\n        }\n      }, 600); // Adjust timing as needed\n      \n      return () => clearInterval(interval);\n    } else if (!animate) {\n      // If animation is disabled, just show all events immediately\n      setVisibleEvents(displayEvents);\n    }\n  }, [animate, animationComplete, expanded]); // Only depend on animation controls and expanded state\n  \n  // Update visible events when displayEvents changes but only if not animating\n  useEffect(() => {\n    if (!animate || animationComplete) {\n      setVisibleEvents(displayEvents);\n    }\n  }, [displayEvents, animate, animationComplete]);\n  \n  // Icon mapping based on event type\n  const getIcon = (type: TimelineEvent['type'], status: TimelineEvent['status']) => {\n    switch (type) {\n      case 'assessment':\n        return status === 'completed' ? <FileCheck className=\"h-5 w-5 text-green-500\" /> \n          : status === 'in-progress' ? <Clock className=\"h-5 w-5 text-amber-500\" />\n          : status === 'overdue' ? <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n          : <CalendarCheck className=\"h-5 w-5 text-muted-foreground\" />;\n      case 'milestone':\n        return <Check className=\"h-5 w-5 text-primary\" />;\n      case 'risk':\n        return <AlertTriangle className=\"h-5 w-5 text-destructive\" />;\n      case 'improvement':\n        return <ArrowRight className=\"h-5 w-5 text-blue-500\" />;\n      case 'compliance':\n        return <ShieldCheck className=\"h-5 w-5 text-green-500\" />;\n      default:\n        return <Shield className=\"h-5 w-5 text-muted-foreground\" />;\n    }\n  };\n  \n  // Badge styling based on status\n  const getStatusBadge = (status: TimelineEvent['status']) => {\n    switch (status) {\n      case 'completed':\n        return <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-600 border-green-200\">Completed</Badge>;\n      case 'in-progress':\n        return <Badge variant=\"outline\" className=\"bg-amber-500/10 text-amber-600 border-amber-200\">In Progress</Badge>;\n      case 'planned':\n        return <Badge variant=\"outline\" className=\"bg-blue-500/10 text-blue-600 border-blue-200\">Planned</Badge>;\n      case 'overdue':\n        return <Badge variant=\"outline\" className=\"bg-red-500/10 text-red-600 border-red-200\">Overdue</Badge>;\n      default:\n        return null;\n    }\n  };\n  \n  // Format date to be more readable\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('en-US', { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    }).format(date);\n  };\n  \n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div className=\"flex justify-between items-center mb-2\">\n        <h3 className=\"text-lg font-semibold\">Security Progress Timeline</h3>\n        {sortedEvents.length > maxVisible && (\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setExpanded(!expanded)}\n            className=\"flex items-center gap-1 text-xs\"\n          >\n            {expanded ? (\n              <>\n                Show Less <ChevronUp className=\"h-3 w-3\" />\n              </>\n            ) : (\n              <>\n                Show More <ChevronDown className=\"h-3 w-3\" />\n              </>\n            )}\n          </Button>\n        )}\n      </div>\n      \n      <div className=\"relative\">\n        {/* Timeline line */}\n        {!compact && (\n          <div className=\"absolute left-6 top-8 bottom-8 w-px bg-border/50 z-0\" />\n        )}\n        \n        {/* Timeline events */}\n        <div className=\"space-y-4 relative z-10\">\n          <AnimatePresence>\n            {visibleEvents.filter(event => event !== undefined && event !== null).map((event, index) => (\n              <motion.div\n                key={event.id}\n                initial={animate ? { opacity: 0, y: 20 } : false}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.5 }}\n              >\n                <Card className={cn(\n                  \"border border-border/40 relative backdrop-blur-sm\",\n                  event.status === 'completed' && \"bg-green-500/5\",\n                  event.status === 'in-progress' && \"bg-amber-500/5\",\n                  event.status === 'planned' && \"bg-blue-500/5\", \n                  event.status === 'overdue' && \"bg-red-500/5\"\n                )}>\n                  <CardHeader className={cn(\"pb-2\", compact && \"p-3\")}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-3\">\n                        {showIcons && !compact && (\n                          <div className=\"mt-1 flex-shrink-0\">\n                            {getIcon(event.type, event.status)}\n                          </div>\n                        )}\n                        <div>\n                          <CardTitle className={cn(\"flex items-start gap-2\", compact && \"text-sm\")}>\n                            {event.title}\n                            {compact && getStatusBadge(event.status)}\n                          </CardTitle>\n                          {!compact && (\n                            <CardDescription>{event.description}</CardDescription>\n                          )}\n                        </div>\n                      </div>\n                      {!compact && (\n                        <div className=\"flex flex-col items-end gap-1\">\n                          {getStatusBadge(event.status)}\n                          <span className=\"text-xs text-muted-foreground\">\n                            {formatDate(event.date)}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  {!compact && event.score !== undefined && (\n                    <CardContent className=\"pb-3\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Compliance Score</span>\n                          <span className=\"font-medium\">{event.score}%</span>\n                        </div>\n                        <Progress value={event.score} className=\"h-2\" />\n                        {event.frameworkName && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            Framework: {event.frameworkName}\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  )}\n                  \n                  {compact && (\n                    <CardFooter className=\"pt-0 pb-2 px-3\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        {formatDate(event.date)}\n                      </span>\n                    </CardFooter>\n                  )}\n                </Card>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </div>\n      </div>\n      \n      {/* Show \"Load more\" button if there are more events than initially shown */}\n      {sortedEvents.length > maxVisible && !expanded && animationComplete && (\n        <div className=\"flex justify-center\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={() => setExpanded(true)}\n            className=\"text-xs\"\n          >\n            View Complete History\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9802},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/upload/file-uploader.tsx":{"content":"import React, { useRef, useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Upload, X } from \"lucide-react\";\n\ninterface FileUploaderProps {\n  onFileSelect: (files: File[]) => void;\n  accept?: string;\n  multiple?: boolean;\n  buttonText?: string;\n  isLoading?: boolean;\n}\n\nexport function FileUploader({\n  onFileSelect,\n  accept = '*',\n  multiple = false,\n  buttonText = 'Upload File',\n  isLoading = false\n}: FileUploaderProps) {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const files = Array.from(e.target.files);\n      setSelectedFiles(multiple ? files : [files[0]]);\n      onFileSelect(multiple ? files : [files[0]]);\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    const newFiles = [...selectedFiles];\n    newFiles.splice(index, 1);\n    setSelectedFiles(newFiles);\n  };\n\n  const triggerFileSelect = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileChange}\n        accept={accept}\n        multiple={multiple}\n        className=\"hidden\"\n        id=\"file-upload\"\n      />\n      \n      <Button \n        type=\"button\" \n        onClick={triggerFileSelect}\n        disabled={isLoading}\n        variant=\"outline\"\n      >\n        {isLoading ? (\n          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n        ) : (\n          <Upload className=\"h-4 w-4 mr-2\" />\n        )}\n        {buttonText}\n      </Button>\n      \n      {selectedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          {selectedFiles.map((file, index) => (\n            <div \n              key={`${file.name}-${index}`} \n              className=\"flex items-center justify-between p-2 pl-3 rounded-md bg-secondary/20\"\n            >\n              <div className=\"flex items-center space-x-2 truncate max-w-[80%]\">\n                <span className=\"text-xs text-muted-foreground truncate\">{file.name}</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  ({file.size < 1024 * 1024 \n                    ? `${Math.round(file.size / 1024)} KB` \n                    : `${(file.size / (1024 * 1024)).toFixed(1)} MB`})\n                </span>\n              </div>\n              <Button \n                type=\"button\" \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleRemoveFile(index)}\n                className=\"h-6 w-6 p-0\"\n                disabled={isLoading}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2869},"client/src/components/user-dashboard/user-header.tsx":{"content":"import React from \"react\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport { Bell, Menu, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\nimport { ThemeSwitch } from \"@/components/layout/theme-switch\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface UserHeaderProps {\n  toggleSidebar?: () => void;\n  organizationName?: string;\n}\n\nexport default function UserHeader({ toggleSidebar, organizationName = \"Your Organization\" }: UserHeaderProps) {\n  const { user, signOut } = useClerkUser();\n  \n  // Get user initials for avatar fallback\n  const getInitials = () => {\n    if (!user) return \"U\";\n    \n    const firstName = user.firstName || \"\";\n    const lastName = user.lastName || \"\";\n    \n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`;\n    } else if (firstName) {\n      return firstName[0];\n    } else {\n      return \"U\";\n    }\n  };\n\n  // Dummy compliance score for demonstration\n  const complianceScore = 72;\n\n  return (\n    <header className=\"h-16 border-b border-border bg-card/30 backdrop-blur-sm px-4 flex items-center justify-between\">\n      {/* Left section with mobile menu toggle */}\n      <div className=\"flex items-center\">\n        {toggleSidebar && (\n          <Button variant=\"ghost\" size=\"icon\" onClick={toggleSidebar} className=\"lg:hidden mr-2\">\n            <Menu className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Toggle menu</span>\n          </Button>\n        )}\n        \n        {/* Organization name and compliance badge */}\n        <div className=\"flex items-center\">\n          <h2 className=\"font-medium text-sm md:text-base\">{organizationName}</h2>\n          <div className=\"ml-4 hidden md:flex items-center\">\n            <Badge variant=\"outline\" className=\"bg-primary/5 text-xs gap-1 flex items-center\">\n              <span className=\"w-2 h-2 rounded-full bg-primary\"></span>\n              <span>Compliance Score: {complianceScore}%</span>\n            </Badge>\n          </div>\n        </div>\n      </div>\n      \n      {/* Right section with notifications, help and user menu */}\n      <div className=\"flex items-center space-x-2\">\n        <ThemeSwitch>Toggle theme</ThemeSwitch>\n        \n        {/* Help */}\n        <Button variant=\"ghost\" size=\"icon\">\n          <HelpCircle className=\"h-5 w-5\" />\n          <span className=\"sr-only\">Help</span>\n        </Button>\n        \n        {/* Notifications */}\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          <span className=\"absolute top-1 right-1 h-2 w-2 rounded-full bg-primary\"></span>\n          <span className=\"sr-only\">Notifications</span>\n        </Button>\n        \n        {/* User menu */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={user?.imageUrl} alt={user?.firstName || \"User\"} />\n                <AvatarFallback>{getInitials()}</AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>\n              <div className=\"flex flex-col\">\n                <span>{user?.firstName} {user?.lastName}</span>\n                <span className=\"text-xs text-muted-foreground truncate max-w-52\">\n                  {user?.emailAddresses?.[0]?.emailAddress}\n                </span>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>Profile</DropdownMenuItem>\n            <DropdownMenuItem>Company Settings</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={() => signOut()}>\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}","size_bytes":4213},"client/src/components/user-dashboard/user-overview.tsx":{"content":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport {\n  CheckCircle2,\n  AlertTriangle,\n  FileText,\n  Clock,\n  ChevronRight,\n  BarChart3,\n  Shield,\n  FileClock\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function UserOverview() {\n  // Dummy data for demonstration\n  const frameworkProgress = [\n    {\n      name: \"NCA ECC\",\n      progress: 72,\n      status: \"In Progress\",\n      color: \"text-green-500\",\n      bgColor: \"bg-green-500\"\n    },\n    {\n      name: \"SAMA\",\n      progress: 48,\n      status: \"In Progress\",\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500\"\n    },\n    {\n      name: \"PDPL\",\n      progress: 32,\n      status: \"Started\",\n      color: \"text-purple-500\",\n      bgColor: \"bg-purple-500\"\n    },\n    {\n      name: \"ISO 27001\",\n      progress: 0,\n      status: \"Not Started\",\n      color: \"text-amber-500\",\n      bgColor: \"bg-amber-500\"\n    }\n  ];\n  \n  const pendingTasks = [\n    {\n      id: 1,\n      title: \"Complete NCA ECC Domain 1 Assessment\",\n      dueDate: \"Oct 15, 2023\",\n      priority: \"High\",\n      framework: \"NCA ECC\"\n    },\n    {\n      id: 2,\n      title: \"Review Access Control Policy\",\n      dueDate: \"Oct 18, 2023\",\n      priority: \"Medium\",\n      framework: \"SAMA\"\n    },\n    {\n      id: 3,\n      title: \"Document Incident Response Procedures\",\n      dueDate: \"Oct 22, 2023\",\n      priority: \"High\",\n      framework: \"NCA ECC\"\n    },\n    {\n      id: 4,\n      title: \"Update Data Classification Policy\",\n      dueDate: \"Oct 30, 2023\",\n      priority: \"Medium\",\n      framework: \"PDPL\"\n    }\n  ];\n  \n  const recentAssessments = [\n    {\n      id: 1,\n      name: \"NCA ECC Domain 2: Risk Management\",\n      date: \"Oct 1, 2023\",\n      score: 78,\n      status: \"Completed\"\n    },\n    {\n      id: 2,\n      name: \"SAMA Control Set: Access Control\",\n      date: \"Sep 28, 2023\",\n      score: 65,\n      status: \"Completed\"\n    },\n    {\n      id: 3,\n      name: \"NCA ECC Domain 3: Security Policy\",\n      date: \"Sep 25, 2023\",\n      score: 82,\n      status: \"Completed\"\n    }\n  ];\n  \n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case \"High\":\n        return <Badge variant=\"destructive\">High</Badge>;\n      case \"Medium\":\n        return <Badge variant=\"default\" className=\"bg-amber-500\">Medium</Badge>;\n      case \"Low\":\n        return <Badge variant=\"outline\">Low</Badge>;\n      default:\n        return <Badge variant=\"outline\">Normal</Badge>;\n    }\n  };\n  \n  const getScoreBadge = (score: number) => {\n    if (score >= 80) return <Badge className=\"bg-green-500\">Strong ({score}%)</Badge>;\n    if (score >= 60) return <Badge className=\"bg-amber-500\">Moderate ({score}%)</Badge>;\n    return <Badge variant=\"destructive\">Weak ({score}%)</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">Compliance Dashboard</h1>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\">Generate Report</Button>\n          <Button>Start Assessment</Button>\n        </div>\n      </div>\n      \n      {/* Overall Compliance Score */}\n      <Card className=\"bg-card/50 backdrop-blur-sm border-primary/10\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-lg flex items-center\">\n            <Shield className=\"mr-2 h-5 w-5 text-primary\" />\n            Overall Compliance Status\n          </CardTitle>\n          <CardDescription>\n            Combined compliance score across all frameworks\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"h-24 w-24 rounded-full flex items-center justify-center border-8 border-primary/30 relative\">\n                <span className=\"absolute inset-0 flex items-center justify-center text-2xl font-bold\">72%</span>\n              </div>\n              <div>\n                <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                <div className=\"text-xl font-bold mt-1\">Moderate</div>\n                <div className=\"text-sm text-muted-foreground mt-1\">Last updated: Oct 8, 2023</div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-4 md:w-1/2\">\n              <div className=\"flex flex-col items-center justify-center p-3 rounded-lg bg-primary/5 border border-primary/10\">\n                <CheckCircle2 className=\"h-5 w-5 text-green-500 mb-1\" />\n                <div className=\"text-xs text-muted-foreground\">Compliant</div>\n                <div className=\"text-lg font-bold\">42</div>\n              </div>\n              <div className=\"flex flex-col items-center justify-center p-3 rounded-lg bg-primary/5 border border-primary/10\">\n                <AlertTriangle className=\"h-5 w-5 text-amber-500 mb-1\" />\n                <div className=\"text-xs text-muted-foreground\">Partial</div>\n                <div className=\"text-lg font-bold\">28</div>\n              </div>\n              <div className=\"flex flex-col items-center justify-center p-3 rounded-lg bg-primary/5 border border-primary/10\">\n                <AlertTriangle className=\"h-5 w-5 text-red-500 mb-1\" />\n                <div className=\"text-xs text-muted-foreground\">Non-Compliant</div>\n                <div className=\"text-lg font-bold\">15</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Framework Progress */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {frameworkProgress.map((framework, index) => (\n          <Card key={index} className=\"bg-card/50 backdrop-blur-sm\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium flex items-center\">\n                <CheckCircle2 className={`mr-2 h-4 w-4 ${framework.color}`} />\n                {framework.name}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"py-2\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Progress</span>\n                  <span className=\"font-medium\">{framework.progress}%</span>\n                </div>\n                <Progress value={framework.progress} className=\"h-2\" />\n                <div className=\"flex justify-between items-center\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {framework.status}\n                  </Badge>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"h-7 text-xs p-0\">\n                    <span>View Details</span>\n                    <ChevronRight className=\"ml-1 h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {/* Tabs section */}\n      <Tabs defaultValue=\"tasks\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"tasks\" className=\"flex items-center\">\n            <Clock className=\"mr-2 h-4 w-4\" />\n            Pending Tasks\n          </TabsTrigger>\n          <TabsTrigger value=\"assessments\" className=\"flex items-center\">\n            <FileClock className=\"mr-2 h-4 w-4\" />\n            Recent Assessments\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"tasks\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Pending Compliance Tasks</CardTitle>\n              <CardDescription>\n                Tasks that require your attention to improve your compliance posture\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <div className=\"grid grid-cols-9 bg-muted p-3 text-xs font-medium\">\n                  <div className=\"col-span-4\">Task</div>\n                  <div className=\"col-span-2\">Framework</div>\n                  <div className=\"col-span-1\">Due Date</div>\n                  <div className=\"col-span-1\">Priority</div>\n                  <div className=\"col-span-1 text-right\">Action</div>\n                </div>\n                <div className=\"divide-y\">\n                  {pendingTasks.map((task) => (\n                    <div\n                      key={task.id}\n                      className=\"grid grid-cols-9 p-3 text-sm items-center\"\n                    >\n                      <div className=\"col-span-4 font-medium\">{task.title}</div>\n                      <div className=\"col-span-2 text-muted-foreground\">{task.framework}</div>\n                      <div className=\"col-span-1 text-muted-foreground\">{task.dueDate}</div>\n                      <div className=\"col-span-1\">{getPriorityBadge(task.priority)}</div>\n                      <div className=\"col-span-1 text-right\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          View\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"justify-between\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing 4 of 12 pending tasks\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                View All Tasks\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"assessments\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Assessments</CardTitle>\n              <CardDescription>\n                Your most recent compliance assessments and scores\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <div className=\"grid grid-cols-8 bg-muted p-3 text-xs font-medium\">\n                  <div className=\"col-span-4\">Assessment</div>\n                  <div className=\"col-span-1\">Date</div>\n                  <div className=\"col-span-1\">Score</div>\n                  <div className=\"col-span-1\">Status</div>\n                  <div className=\"col-span-1 text-right\">Action</div>\n                </div>\n                <div className=\"divide-y\">\n                  {recentAssessments.map((assessment) => (\n                    <div\n                      key={assessment.id}\n                      className=\"grid grid-cols-8 p-3 text-sm items-center\"\n                    >\n                      <div className=\"col-span-4 font-medium\">{assessment.name}</div>\n                      <div className=\"col-span-1 text-muted-foreground\">{assessment.date}</div>\n                      <div className=\"col-span-1\">{getScoreBadge(assessment.score)}</div>\n                      <div className=\"col-span-1\">\n                        <Badge variant=\"outline\" className=\"bg-primary/5\">\n                          {assessment.status}\n                        </Badge>\n                      </div>\n                      <div className=\"col-span-1 text-right\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          Details\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"justify-between\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing 3 of 8 assessments\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                View All Assessments\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      {/* Policies access section */}\n      <Card className=\"bg-card/50 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <FileText className=\"mr-2 h-5 w-5 text-primary\" />\n            Organizational Policies\n          </CardTitle>\n          <CardDescription>\n            Access and review your organization's compliance policies\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Shield className=\"h-8 w-8 text-primary/70\" />\n              <span>Information Security Policy</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Shield className=\"h-8 w-8 text-primary/70\" />\n              <span>Access Control Policy</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <Shield className=\"h-8 w-8 text-primary/70\" />\n              <span>Data Classification Policy</span>\n            </Button>\n            <Button variant=\"default\" className=\"h-auto py-4 px-4 flex flex-col items-center justify-center gap-2\">\n              <BarChart3 className=\"h-8 w-8\" />\n              <span>View All Policies</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13862},"client/src/components/user-dashboard/user-sidebar.tsx":{"content":"import React from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Shield,\n  FileText,\n  BarChart3,\n  ClipboardCheck,\n  AlertTriangle,\n  Book,\n  Home,\n  CheckCircle2,\n  HelpCircle,\n  Settings,\n  GraduationCap\n} from \"lucide-react\";\n\n// Type for sidebar items\ninterface SidebarItem {\n  title: string;\n  href: string;\n  icon: React.ReactNode;\n}\n\n// Type for framework items\ninterface FrameworkItem {\n  title: string;\n  href: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\nexport default function UserSidebar() {\n  const [location] = useLocation();\n\n  // Define main sidebar items\n  const sidebarItems: SidebarItem[] = [\n    {\n      title: \"Dashboard\",\n      href: \"/user-dashboard\",\n      icon: <BarChart3 className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Onboarding\",\n      href: \"/onboarding\",\n      icon: <GraduationCap className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Assessments\",\n      href: \"/user-dashboard/assessments\",\n      icon: <ClipboardCheck className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Risk Management\",\n      href: \"/user-dashboard/risks\",\n      icon: <AlertTriangle className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Policies\",\n      href: \"/user-dashboard/policies\",\n      icon: <FileText className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Documentation\",\n      href: \"/user-dashboard/documentation\",\n      icon: <Book className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Support\",\n      href: \"/user-dashboard/support\",\n      icon: <HelpCircle className=\"h-5 w-5\" />\n    },\n    {\n      title: \"Settings\",\n      href: \"/user-dashboard/settings\",\n      icon: <Settings className=\"h-5 w-5\" />\n    }\n  ];\n  \n  // Define framework items with dedicated colors\n  const frameworkItems: FrameworkItem[] = [\n    {\n      title: \"NCA ECC\",\n      href: \"/user-dashboard/frameworks/nca-ecc\",\n      icon: <CheckCircle2 className=\"h-4 w-4\" />,\n      color: \"text-green-500\"\n    },\n    {\n      title: \"SAMA\",\n      href: \"/user-dashboard/frameworks/sama\",\n      icon: <CheckCircle2 className=\"h-4 w-4\" />,\n      color: \"text-blue-500\"\n    },\n    {\n      title: \"PDPL\",\n      href: \"/user-dashboard/frameworks/pdpl\",\n      icon: <CheckCircle2 className=\"h-4 w-4\" />,\n      color: \"text-purple-500\"\n    },\n    {\n      title: \"ISO 27001\",\n      href: \"/user-dashboard/frameworks/iso-27001\",\n      icon: <CheckCircle2 className=\"h-4 w-4\" />,\n      color: \"text-amber-500\"\n    }\n  ];\n\n  return (\n    <div className=\"w-64 border-r border-border bg-card/30 backdrop-blur-sm h-screen flex-shrink-0\">\n      {/* Logo and title */}\n      <div className=\"h-16 border-b border-border flex items-center px-4\">\n        <Shield className=\"h-6 w-6 text-primary mr-2\" />\n        <h1 className=\"font-bold text-lg\">MetaWorks</h1>\n      </div>\n\n      {/* Sidebar content */}\n      <ScrollArea className=\"h-[calc(100vh-64px)]\">\n        <div className=\"py-4 px-2\">\n          {/* Home link */}\n          <div className=\"px-2 mb-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" className=\"w-full justify-start text-muted-foreground\">\n                <Home className=\"mr-2 h-4 w-4\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n\n          {/* Main Nav links */}\n          <nav className=\"space-y-1 px-2\">\n            {sidebarItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <a\n                  className={cn(\n                    \"flex items-center px-3 py-2 text-sm rounded-md transition-colors\",\n                    location === item.href\n                      ? \"bg-primary/10 text-primary font-medium\"\n                      : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                  )}\n                >\n                  <span className=\"mr-3 text-primary/80\">{item.icon}</span>\n                  {item.title}\n                </a>\n              </Link>\n            ))}\n          </nav>\n          \n          {/* Frameworks Section */}\n          <div className=\"mt-6 px-2\">\n            <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n              Compliance Frameworks\n            </h3>\n            <div className=\"mt-2 space-y-1\">\n              {frameworkItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <a\n                    className={cn(\n                      \"flex items-center px-3 py-2 text-sm rounded-md transition-colors\",\n                      location === item.href\n                        ? \"bg-primary/10 text-primary font-medium\"\n                        : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                    )}\n                  >\n                    <span className={cn(\"mr-3\", item.color)}>{item.icon}</span>\n                    {item.title}\n                  </a>\n                </Link>\n              ))}\n            </div>\n          </div>\n          \n          {/* Virtual Assistant Link */}\n          <div className=\"px-2 mt-6\">\n            <Link href=\"/did-agent\">\n              <Button variant=\"default\" className=\"w-full justify-start\">\n                <Shield className=\"mr-2 h-4 w-4\" />\n                Virtual Assistant\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":5456},"client/src/components/virtual-assistant/assistant-chat.tsx":{"content":"import React, { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar } from \"@/components/ui/avatar\";\nimport { Loader2, Send, User, Bot, Mic, MicOff } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\n// Types for messages\ntype MessageType = \"user\" | \"assistant\";\n\ninterface Message {\n  id: string;\n  content: string;\n  type: MessageType;\n  timestamp: Date;\n}\n\n// Initial messages that the assistant will show\nconst initialMessages: Message[] = [\n  {\n    id: \"welcome-message\",\n    content: \"Hello! I'm your MetaWorks cybersecurity compliance assistant. How can I help you today?\",\n    type: \"assistant\",\n    timestamp: new Date(),\n  },\n  {\n    id: \"suggestion-1\",\n    content: \"I can answer questions about NCA ECC controls and help you understand compliance requirements.\",\n    type: \"assistant\",\n    timestamp: new Date(),\n  },\n];\n\n// Sample compliance questions and their answers for demo purposes\nconst complianceQA: Record<string, string> = {\n  \"what is nca ecc\": \"The NCA Essential Cybersecurity Controls (ECC) is a set of cybersecurity requirements developed by the National Cybersecurity Authority of Saudi Arabia. It includes controls organized into five domains: Governance, Defense, Resilience, Risk Management, and Technology.\",\n  \"explain control 2-3-3\": \"Control 2-3-3 in NCA ECC refers to Patch Management. It requires organizations to develop and implement a patch management process to ensure that security patches and updates are applied in a timely manner to reduce security risks.\",\n  \"what is a cybersecurity policy\": \"A cybersecurity policy is a document that outlines how an organization protects its information assets, systems, and networks from unauthorized access and security threats. It defines procedures, responsibilities, and requirements for maintaining cybersecurity.\",\n  \"help with risk assessment\": \"For risk assessment under NCA ECC, you should: 1) Identify your critical assets, 2) Determine potential threats, 3) Assess vulnerabilities, 4) Evaluate impacts, 5) Calculate risk levels, and 6) Develop mitigation plans. Would you like me to guide you through each step?\",\n  \"compliance report\": \"To generate a compliance report, navigate to the Risk Assessment section in the dashboard, run a compliance scan, and click on 'Generate Report'. The system will create a PDF showing your compliance status against all NCA ECC controls.\",\n};\n\n// Function to generate unique IDs for messages\nconst generateId = () => `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\nexport default function AssistantChat() {\n  const [messages, setMessages] = useState<Message[]>(initialMessages);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Scroll to bottom of messages whenever messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Focus input field on component mount\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  // Function to handle sending a message\n  const handleSendMessage = async () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: Message = {\n      id: generateId(),\n      content: inputValue,\n      type: \"user\",\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    // Simulate API call to get response\n    setTimeout(() => {\n      generateResponse(userMessage.content);\n    }, 1000);\n  };\n\n  // Function to generate a response based on user input\n  const generateResponse = (question: string) => {\n    const lowerQuestion = question.toLowerCase();\n    \n    // Check for exact or partial matches\n    let answer = \"\";\n    \n    for (const [key, value] of Object.entries(complianceQA)) {\n      if (lowerQuestion.includes(key)) {\n        answer = value;\n        break;\n      }\n    }\n    \n    // Default response if no match\n    if (!answer) {\n      answer = \"I don't have specific information about that query. Please ask about NCA ECC controls, cybersecurity policies, or risk assessment, and I'll do my best to help.\";\n    }\n\n    const assistantMessage: Message = {\n      id: generateId(),\n      content: answer,\n      type: \"assistant\",\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, assistantMessage]);\n    setIsLoading(false);\n  };\n\n  // Function to handle Enter key press\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && !isLoading) {\n      handleSendMessage();\n    }\n  };\n\n  // Function to toggle voice input\n  const toggleVoiceInput = () => {\n    setIsListening((prev) => !prev);\n    \n    // Placeholder for speech recognition\n    if (!isListening) {\n      // This would be where you'd implement the speech recognition API\n      // For now, it's just a visual toggle\n      \n      // Simulate turning off after 3 seconds\n      setTimeout(() => {\n        setIsListening(false);\n      }, 3000);\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-[700px] max-h-[80vh] backdrop-blur-sm bg-card/50 border-primary/10\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"flex items-center\">\n          <Bot className=\"h-5 w-5 mr-2 text-primary\" />\n          Virtual Cybersecurity Consultant\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 overflow-hidden p-0\">\n        <ScrollArea className=\"h-full px-4\">\n          <div className=\"flex flex-col gap-3 py-3\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={cn(\n                  \"flex w-full\",\n                  message.type === \"user\" ? \"justify-end\" : \"justify-start\"\n                )}\n              >\n                <div\n                  className={cn(\n                    \"flex items-start gap-3 rounded-lg px-4 py-2 max-w-[80%]\",\n                    message.type === \"user\"\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  )}\n                >\n                  {message.type === \"assistant\" && (\n                    <Avatar className=\"h-8 w-8 border bg-background\">\n                      <Bot className=\"h-4 w-4\" />\n                    </Avatar>\n                  )}\n                  <div className=\"flex flex-col\">\n                    <p className=\"text-sm\">{message.content}</p>\n                    <span className=\"text-xs opacity-50 mt-1\">\n                      {message.timestamp.toLocaleTimeString([], {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                      })}\n                    </span>\n                  </div>\n                  {message.type === \"user\" && (\n                    <Avatar className=\"h-8 w-8 border bg-background\">\n                      <User className=\"h-4 w-4\" />\n                    </Avatar>\n                  )}\n                </div>\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <div className=\"flex items-center gap-3 rounded-lg px-4 py-2 bg-muted\">\n                  <Avatar className=\"h-8 w-8 border bg-background\">\n                    <Bot className=\"h-4 w-4\" />\n                  </Avatar>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n      </CardContent>\n      \n      <CardFooter className=\"pt-0\">\n        <div className=\"flex w-full items-center gap-2 border rounded-md pl-3 pr-1 py-1 focus-within:ring-1 focus-within:ring-primary\">\n          <Input\n            ref={inputRef}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Ask about NCA ECC compliance...\"\n            className=\"border-0 focus-visible:ring-0 focus-visible:ring-offset-0 px-0\"\n            disabled={isLoading}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            type=\"button\"\n            onClick={toggleVoiceInput}\n            className={cn(\n              \"shrink-0\",\n              isListening ? \"text-red-500 animate-pulse\" : \"\"\n            )}\n          >\n            {isListening ? <MicOff className=\"h-5 w-5\" /> : <Mic className=\"h-5 w-5\" />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            type=\"submit\"\n            onClick={handleSendMessage}\n            disabled={!inputValue.trim() || isLoading}\n            className=\"shrink-0\"\n          >\n            <Send className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":9224},"client/src/components/virtual-assistant/virtual-advisor.tsx":{"content":"import React, { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar } from \"@/components/ui/avatar\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { \n  Loader2, Send, User, Bot, Mic, MicOff, \n  HelpCircle, FileText, Code, ListChecks, Volume2, VolumeX \n} from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Types for messages\ntype MessageType = \"user\" | \"assistant\";\ntype MessageCategory = \"general\" | \"guidance\" | \"policy\" | \"control\" | \"checklist\";\n\ninterface Message {\n  id: string;\n  content: string;\n  type: MessageType;\n  category: MessageCategory;\n  timestamp: Date;\n}\n\n// Avatar configuration\ntype AvatarState = \"neutral\" | \"thinking\" | \"happy\" | \"confused\";\ntype VoiceState = \"on\" | \"off\";\n\n// Initial prompt suggestions\nconst initialSuggestions = [\n  \"Explain NCA ECC framework\",\n  \"How do I comply with control 2-5-3?\",\n  \"Generate a security policy template\",\n  \"What's in a risk assessment?\",\n  \"Create compliance checklist\"\n];\n\n// Initial messages\nconst initialMessages: Message[] = [\n  {\n    id: \"welcome-message\",\n    content: \"Hello! I'm your MetaWorks cybersecurity compliance assistant. I'm here to help you understand and implement NCA ECC requirements.\",\n    type: \"assistant\",\n    category: \"general\",\n    timestamp: new Date(),\n  },\n  {\n    id: \"suggestion-1\",\n    content: \"You can ask me about specific controls, policy requirements, or how to improve your compliance posture. Try one of the suggested queries below to get started.\",\n    type: \"assistant\",\n    category: \"guidance\",\n    timestamp: new Date(),\n  },\n];\n\n// Sample compliance questions and their answers\nconst complianceQA: Record<string, {answer: string, category: MessageCategory}> = {\n  \"explain nca ecc framework\": {\n    answer: \"The NCA Essential Cybersecurity Controls (ECC) is a regulatory framework developed by the National Cybersecurity Authority of Saudi Arabia. It consists of 5 domains, 29 subdomains, and 114 essential controls covering various aspects of cybersecurity. The domains include: Cybersecurity Governance, Cybersecurity Defense, Cybersecurity Resilience, Third-Party and Cloud Services Cybersecurity, and Industrial Control Systems Cybersecurity.\",\n    category: \"general\"\n  },\n  \"control 2-5-3\": {\n    answer: \"Control 2-5-3 falls under the Cybersecurity Defense domain and addresses secure network configurations. It requires organizations to implement secure configurations for network devices including routers, switches, and firewalls according to industry standards. You need to document your configurations, review them regularly, and restrict administrative access to these devices.\",\n    category: \"control\"\n  },\n  \"security policy template\": {\n    answer: \"I can help you create a security policy template. A comprehensive information security policy should include: 1) Purpose and scope, 2) Roles and responsibilities, 3) Data classification, 4) Access control rules, 5) Password requirements, 6) Incident response procedures, 7) Acceptable use guidelines, 8) Compliance requirements. Would you like me to generate a specific section?\",\n    category: \"policy\"\n  },\n  \"risk assessment\": {\n    answer: \"A risk assessment under NCA ECC should include: 1) Asset identification and valuation, 2) Threat identification, 3) Vulnerability assessment, 4) Risk calculation (Impact × Likelihood), 5) Risk prioritization, 6) Treatment plans. The ECC requires risk assessments to be conducted annually or after significant changes to systems or processes.\",\n    category: \"guidance\"\n  },\n  \"compliance checklist\": {\n    answer: \"Here's a basic NCA ECC compliance checklist: 1) Develop cybersecurity governance structure, 2) Implement security awareness training, 3) Deploy technical controls (firewalls, antivirus, etc.), 4) Establish incident response procedures, 5) Create backup and recovery plans, 6) Implement access control measures, 7) Perform regular vulnerability assessments, 8) Document all security policies and procedures. Would you like a more detailed checklist for a specific domain?\",\n    category: \"checklist\"\n  },\n};\n\n// Function to generate unique IDs for messages\nconst generateId = () => `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n// Icon mapping for message categories\nconst categoryIcons: Record<MessageCategory, React.ReactNode> = {\n  general: <Bot className=\"h-4 w-4\" />,\n  guidance: <HelpCircle className=\"h-4 w-4\" />,\n  policy: <FileText className=\"h-4 w-4\" />,\n  control: <Code className=\"h-4 w-4\" />,\n  checklist: <ListChecks className=\"h-4 w-4\" />,\n};\n\nexport default function VirtualAdvisor() {\n  const [messages, setMessages] = useState<Message[]>(initialMessages);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [avatarState, setAvatarState] = useState<AvatarState>(\"neutral\");\n  const [voiceState, setVoiceState] = useState<VoiceState>(\"off\");\n  const [activeTab, setActiveTab] = useState<string>(\"chat\");\n  const [didAgentLoaded, setDidAgentLoaded] = useState(false);\n  const [iframeKey, setIframeKey] = useState<number>(Date.now());\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const agentContainerRef = useRef<HTMLDivElement>(null);\n\n  // Function to check if the D-ID agent is loaded\n  // Simplified function that just shows a message instead of trying to load D-ID agent\n  const checkDIDAgent = React.useCallback(() => {\n    console.log(\"D-ID agent refresh requested...\");\n    \n    // Show that we tried to refresh\n    setDidAgentLoaded(true);\n    \n    // After 1.5 seconds, show it as not loaded again so user can click refresh again if needed\n    setTimeout(() => {\n      setDidAgentLoaded(false);\n    }, 1500);\n    \n  }, []);\n\n  // Scroll to bottom of messages whenever messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Focus input field on component mount\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n  \n  // Set UI state when tab changes to 'assistant'\n  useEffect(() => {\n    if (activeTab === 'assistant') {\n      // Reset agent loading state\n      setDidAgentLoaded(false);\n      \n      // Set up an event listener for the iframe's load event\n      const handleIframeLoad = () => {\n        setTimeout(() => {\n          setDidAgentLoaded(true);\n        }, 2000); // Give a little extra time for the agent to initialize\n      };\n      \n      // Find the iframe and add the load listener\n      const iframe = document.getElementById('did-agent-iframe') as HTMLIFrameElement;\n      if (iframe) {\n        iframe.addEventListener('load', handleIframeLoad);\n      }\n      \n      // Set a fallback timer in case the load event doesn't fire\n      const fallbackTimer = setTimeout(() => {\n        setDidAgentLoaded(true);\n      }, 8000);\n      \n      return () => {\n        // Clean up event listener and timer\n        if (iframe) {\n          iframe.removeEventListener('load', handleIframeLoad);\n        }\n        clearTimeout(fallbackTimer);\n      };\n    }\n  }, [activeTab]);\n\n  // Function to handle sending a message\n  const handleSendMessage = async () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: Message = {\n      id: generateId(),\n      content: inputValue,\n      type: \"user\",\n      category: \"general\", // Default category for user messages\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsLoading(true);\n    setAvatarState(\"thinking\");\n\n    // Simulate API call to get response\n    setTimeout(() => {\n      generateResponse(userMessage.content);\n    }, 1500);\n  };\n\n  // Function to generate a response based on user input\n  const generateResponse = (question: string) => {\n    const lowerQuestion = question.toLowerCase();\n    \n    // Check for matches in our QA database\n    let answer = \"\";\n    let category: MessageCategory = \"general\";\n    \n    for (const [key, value] of Object.entries(complianceQA)) {\n      if (lowerQuestion.includes(key)) {\n        answer = value.answer;\n        category = value.category;\n        break;\n      }\n    }\n    \n    // Default response if no match\n    if (!answer) {\n      answer = \"I don't have specific information about that query. You can ask me about NCA ECC controls, cybersecurity policies, risk assessments, or compliance checklists.\";\n      category = \"general\";\n      setAvatarState(\"confused\");\n    } else {\n      setAvatarState(\"happy\");\n    }\n\n    const assistantMessage: Message = {\n      id: generateId(),\n      content: answer,\n      type: \"assistant\",\n      category: category,\n      timestamp: new Date(),\n    };\n\n    // If voice is on, simulate text-to-speech\n    if (voiceState === \"on\") {\n      // This is where you'd implement actual text-to-speech\n      console.log(\"Text-to-speech would say:\", answer);\n    }\n\n    setMessages((prev) => [...prev, assistantMessage]);\n    setIsLoading(false);\n    \n    // Reset avatar state after 3 seconds\n    setTimeout(() => {\n      setAvatarState(\"neutral\");\n    }, 3000);\n  };\n\n  // Function to handle Enter key press\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && !isLoading) {\n      handleSendMessage();\n    }\n  };\n\n  // Function to toggle voice input/output\n  const toggleVoiceInput = () => {\n    setIsListening((prev) => !prev);\n    \n    // Placeholder for speech recognition\n    if (!isListening) {\n      // This would be where you'd implement the speech recognition API\n      \n      // Simulate turning off after 3 seconds\n      setTimeout(() => {\n        setIsListening(false);\n      }, 3000);\n    }\n  };\n  \n  // Function to toggle voice output\n  const toggleVoiceOutput = () => {\n    setVoiceState((prev) => (prev === \"on\" ? \"off\" : \"on\"));\n  };\n  \n  // Function to use a suggested prompt\n  const useSuggestion = (suggestion: string) => {\n    setInputValue(suggestion);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <Card className=\"flex flex-col h-[700px] max-h-[80vh] backdrop-blur-sm bg-card/50 border-primary/10\">\n      <CardHeader className=\"pb-0\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <CardTitle className=\"flex items-center\">\n              <Bot className=\"h-5 w-5 mr-2 text-primary\" />\n              MetaWorks Compliance Assistant\n            </CardTitle>\n            <CardDescription>\n              Your AI guide to NCA ECC compliance\n            </CardDescription>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={toggleVoiceOutput}\n                    className=\"h-8 w-8\"\n                  >\n                    {voiceState === \"on\" ? (\n                      <Volume2 className=\"h-4 w-4\" />\n                    ) : (\n                      <VolumeX className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{voiceState === \"on\" ? \"Disable\" : \"Enable\"} voice responses</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <Tabs defaultValue=\"chat\" className=\"flex-1 flex flex-col\" value={activeTab} onValueChange={setActiveTab}>\n        <div className=\"px-4 pt-2\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"chat\">Chat</TabsTrigger>\n            <TabsTrigger value=\"assistant\">Virtual Consultant</TabsTrigger>\n          </TabsList>\n        </div>\n        \n        <TabsContent value=\"chat\" className=\"flex-1 flex flex-col p-0 m-0\">\n          <CardContent className=\"flex-1 overflow-hidden p-0 pt-4\">\n            <ScrollArea className=\"h-full px-4\">\n              <div className=\"flex flex-col gap-3 pb-3\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={cn(\n                      \"flex w-full\",\n                      message.type === \"user\" ? \"justify-end\" : \"justify-start\"\n                    )}\n                  >\n                    <div\n                      className={cn(\n                        \"flex items-start gap-3 rounded-lg px-4 py-2 max-w-[85%]\",\n                        message.type === \"user\"\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"bg-muted\"\n                      )}\n                    >\n                      {message.type === \"assistant\" && (\n                        <Avatar className=\"h-8 w-8 border bg-background\">\n                          {categoryIcons[message.category]}\n                        </Avatar>\n                      )}\n                      <div className=\"flex flex-col\">\n                        {message.type === \"assistant\" && message.category !== \"general\" && (\n                          <Badge variant=\"outline\" className=\"w-fit mb-1 text-xs\">\n                            {message.category.charAt(0).toUpperCase() + message.category.slice(1)}\n                          </Badge>\n                        )}\n                        <p className=\"text-sm whitespace-pre-line\">{message.content}</p>\n                        <span className=\"text-xs opacity-50 mt-1\">\n                          {message.timestamp.toLocaleTimeString([], {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })}\n                        </span>\n                      </div>\n                      {message.type === \"user\" && (\n                        <Avatar className=\"h-8 w-8 border bg-background\">\n                          <User className=\"h-4 w-4\" />\n                        </Avatar>\n                      )}\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"flex items-center gap-3 rounded-lg px-4 py-2 bg-muted\">\n                      <Avatar className=\"h-8 w-8 border bg-background\">\n                        <Bot className=\"h-4 w-4\" />\n                      </Avatar>\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n          </CardContent>\n          \n          {/* Suggestion chips */}\n          {messages.length <= 3 && (\n            <div className=\"px-4 py-2\">\n              <div className=\"flex flex-wrap gap-2\">\n                {initialSuggestions.map((suggestion, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-xs\"\n                    onClick={() => useSuggestion(suggestion)}\n                  >\n                    {suggestion}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          <CardFooter className=\"pt-2 pb-4\">\n            <div className=\"flex w-full items-center gap-2 border rounded-md pl-3 pr-1 py-1 focus-within:ring-1 focus-within:ring-primary\">\n              <Input\n                ref={inputRef}\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder=\"Ask about NCA ECC compliance...\"\n                className=\"border-0 focus-visible:ring-0 focus-visible:ring-offset-0 px-0\"\n                disabled={isLoading}\n              />\n              <TooltipProvider>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      type=\"button\"\n                      onClick={toggleVoiceInput}\n                      className={cn(\n                        \"shrink-0\",\n                        isListening ? \"text-red-500 animate-pulse\" : \"\"\n                      )}\n                    >\n                      {isListening ? <MicOff className=\"h-5 w-5\" /> : <Mic className=\"h-5 w-5\" />}\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>{isListening ? \"Stop\" : \"Start\"} voice input</p>\n                  </TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                type=\"submit\"\n                onClick={handleSendMessage}\n                disabled={!inputValue.trim() || isLoading}\n                className=\"shrink-0\"\n              >\n                <Send className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </CardFooter>\n        </TabsContent>\n        \n        <TabsContent value=\"assistant\" className=\"flex-1 flex flex-col items-center justify-center p-0 m-0\">\n          <div className=\"flex flex-col items-center justify-center space-y-4 p-4 text-center\">\n            {/* D-ID Agent iframe */}\n            <div className=\"w-full min-h-[400px] border rounded-lg overflow-hidden relative\">\n              {activeTab === 'assistant' && (\n                <iframe \n                  key={iframeKey}\n                  src={`/did-agent.html?t=${iframeKey}`}\n                  className=\"w-full h-[400px] border-none bg-black\"\n                  title=\"D-ID Virtual Agent\"\n                  id=\"did-agent-iframe\"\n                  allowFullScreen\n                  allow=\"camera *; microphone *; autoplay; clipboard-write\"\n                  style={{ opacity: didAgentLoaded ? 1 : 0.7 }}\n                />\n              )}\n              \n              {!didAgentLoaded && (\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center p-8 text-center bg-gradient-to-b from-blue-900/50 to-blue-900/70\">\n                  <Loader2 className=\"h-10 w-10 animate-spin text-primary mb-4\" />\n                  <p className=\"text-foreground max-w-md\">\n                    Loading D-ID agent... If it doesn't appear, please try refreshing.\n                  </p>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"max-w-sm mt-4\">\n              <h3 className=\"text-xl font-semibold\">Virtual Cybersecurity Consultant</h3>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                I can answer questions about NCA ECC controls, help you understand compliance requirements, and guide you through implementing essential cybersecurity measures.\n              </p>\n              \n              <div className=\"mt-4 flex space-x-4\">\n                <Button onClick={() => {\n                  setActiveTab(\"chat\");\n                  setTimeout(() => {\n                    inputRef.current?.focus();\n                  }, 100);\n                }}>\n                  Start Text Chat\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    // Show loading indicator\n                    setDidAgentLoaded(false);\n                    \n                    // Force iframe reload by updating the key\n                    setIframeKey(Date.now());\n                    \n                    // After 5 seconds, hide the loading overlay\n                    setTimeout(() => {\n                      setDidAgentLoaded(true);\n                    }, 5000);\n                  }}\n                >\n                  Refresh Agent\n                </Button>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </Card>\n  );\n}","size_bytes":20496},"client/src/pages/admin-dashboard/index.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport AdminSidebar from \"@/components/admin-dashboard/admin-sidebar\";\nimport AdminHeader from \"@/components/admin-dashboard/admin-header\";\nimport AdminOverview from \"@/components/admin-dashboard/admin-overview\";\nimport { isAdmin } from \"@/lib/clerk-roles\";\n\nexport default function AdminDashboard() {\n  const { user } = useClerkUser();\n\n  return (\n    <>\n      <Helmet>\n        <title>Admin Dashboard - MetaWorks</title>\n      </Helmet>\n      <div className=\"min-h-screen bg-background flex\">\n        {/* Sidebar */}\n        <AdminSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          <AdminHeader />\n          \n          <main className=\"flex-1 p-6 overflow-auto\">\n            <AdminOverview />\n          </main>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":943},"client/src/pages/frameworks/iso-27001-page.tsx":{"content":"import React from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, FileText, Download } from \"lucide-react\";\n\nexport default function Iso27001Page() {\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-primary\">ISO/IEC 27001 Information Security Standard</h1>\n        </div>\n\n        <div className=\"bg-card rounded-lg shadow-lg p-6 border border-border mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mr-4\">\n                <div className=\"text-xl font-bold text-primary\">ISO</div>\n              </div>\n              <h2 className=\"text-2xl font-semibold\">27001 Standard</h2>\n            </div>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Download className=\"h-4 w-4\" />\n              <span>Download Overview</span>\n            </Button>\n          </div>\n\n          <div className=\"prose prose-invert max-w-none mt-6\">\n            <p>\n              ISO/IEC 27001 is the internationally recognized standard for information security management systems (ISMS). It provides a systematic approach to managing sensitive information and ensuring its confidentiality, integrity, and availability. Organizations can become ISO 27001 certified to demonstrate their commitment to information security best practices.\n            </p>\n            \n            <h3 className=\"text-xl font-semibold mt-6\">Key Features</h3>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>Risk-based approach to information security management</li>\n              <li>Systematic framework covering all aspects of information security</li>\n              <li>Set of 114 controls across 14 domains (Annex A)</li>\n              <li>Plan-Do-Check-Act (PDCA) cycle for continuous improvement</li>\n              <li>Global recognition and acceptance as a security standard</li>\n            </ul>\n            \n            <h3 className=\"text-xl font-semibold mt-6\">How MetaWorks Helps</h3>\n            <p>\n              MetaWorks provides comprehensive ISO 27001 compliance support:\n            </p>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>Complete ISO 27001 gap analysis against all 114 controls</li>\n              <li>Risk assessment framework and methodology</li>\n              <li>Statement of Applicability (SoA) generator</li>\n              <li>Full suite of ISO 27001 policy templates</li>\n              <li>Implementation planning and task management</li>\n              <li>Internal audit support and documentation</li>\n              <li>Certification preparation guidance</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end\">\n          <Button className=\"flex items-center gap-2\" asChild>\n            <Link href=\"/dashboard\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Start ISO 27001 Assessment\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3590},"client/src/pages/frameworks/nca-ecc-assessment-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, FileText, CheckCircle2, AlertCircle, Shield, Server, RefreshCw, BarChart4 } from \"lucide-react\";\nimport NcaEccAssessmentForm from \"@/components/frameworks/nca-ecc/assessment-form\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\n// Domain selection card component\nconst DomainCard = ({ \n  domain, \n  status, \n  completionPercentage, \n  onClick \n}: { \n  domain: { id: number; name: string; icon: React.ReactNode }; \n  status: \"not-started\" | \"in-progress\" | \"completed\"; \n  completionPercentage: number;\n  onClick: () => void;\n}) => {\n  const statusColors = {\n    \"not-started\": \"bg-gray-500/10 text-gray-400\",\n    \"in-progress\": \"bg-amber-500/10 text-amber-500\",\n    \"completed\": \"bg-green-500/10 text-green-500\"\n  };\n  \n  const statusIcons = {\n    \"not-started\": <AlertCircle className=\"h-4 w-4 text-gray-400\" />,\n    \"in-progress\": <AlertCircle className=\"h-4 w-4 text-amber-500\" />,\n    \"completed\": <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n  };\n  \n  return (\n    <Card \n      className=\"cursor-pointer hover:border-primary/30 transition-colors\"\n      onClick={onClick}\n    >\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-md flex items-center gap-2\">\n          <div className=\"p-1.5 rounded-full bg-primary/10 text-primary\">\n            {domain.icon}\n          </div>\n          <span>Domain {domain.id}</span>\n          <div className={`ml-auto p-1 rounded-full ${statusColors[status]}`}>\n            {statusIcons[status]}\n          </div>\n        </CardTitle>\n        <CardDescription className=\"font-medium text-foreground\">\n          {domain.name}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-2 w-full bg-muted rounded overflow-hidden\">\n          <div \n            className={`h-full ${\n              status === \"completed\" ? \"bg-green-500\" : \"bg-amber-500\"\n            }`}\n            style={{ width: `${completionPercentage}%` }}\n          ></div>\n        </div>\n        <div className=\"text-xs text-muted-foreground mt-2\">\n          {status === \"not-started\" && \"Assessment not started\"}\n          {status === \"in-progress\" && `${completionPercentage}% complete`}\n          {status === \"completed\" && \"Assessment completed\"}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function NcaEccAssessmentPage() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedDomainId, setSelectedDomainId] = useState<number | null>(null);\n  \n  // Mock data for the domains\n  const domains = [\n    {\n      id: 1,\n      name: \"Cybersecurity Governance\",\n      icon: <Shield className=\"h-5 w-5\" />,\n      status: \"in-progress\" as const,\n      completionPercentage: 42\n    },\n    {\n      id: 2,\n      name: \"Cybersecurity Defense\",\n      icon: <Server className=\"h-5 w-5\" />,\n      status: \"not-started\" as const,\n      completionPercentage: 0\n    },\n    {\n      id: 3,\n      name: \"Cybersecurity Resilience\",\n      icon: <RefreshCw className=\"h-5 w-5\" />,\n      status: \"not-started\" as const,\n      completionPercentage: 0\n    },\n    {\n      id: 4,\n      name: \"Third-Party and Cloud Computing Cybersecurity\",\n      icon: <Server className=\"h-5 w-5\" />,\n      status: \"not-started\" as const,\n      completionPercentage: 0\n    },\n    {\n      id: 5,\n      name: \"Industrial Control Systems Cybersecurity\",\n      icon: <Server className=\"h-5 w-5\" />,\n      status: \"not-started\" as const,\n      completionPercentage: 0\n    }\n  ];\n  \n  // Overall assessment stats\n  const overallStats = {\n    totalControls: 114,\n    implementedControls: 12,\n    partiallyImplementedControls: 24,\n    notImplementedControls: 78,\n    notApplicableControls: 0,\n    overallScore: 21 // percentage\n  };\n  \n  // Handle domain selection\n  const handleDomainSelect = (domainId: number) => {\n    setSelectedDomainId(domainId);\n    setActiveTab(\"assessment\");\n  };\n  \n  // Handle back button from assessment form\n  const handleBackToOverview = () => {\n    setSelectedDomainId(null);\n    setActiveTab(\"overview\");\n  };\n  \n  return (\n    <>\n      <Helmet>\n        <title>NCA ECC Assessment | MetaWorks</title>\n      </Helmet>\n      <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center\">\n              <Link href=\"/frameworks/nca-ecc\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Framework\n                </Button>\n              </Link>\n              <h1 className=\"text-3xl font-bold text-primary\">NCA ECC Assessment</h1>\n            </div>\n          </div>\n          \n          <Tabs defaultValue=\"overview\" value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"overview\" disabled={selectedDomainId !== null}>Assessment Overview</TabsTrigger>\n              <TabsTrigger value=\"assessment\" disabled={selectedDomainId === null}>Domain Assessment</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                <CardHeader>\n                  <CardTitle>Assessment Progress</CardTitle>\n                  <CardDescription>\n                    Track your NCA ECC compliance across all domains\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-6\">\n                    <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"bg-card p-4 rounded-lg border border-border\">\n                        <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                        <div className=\"text-2xl font-bold mt-1\">{overallStats.overallScore}%</div>\n                        <div className=\"h-2 w-full bg-muted rounded overflow-hidden mt-2\">\n                          <div \n                            className=\"h-full bg-primary\"\n                            style={{ width: `${overallStats.overallScore}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-card p-4 rounded-lg border border-border\">\n                        <div className=\"text-sm text-muted-foreground\">Implemented</div>\n                        <div className=\"text-2xl font-bold mt-1 text-green-500\">\n                          {overallStats.implementedControls}\n                          <span className=\"text-sm font-normal text-muted-foreground ml-1\">\n                            /{overallStats.totalControls}\n                          </span>\n                        </div>\n                        <div className=\"h-2 w-full bg-muted rounded overflow-hidden mt-2\">\n                          <div \n                            className=\"h-full bg-green-500\"\n                            style={{ width: `${(overallStats.implementedControls / overallStats.totalControls) * 100}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-card p-4 rounded-lg border border-border\">\n                        <div className=\"text-sm text-muted-foreground\">Partially Implemented</div>\n                        <div className=\"text-2xl font-bold mt-1 text-amber-500\">\n                          {overallStats.partiallyImplementedControls}\n                          <span className=\"text-sm font-normal text-muted-foreground ml-1\">\n                            /{overallStats.totalControls}\n                          </span>\n                        </div>\n                        <div className=\"h-2 w-full bg-muted rounded overflow-hidden mt-2\">\n                          <div \n                            className=\"h-full bg-amber-500\"\n                            style={{ width: `${(overallStats.partiallyImplementedControls / overallStats.totalControls) * 100}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-card p-4 rounded-lg border border-border\">\n                        <div className=\"text-sm text-muted-foreground\">Not Implemented</div>\n                        <div className=\"text-2xl font-bold mt-1 text-red-500\">\n                          {overallStats.notImplementedControls}\n                          <span className=\"text-sm font-normal text-muted-foreground ml-1\">\n                            /{overallStats.totalControls}\n                          </span>\n                        </div>\n                        <div className=\"h-2 w-full bg-muted rounded overflow-hidden mt-2\">\n                          <div \n                            className=\"h-full bg-red-500\"\n                            style={{ width: `${(overallStats.notImplementedControls / overallStats.totalControls) * 100}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"text-lg font-semibold\">Domains</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Select a domain to begin or continue assessment\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {domains.map((domain) => (\n                        <DomainCard\n                          key={domain.id}\n                          domain={domain}\n                          status={domain.status}\n                          completionPercentage={domain.completionPercentage}\n                          onClick={() => handleDomainSelect(domain.id)}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart4 className=\"h-5 w-5 text-primary\" />\n                    Compliance Dashboard\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n                    <FileText className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n                    <h3 className=\"mt-4 text-lg font-medium\">Compliance Dashboard Coming Soon</h3>\n                    <p className=\"text-muted-foreground mt-2\">\n                      Complete domain assessments to generate detailed compliance insights and reports.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"assessment\">\n              {selectedDomainId === 1 && (\n                <>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"mb-4\"\n                    onClick={handleBackToOverview}\n                  >\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Back to Overview\n                  </Button>\n                  <NcaEccAssessmentForm />\n                </>\n              )}\n              {selectedDomainId && selectedDomainId !== 1 && (\n                <>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"mb-4\"\n                    onClick={handleBackToOverview}\n                  >\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Back to Overview\n                  </Button>\n                  <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10 p-12\">\n                    <div className=\"text-center\">\n                      <FileText className=\"h-12 w-12 mx-auto text-muted-foreground opacity-50\" />\n                      <h3 className=\"mt-4 text-lg font-medium\">Domain {selectedDomainId} Assessment Coming Soon</h3>\n                      <p className=\"text-muted-foreground mt-2\">\n                        Assessment for this domain is currently under development.\n                      </p>\n                      <p className=\"text-muted-foreground\">\n                        Please try Domain 1: Cybersecurity Governance for a demonstration of the assessment process.\n                      </p>\n                    </div>\n                  </Card>\n                </>\n              )}\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":13517},"client/src/pages/frameworks/nca-ecc-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  ArrowLeft, \n  FileText, \n  Download, \n  Shield, \n  Server, \n  RefreshCw, \n  Globe, \n  Cpu, \n  ChevronDown, \n  ChevronRight,\n  Check,\n  Info\n} from \"lucide-react\";\nimport { \n  Accordion, \n  AccordionContent, \n  AccordionItem, \n  AccordionTrigger \n} from \"@/components/ui/accordion\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Helmet } from \"react-helmet-async\";\n\n// The structured data for the ECC domains and subdomains\nconst eccDomains = [\n  {\n    id: 1,\n    name: \"Cybersecurity Governance\",\n    icon: <Shield className=\"h-5 w-5\" />,\n    description: \"Controls related to cybersecurity strategy, policies, organizational structure, and compliance.\",\n    subdomains: [\n      { id: \"1-1\", name: \"Cybersecurity Strategy\", controls: 5 },\n      { id: \"1-2\", name: \"Cybersecurity Management\", controls: 8 },\n      { id: \"1-3\", name: \"Cybersecurity Policies and Procedures\", controls: 9 },\n      { id: \"1-4\", name: \"Cybersecurity Roles and Responsibilities\", controls: 3 },\n      { id: \"1-5\", name: \"Cybersecurity Risk Management\", controls: 5 },\n      { id: \"1-6\", name: \"Cybersecurity Compliance\", controls: 3 },\n      { id: \"1-7\", name: \"Cybersecurity Awareness and Training\", controls: 4 }\n    ]\n  },\n  {\n    id: 2,\n    name: \"Cybersecurity Defense\",\n    icon: <Server className=\"h-5 w-5\" />,\n    description: \"Controls that focus on the protection of assets, identity management, access management, and cryptography.\",\n    subdomains: [\n      { id: \"2-1\", name: \"Asset Management\", controls: 6 },\n      { id: \"2-2\", name: \"Identity and Access Management\", controls: 10 },\n      { id: \"2-3\", name: \"Information Systems Security\", controls: 9 },\n      { id: \"2-4\", name: \"Email Security\", controls: 5 },\n      { id: \"2-5\", name: \"Network Security\", controls: 8 },\n      { id: \"2-6\", name: \"Cryptography\", controls: 5 },\n      { id: \"2-7\", name: \"Physical Security\", controls: 5 },\n      { id: \"2-8\", name: \"Third Party Services Management\", controls: 5 },\n      { id: \"2-9\", name: \"Data Protection\", controls: 7 },\n      { id: \"2-10\", name: \"Mobile Device Security\", controls: 3 },\n      { id: \"2-11\", name: \"Application Security\", controls: 7 }\n    ]\n  },\n  {\n    id: 3,\n    name: \"Cybersecurity Resilience\",\n    icon: <RefreshCw className=\"h-5 w-5\" />,\n    description: \"Controls that ensure business continuity, log management and monitoring, vulnerability management, penetration testing, incident response, and disaster recovery.\",\n    subdomains: [\n      { id: \"3-1\", name: \"Cybersecurity Event Logging and Monitoring\", controls: 6 },\n      { id: \"3-2\", name: \"Vulnerability Management\", controls: 4 },\n      { id: \"3-3\", name: \"Backup and Recovery\", controls: 5 },\n      { id: \"3-4\", name: \"Penetration Testing\", controls: 2 },\n      { id: \"3-5\", name: \"Cybersecurity Incident and Threat Management\", controls: 5 }\n    ]\n  },\n  {\n    id: 4,\n    name: \"Third-Party and Cloud Computing Cybersecurity\",\n    icon: <Globe className=\"h-5 w-5\" />,\n    description: \"Controls that manage cybersecurity risks associated with third-party services and cloud computing environments.\",\n    subdomains: [\n      { id: \"4-1\", name: \"Third-Party Service Management\", controls: 4 },\n      { id: \"4-2\", name: \"Cloud Computing and Hosting Cybersecurity\", controls: 6 }\n    ]\n  },\n  {\n    id: 5,\n    name: \"Industrial Control Systems Cybersecurity\",\n    icon: <Cpu className=\"h-5 w-5\" />,\n    description: \"Controls that ensure the security of industrial control systems (ICS), SCADA, and operational technology (OT) environments.\",\n    subdomains: [\n      { id: \"5-1\", name: \"Industrial Control Systems Security\", controls: 5 }\n    ]\n  }\n];\n\nexport default function NcaEccPage() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  \n  return (\n    <>\n      <Helmet>\n        <title>NCA ECC Framework | MetaWorks</title>\n      </Helmet>\n      <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-8 gap-4\">\n            <div className=\"flex items-center\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <h1 className=\"text-3xl font-bold text-primary\">NCA Essential Cybersecurity Controls</h1>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Badge className=\"bg-amber-600 hover:bg-amber-700\">Version: ECC-1:2018</Badge>\n              <Button variant=\"outline\" className=\"flex items-center gap-2\">\n                <Download className=\"h-4 w-4\" />\n                Download PDF\n              </Button>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"overview\" value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"structure\">Framework Structure</TabsTrigger>\n              <TabsTrigger value=\"assessment\">Assessment</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Info className=\"h-5 w-5 text-primary\" />\n                    About the Framework\n                  </CardTitle>\n                  <CardDescription>\n                    Essential Cybersecurity Controls (ECC-1:2018)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"prose prose-invert max-w-none\">\n                  <p>\n                    The NCA Essential Cybersecurity Controls (ECC) framework is a comprehensive set of cybersecurity controls \n                    issued by the National Cybersecurity Authority of Saudi Arabia. It aims to establish minimum cybersecurity \n                    requirements for organizations to protect their information and technology assets from common cybersecurity threats.\n                  </p>\n                  \n                  <h3 className=\"text-xl font-semibold mt-6\">Framework Objectives</h3>\n                  <p>The main objectives of the ECC framework are to:</p>\n                  <ul className=\"list-disc pl-5 space-y-2\">\n                    <li>Set minimum cybersecurity requirements for information and technology assets</li>\n                    <li>Help organizations minimize cybersecurity risks from internal and external threats</li>\n                    <li>Focus on three key security principles: Confidentiality, Integrity, and Availability</li>\n                    <li>Address four main cybersecurity pillars: Strategy, People, Processes, and Technology</li>\n                  </ul>\n                  \n                  <h3 className=\"text-xl font-semibold mt-6\">Applicability</h3>\n                  <p>\n                    The ECC framework is applicable to:\n                  </p>\n                  <ul className=\"list-disc pl-5 space-y-2\">\n                    <li>Government organizations in Saudi Arabia (ministries, authorities, establishments)</li>\n                    <li>Companies and entities owned by government organizations</li>\n                    <li>Private sector organizations owning, operating or hosting Critical National Infrastructures (CNIs)</li>\n                    <li>Other organizations are strongly encouraged to leverage these controls as best practices</li>\n                  </ul>\n                  \n                  <h3 className=\"text-xl font-semibold mt-6\">Implementation Approach</h3>\n                  <p>\n                    MetaWorks provides a structured approach to implementing the NCA ECC framework:\n                  </p>\n                  <ul className=\"list-disc pl-5 space-y-2\">\n                    <li>Comprehensive gap analysis against all 114 ECC controls</li>\n                    <li>Risk-based prioritization of control implementation</li>\n                    <li>Development of customized policies and procedures</li>\n                    <li>Implementation roadmap with clear milestones</li>\n                    <li>Compliance monitoring and continuous improvement</li>\n                  </ul>\n                </CardContent>\n              </Card>\n                \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                  <CardHeader>\n                    <CardTitle>Key Features</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-green-500/20 p-1\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                        </div>\n                        <div>\n                          <strong>Comprehensive Coverage:</strong> 5 main domains, 29 subdomains, and 114 essential controls\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-green-500/20 p-1\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                        </div>\n                        <div>\n                          <strong>Risk-Based Approach:</strong> Controls designed to address the most common and impactful cybersecurity risks\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-green-500/20 p-1\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                        </div>\n                        <div>\n                          <strong>Alignment:</strong> Compatible with international standards and frameworks\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-green-500/20 p-1\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                        </div>\n                        <div>\n                          <strong>Flexible Implementation:</strong> Controls can be tailored to organization size and complexity\n                        </div>\n                      </li>\n                    </ul>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                  <CardHeader>\n                    <CardTitle>How MetaWorks Helps</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-primary/20 p-1\">\n                          <Check className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <strong>Automated Assessment:</strong> Comprehensive evaluation of your organization's compliance status\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-primary/20 p-1\">\n                          <Check className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <strong>Gap Analysis:</strong> Detailed reporting on control gaps with prioritized remediation guidance\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-primary/20 p-1\">\n                          <Check className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <strong>Policy Generation:</strong> AI-assisted creation of policies aligned with ECC requirements\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-primary/20 p-1\">\n                          <Check className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <strong>Remediation Tracking:</strong> Task management system for tracking compliance progress\n                        </div>\n                      </li>\n                      <li className=\"flex items-start gap-3\">\n                        <div className=\"mt-1 rounded-full bg-primary/20 p-1\">\n                          <Check className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <strong>Virtual Consultant:</strong> AI-powered guidance on implementing specific controls\n                        </div>\n                      </li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"structure\" className=\"space-y-6\">\n              <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Info className=\"h-5 w-5 text-primary\" />\n                    Framework Structure\n                  </CardTitle>\n                  <CardDescription>\n                    The ECC framework consists of 5 main domains, 29 subdomains, and 114 essential controls\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                    {eccDomains.map((domain) => (\n                      <Card key={domain.id} className=\"bg-card/50 border-primary/10\">\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-md flex items-center gap-2\">\n                            <div className=\"p-1.5 rounded-full bg-primary/10 text-primary\">\n                              {domain.icon}\n                            </div>\n                            <span>Domain {domain.id}:</span>\n                          </CardTitle>\n                          <CardDescription className=\"font-medium text-foreground\">\n                            {domain.name}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"text-sm text-muted-foreground\">\n                          <p className=\"mb-2\">{domain.description}</p>\n                          <p className=\"text-xs\">\n                            <span className=\"font-semibold\">{domain.subdomains.length}</span> subdomains, \n                            <span className=\"font-semibold ml-1\">\n                              {domain.subdomains.reduce((acc, subdomain) => acc + subdomain.controls, 0)}\n                            </span> controls\n                          </p>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                  \n                  <Accordion type=\"single\" collapsible className=\"w-full\">\n                    {eccDomains.map((domain) => (\n                      <AccordionItem key={domain.id} value={`domain-${domain.id}`} className=\"border border-primary/10 rounded-lg mb-4 overflow-hidden\">\n                        <AccordionTrigger className=\"px-4 py-3 hover:bg-muted/50\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"p-1.5 rounded-full bg-primary/10 text-primary\">\n                              {domain.icon}\n                            </div>\n                            <div className=\"text-left\">\n                              <div className=\"font-semibold\">Domain {domain.id}: {domain.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {domain.subdomains.length} subdomains, {domain.subdomains.reduce((acc, subdomain) => acc + subdomain.controls, 0)} controls\n                              </div>\n                            </div>\n                          </div>\n                        </AccordionTrigger>\n                        <AccordionContent>\n                          <div className=\"px-4 py-2 bg-muted/30\">\n                            <div className=\"font-medium mb-2\">Subdomains:</div>\n                            <div className=\"space-y-1\">\n                              {domain.subdomains.map((subdomain) => (\n                                <div key={subdomain.id} className=\"flex items-center justify-between py-2 px-3 bg-background/50 rounded border border-border/50\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n                                    <span>\n                                      <span className=\"font-medium\">{subdomain.id}:</span> {subdomain.name}\n                                    </span>\n                                  </div>\n                                  <Badge variant=\"outline\" className=\"ml-2\">\n                                    {subdomain.controls} controls\n                                  </Badge>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </AccordionContent>\n                      </AccordionItem>\n                    ))}\n                  </Accordion>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"assessment\" className=\"space-y-6\">\n              <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Info className=\"h-5 w-5 text-primary\" />\n                    Assessment Process\n                  </CardTitle>\n                  <CardDescription>\n                    How MetaWorks helps you assess and achieve compliance with the ECC framework\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"prose prose-invert max-w-none\">\n                  <p>\n                    MetaWorks provides a comprehensive assessment methodology for the NCA ECC framework. \n                    Our assessment process follows these key steps:\n                  </p>\n                  \n                  <ol className=\"list-decimal pl-5 space-y-4\">\n                    <li>\n                      <strong>Initial Assessment:</strong> Evaluate your current security posture against all 114 ECC controls\n                    </li>\n                    <li>\n                      <strong>Gap Analysis:</strong> Identify areas of non-compliance with detailed explanation of control requirements\n                    </li>\n                    <li>\n                      <strong>Risk Rating:</strong> Prioritize gaps based on risk level and implementation complexity\n                    </li>\n                    <li>\n                      <strong>Remediation Planning:</strong> Develop a customized roadmap for addressing compliance gaps\n                    </li>\n                    <li>\n                      <strong>Implementation Support:</strong> Provide guidance and resources for implementing required controls\n                    </li>\n                    <li>\n                      <strong>Evidence Collection:</strong> Gather and organize compliance evidence for each control\n                    </li>\n                    <li>\n                      <strong>Compliance Verification:</strong> Validate the effectiveness of implemented controls\n                    </li>\n                    <li>\n                      <strong>Continuous Monitoring:</strong> Establish processes for ongoing compliance maintenance\n                    </li>\n                  </ol>\n                  \n                  <div className=\"bg-primary/5 p-4 rounded-lg border border-primary/10 mt-6\">\n                    <h3 className=\"text-xl font-semibold mb-2\">Ready to Start Your Assessment?</h3>\n                    <p>\n                      Begin your NCA ECC compliance journey with our automated assessment tool. \n                      Our platform will guide you through each step of the process and provide \n                      actionable insights to improve your cybersecurity posture.\n                    </p>\n                    <div className=\"flex justify-center mt-4\">\n                      <Button size=\"lg\" className=\"gap-2\" asChild>\n                        <Link href=\"/frameworks/nca-ecc-assessment\">\n                          <FileText className=\"h-5 w-5\" />\n                          Start ECC Assessment\n                        </Link>\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n          \n          <div className=\"flex justify-between mt-8\">\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Home\n              </Link>\n            </Button>\n            <Button className=\"flex items-center gap-2\" asChild>\n              <Link href=\"/frameworks/nca-ecc-assessment\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Start ECC Assessment\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":22568},"client/src/pages/frameworks/pdpl-page.tsx":{"content":"import React from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, FileText, Download } from \"lucide-react\";\n\nexport default function PdplPage() {\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-primary\">Personal Data Protection Law (PDPL)</h1>\n        </div>\n\n        <div className=\"bg-card rounded-lg shadow-lg p-6 border border-border mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mr-4\">\n                <div className=\"text-xl font-bold text-primary\">PDPL</div>\n              </div>\n              <h2 className=\"text-2xl font-semibold\">Data Protection Law</h2>\n            </div>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Download className=\"h-4 w-4\" />\n              <span>Download Framework</span>\n            </Button>\n          </div>\n\n          <div className=\"prose prose-invert max-w-none mt-6\">\n            <p>\n              The Personal Data Protection Law (PDPL) is Saudi Arabia's comprehensive data protection framework that regulates the collection, processing, disclosure, and transfer of personal data. The law aims to protect individuals' privacy rights and ensure proper handling of personal information by organizations operating in Saudi Arabia.\n            </p>\n            \n            <h3 className=\"text-xl font-semibold mt-6\">Key Features</h3>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>Strict requirements for obtaining explicit consent before collecting personal data</li>\n              <li>Data subject rights including access, correction, deletion, and objection to processing</li>\n              <li>Limitations on cross-border data transfers</li>\n              <li>Mandatory data breach notification requirements</li>\n              <li>Heavy penalties for non-compliance, including fines and business restrictions</li>\n            </ul>\n            \n            <h3 className=\"text-xl font-semibold mt-6\">How MetaWorks Helps</h3>\n            <p>\n              MetaWorks simplifies PDPL compliance with specialized features:\n            </p>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>Data mapping tools to identify and categorize personal data in your systems</li>\n              <li>Automated gap analysis against all PDPL requirements</li>\n              <li>Customizable privacy policy and consent form templates</li>\n              <li>Data subject request management workflow</li>\n              <li>Data breach response planning and notification system</li>\n              <li>Cross-border transfer compliance assessment</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end\">\n          <Button className=\"flex items-center gap-2\" asChild>\n            <Link href=\"/dashboard\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Start PDPL Assessment\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3608},"client/src/pages/frameworks/sama-page.tsx":{"content":"import React from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, FileText, Download } from \"lucide-react\";\n\nexport default function SamaPage() {\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-primary\">SAMA Cyber Security Framework</h1>\n        </div>\n\n        <div className=\"bg-card rounded-lg shadow-lg p-6 border border-border mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center backdrop-blur-sm border border-primary/20 mr-4\">\n                <div className=\"text-xl font-bold text-primary\">SAMA</div>\n              </div>\n              <h2 className=\"text-2xl font-semibold\">Cyber Security Framework</h2>\n            </div>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Download className=\"h-4 w-4\" />\n              <span>Download Framework</span>\n            </Button>\n          </div>\n\n          <div className=\"prose prose-invert max-w-none mt-6\">\n            <p>\n              The Saudi Arabian Monetary Authority (SAMA) Cyber Security Framework provides a method for financial institutions to assess their cybersecurity maturity and capabilities. It outlines the minimum cyber security requirements for the financial sector in Saudi Arabia and provides guidance to identify and address cyber security risks.\n            </p>\n            \n            <h3 className=\"text-xl font-semibold mt-6\">Key Features</h3>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>Comprehensive coverage of cybersecurity domains including governance, risk management, compliance, operations, and technology</li>\n              <li>Maturity-based approach to assess and enhance cybersecurity capabilities</li>\n              <li>Alignment with international standards like NIST, ISO 27001, and PCI DSS</li>\n              <li>Regulatory compliance requirement for financial institutions in Saudi Arabia</li>\n            </ul>\n            \n            <h3 className=\"text-xl font-semibold mt-6\">How MetaWorks Helps</h3>\n            <p>\n              MetaWorks streamlines SAMA compliance with tailored features for financial institutions:\n            </p>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>Comprehensive assessment of your organization against SAMA requirements</li>\n              <li>Automated maturity level calculation across all domains</li>\n              <li>Policy templates specifically designed for SAMA compliance</li>\n              <li>Continuous monitoring of compliance status</li>\n              <li>Detailed reporting for regulatory submissions</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end\">\n          <Button className=\"flex items-center gap-2\" asChild>\n            <Link href=\"/dashboard\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Start SAMA Assessment\n            </Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3549},"client/src/pages/user-dashboard/index.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useClerkUser } from \"@/components/clerk/clerk-auth\";\nimport UserSidebar from \"@/components/user-dashboard/user-sidebar\";\nimport UserHeader from \"@/components/user-dashboard/user-header\";\nimport UserOverview from \"@/components/user-dashboard/user-overview\";\n\nexport default function UserDashboard() {\n  const { user } = useClerkUser();\n  const organizationName = \"Your Organization\"; // This would come from your database\n\n  return (\n    <>\n      <Helmet>\n        <title>Compliance Dashboard - MetaWorks</title>\n      </Helmet>\n      <div className=\"min-h-screen bg-background flex\">\n        {/* Sidebar */}\n        <UserSidebar />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          <UserHeader organizationName={organizationName} />\n          \n          <main className=\"flex-1 p-6 overflow-auto\">\n            <UserOverview />\n          </main>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":1012},"client/src/components/frameworks/nca-ecc/assessment-form.tsx":{"content":"import React, { useState } from \"react\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle2, AlertCircle, HelpCircle, ChevronLeft, ChevronRight, Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Define the schema for a single control assessment\nconst controlAssessmentSchema = z.object({\n  controlId: z.string(),\n  status: z.enum([\"implemented\", \"partially-implemented\", \"not-implemented\", \"not-applicable\"]),\n  evidence: z.string().optional(),\n  notes: z.string().optional(),\n});\n\n// Define the schema for the entire assessment form\nconst assessmentFormSchema = z.object({\n  companyId: z.number(),\n  frameworkId: z.number(),\n  domainId: z.number(),\n  controls: z.array(controlAssessmentSchema),\n});\n\ntype ControlAssessment = z.infer<typeof controlAssessmentSchema>;\ntype AssessmentFormValues = z.infer<typeof assessmentFormSchema>;\n\n// Mock data for the ECC Domain 1 controls\nconst domain1Controls = [\n  {\n    id: \"1-1-1\",\n    name: \"Cybersecurity Strategy Development\",\n    description: \"The organization must develop a cybersecurity strategy approved by the head of the organization, and it must be aligned with the organization's business strategy.\",\n    requirement: \"The organization's cybersecurity strategy must include the following at minimum: cybersecurity vision, mission, strategic goals, and strategic initiatives.\"\n  },\n  {\n    id: \"1-1-2\",\n    name: \"Cybersecurity Strategy Implementation\",\n    description: \"The organization must develop and implement an operational plan for the cybersecurity strategy.\",\n    requirement: \"The operational plan must include projects, timelines, KPIs, and responsible stakeholders for implementing the strategy.\"\n  },\n  {\n    id: \"1-1-3\",\n    name: \"Cybersecurity Strategy Review\",\n    description: \"The organization must review the cybersecurity strategy annually or when significant changes occur in the business or threat landscape.\",\n    requirement: \"Document any revisions and maintain records of strategy reviews and approvals.\"\n  },\n  {\n    id: \"1-2-1\",\n    name: \"Cybersecurity Governance Structure\",\n    description: \"The organization must establish a governance structure for cybersecurity that defines clear roles and responsibilities.\",\n    requirement: \"This structure must include executive leadership involvement and reporting lines for cybersecurity functions.\"\n  },\n  {\n    id: \"1-2-2\",\n    name: \"Cybersecurity Risk Management\",\n    description: \"The organization must implement a cybersecurity risk management process.\",\n    requirement: \"This process must include risk identification, assessment, treatment, and regular monitoring and reporting.\"\n  }\n];\n\n// Status options with icons and colors\nconst statusOptions = [\n  { \n    value: \"implemented\", \n    label: \"Implemented\", \n    icon: <CheckCircle2 className=\"h-4 w-4 text-green-500\" />,\n    description: \"The control is fully implemented and operating effectively\",\n    color: \"bg-green-500/10 text-green-500 border-green-500/20\"\n  },\n  { \n    value: \"partially-implemented\", \n    label: \"Partially Implemented\", \n    icon: <HelpCircle className=\"h-4 w-4 text-amber-500\" />,\n    description: \"The control is partially implemented or not fully effective\",\n    color: \"bg-amber-500/10 text-amber-500 border-amber-500/20\"\n  },\n  { \n    value: \"not-implemented\", \n    label: \"Not Implemented\", \n    icon: <AlertCircle className=\"h-4 w-4 text-red-500\" />,\n    description: \"The control is not implemented\",\n    color: \"bg-red-500/10 text-red-500 border-red-500/20\"\n  },\n  { \n    value: \"not-applicable\", \n    label: \"Not Applicable\", \n    icon: <HelpCircle className=\"h-4 w-4 text-gray-400\" />,\n    description: \"The control is not applicable to your organization\",\n    color: \"bg-gray-500/10 text-gray-400 border-gray-400/20\"\n  }\n];\n\nexport default function NcaEccAssessmentForm() {\n  const [activeControlIndex, setActiveControlIndex] = useState(0);\n  const { toast } = useToast();\n  \n  // Initialize form with default values\n  const form = useForm<AssessmentFormValues>({\n    resolver: zodResolver(assessmentFormSchema),\n    defaultValues: {\n      companyId: 1, // This would come from the current company context\n      frameworkId: 1, // This is for NCA ECC\n      domainId: 1, // Starting with Domain 1\n      controls: domain1Controls.map(control => ({\n        controlId: control.id,\n        status: \"not-implemented\" as const,\n        evidence: \"\",\n        notes: \"\"\n      }))\n    }\n  });\n\n  // Calculate progress\n  const completedControls = form.watch(\"controls\").filter(\n    control => control.status !== \"not-implemented\"\n  ).length;\n  \n  const progressPercentage = Math.round((completedControls / domain1Controls.length) * 100);\n\n  // Handle form submission\n  const onSubmit = async (data: AssessmentFormValues) => {\n    console.log(\"Assessment data:\", data);\n    \n    try {\n      // Send assessment data to the server\n      const response = await fetch('/api/assessment-results', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          assessmentId: 1, // This would normally come from the current assessment context\n          results: data.controls.map(control => ({\n            controlId: parseInt(control.controlId.split('-').pop() || '1'),\n            status: control.status === 'partially-implemented' ? 'partially_implemented' : control.status,\n            evidence: control.evidence || null,\n            comments: control.notes || null,\n            updatedBy: 1 // This would normally come from the current user context\n          }))\n        }),\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Assessment Saved\",\n          description: \"Your domain assessment has been saved successfully.\",\n        });\n      } else {\n        const errorText = await response.text();\n        throw new Error(errorText || 'Failed to save assessment');\n      }\n    } catch (error) {\n      console.error('Error saving assessment:', error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to save assessment\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Navigation functions\n  const goToNextControl = () => {\n    if (activeControlIndex < domain1Controls.length - 1) {\n      setActiveControlIndex(activeControlIndex + 1);\n    }\n  };\n\n  const goToPreviousControl = () => {\n    if (activeControlIndex > 0) {\n      setActiveControlIndex(activeControlIndex - 1);\n    }\n  };\n\n  // Get the active control\n  const activeControl = domain1Controls[activeControlIndex];\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <Card className=\"backdrop-blur-sm bg-card/50 border-primary/10\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-xl\">Domain 1: Cybersecurity Governance</CardTitle>\n                <CardDescription>\n                  Assessment for Essential Cybersecurity Controls (ECC-1:2018)\n                </CardDescription>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm font-medium\">\n                  Progress: {completedControls} of {domain1Controls.length} controls\n                </div>\n                <Progress value={progressPercentage} className=\"h-2 w-[200px] mt-2\" />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Control navigation indicator */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <span className=\"text-sm font-medium\">\n                  Control {activeControlIndex + 1} of {domain1Controls.length}\n                </span>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={goToPreviousControl}\n                  disabled={activeControlIndex === 0}\n                >\n                  <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                  Previous\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={goToNextControl}\n                  disabled={activeControlIndex === domain1Controls.length - 1}\n                >\n                  Next\n                  <ChevronRight className=\"h-4 w-4 ml-1\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"p-4 border rounded-lg backdrop-blur-sm bg-card/30\">\n              <div className=\"mb-4\">\n                <div className=\"font-semibold text-lg\">{activeControl.id}: {activeControl.name}</div>\n                <p className=\"text-muted-foreground mt-1\">{activeControl.description}</p>\n              </div>\n              \n              <div className=\"bg-primary/5 p-3 rounded border border-primary/10 mb-4\">\n                <div className=\"font-medium mb-1\">Requirement:</div>\n                <p className=\"text-sm\">{activeControl.requirement}</p>\n              </div>\n\n              <FormField\n                control={form.control}\n                name={`controls.${activeControlIndex}.status`}\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel>Implementation Status</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"space-y-2\"\n                      >\n                        {statusOptions.map(option => (\n                          <div\n                            key={option.value}\n                            className={`flex items-center space-x-2 p-3 rounded-md border ${\n                              field.value === option.value ? option.color : \"border-border\"\n                            } transition-colors`}\n                          >\n                            <RadioGroupItem value={option.value} id={`status-${option.value}`} />\n                            <label\n                              htmlFor={`status-${option.value}`}\n                              className=\"flex flex-1 items-center space-x-2 cursor-pointer\"\n                            >\n                              {option.icon}\n                              <span className=\"font-medium\">{option.label}</span>\n                              <span className=\"text-xs text-muted-foreground\">\n                                - {option.description}\n                              </span>\n                            </label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"mt-4 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name={`controls.${activeControlIndex}.evidence`}\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Evidence</FormLabel>\n                      <FormDescription>\n                        Provide evidence of how this control is implemented in your organization.\n                      </FormDescription>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe the evidence that demonstrates implementation of this control...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name={`controls.${activeControlIndex}.notes`}\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormDescription>\n                        Add any additional notes or context about this control.\n                      </FormDescription>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Add any notes, challenges, or plans related to this control...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button variant=\"outline\" type=\"button\" onClick={() => form.reset()}>\n              Reset\n            </Button>\n            <Button type=\"submit\" className=\"gap-2\">\n              <Save className=\"h-4 w-4\" />\n              Save Assessment\n            </Button>\n          </CardFooter>\n        </Card>\n      </form>\n    </Form>\n  );\n}","size_bytes":14044},"client/src/components/landing/about-section.tsx":{"content":"import React from \"react\";\nimport { Award, MapPin, Rocket, Users, Shield, Heart, Target, Zap, Globe } from \"lucide-react\";\nimport mcitLogo from \"@assets/Hnet.com-image_7.original_1759845224098.png\";\nimport miskLogo from \"@assets/MiSK_Foundation_Logo.svg_1759845282340.png\";\n\nconst achievements = [\n  {\n    icon: Award,\n    title: \"Misk Launchpad 7 Graduate\",\n    description: \"Successfully graduated from Misk Launchpad's 7th cohort, accelerating our growth in Saudi Arabia's startup ecosystem\"\n  },\n  {\n    icon: Rocket,\n    title: \"Tech Champions 5\",\n    description: \"Proud participant of Tech Champions 5 program, showcasing innovation in cybersecurity compliance solutions\"\n  },\n  {\n    icon: Heart,\n    title: \"MCIT Support\",\n    description: \"Supported by the Ministry of Communication and Information Technology, advancing digital transformation in the Kingdom\"\n  },\n  {\n    icon: Award,\n    title: \"Code Tech Champions 5\",\n    description: \"Recognized by Code Tech Champions 5 for our technical excellence and innovation in compliance automation\"\n  }\n];\n\nconst values = [\n  {\n    icon: Shield,\n    title: \"Security First\",\n    description: \"We prioritize the security and privacy of your data in everything we build with enterprise-grade encryption and compliance\"\n  },\n  {\n    icon: Target,\n    title: \"Customer Success\",\n    description: \"Your compliance journey is our priority. We provide dedicated support and guidance every step of the way\"\n  },\n  {\n    icon: Zap,\n    title: \"Innovation\",\n    description: \"Continuously evolving our platform with cutting-edge AI, automation, and emerging technologies\"\n  },\n  {\n    icon: Globe,\n    title: \"Regional Expertise\",\n    description: \"Deep understanding of Middle East regulations and compliance frameworks, built for the region\"\n  }\n];\n\nexport default function AboutSection() {\n  return (\n    <section id=\"about\" className=\"py-20 bg-background/90 relative\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-emerald-400 bg-clip-text text-transparent\">\n            About MetaWorks\n          </h2>\n          <div className=\"flex items-center justify-center gap-2 text-gray-300 mb-6\">\n            <MapPin className=\"w-5 h-5 text-primary\" />\n            <p className=\"text-xl\">Proudly Born and Raised in Saudi Arabia</p>\n          </div>\n          <p className=\"text-lg text-gray-400 max-w-3xl mx-auto\">\n            Leading the future of cybersecurity compliance in the Middle East with AI-powered innovation\n          </p>\n        </div>\n\n        {/* Partner Logos */}\n        <div className=\"mb-16\">\n          <p className=\"text-center text-gray-400 mb-8 text-sm uppercase tracking-wider\">Supported By</p>\n          <div className=\"flex flex-wrap items-center justify-center gap-12 md:gap-16\">\n            <div className=\"backdrop-blur-sm bg-white/5 border border-primary/10 rounded-xl p-6 hover:border-primary/30 transition-all duration-300\">\n              <img \n                src={mcitLogo} \n                alt=\"Ministry of Communication and Information Technology\" \n                className=\"h-24 md:h-32 w-auto object-contain\"\n                data-testid=\"img-mcit-logo\"\n              />\n            </div>\n            <div className=\"backdrop-blur-sm bg-white/5 border border-primary/10 rounded-xl p-6 hover:border-primary/30 transition-all duration-300\">\n              <img \n                src={miskLogo} \n                alt=\"MiSK Foundation\" \n                className=\"h-16 md:h-20 w-auto object-contain\"\n                data-testid=\"img-misk-logo\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Story Section */}\n        <div className=\"backdrop-blur-sm bg-gradient-to-br from-primary/10 to-emerald-400/10 border border-primary/20 rounded-2xl p-8 md:p-12 mb-16 shadow-xl\">\n          <h3 className=\"text-2xl md:text-3xl font-bold mb-6 text-center text-white\">Our Story</h3>\n          <div className=\"max-w-4xl mx-auto space-y-5 text-gray-200 text-lg leading-relaxed\">\n            <p>\n              <strong className=\"text-primary\">MetaWorks</strong> is a pioneering cybersecurity compliance platform proudly born and raised in the Kingdom of Saudi Arabia. \n              We are dedicated to revolutionizing how organizations approach cybersecurity compliance across the region and beyond.\n            </p>\n            <p>\n              Our mission is to empower businesses to achieve and maintain compliance with critical regulatory frameworks \n              including <strong className=\"text-white\">NCA ECC, SAMA CSF, PDPL, and ISO 27001</strong> through innovative AI-powered automation and intelligent workflows. \n              We believe compliance should be an enabler of trust, security, and sustainable growth—not a burden.\n            </p>\n            <p>\n              With the prestigious support of <strong className=\"text-white\">Misk Launchpad 7</strong>, <strong className=\"text-white\">Tech Champions 5</strong>, \n              and the <strong className=\"text-white\">Ministry of Communication and Information Technology (MCIT)</strong>, we've developed a world-class \n              platform that combines cutting-edge AI technology with deep regulatory expertise and regional insights.\n            </p>\n            <p className=\"text-primary font-semibold\">\n              Today, we're transforming compliance management for CTOs, CISOs, CIOs, Compliance Officers, Risk Officers, and IT Managers \n              with our agentic cybersecurity workforce solution.\n            </p>\n          </div>\n        </div>\n\n        {/* Achievements Grid */}\n        <div className=\"mb-16\">\n          <h3 className=\"text-2xl md:text-3xl font-bold mb-8 text-center text-white\">Recognition & Achievements</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {achievements.map((achievement, index) => (\n              <div \n                key={index}\n                className=\"backdrop-blur-sm bg-card/30 border border-primary/20 rounded-xl p-6 hover:border-primary/50 hover:shadow-lg hover:shadow-primary/10 transition-all duration-300\"\n                data-testid={`card-achievement-${index}`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-primary to-emerald-400 flex items-center justify-center flex-shrink-0 shadow-lg\">\n                    <achievement.icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2 text-white\">{achievement.title}</h4>\n                    <p className=\"text-gray-400 leading-relaxed\">{achievement.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Values Section */}\n        <div>\n          <h3 className=\"text-2xl md:text-3xl font-bold mb-8 text-center text-white\">Our Core Values</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {values.map((value, index) => (\n              <div \n                key={index}\n                className=\"backdrop-blur-sm bg-card/30 border border-primary/20 rounded-xl p-6 text-center hover:border-primary/50 hover:shadow-lg hover:shadow-primary/10 transition-all duration-300 group\"\n                data-testid={`card-value-${index}`}\n              >\n                <div className=\"w-14 h-14 rounded-xl bg-gradient-to-br from-primary to-emerald-400 flex items-center justify-center mx-auto mb-4 shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                  <value.icon className=\"w-7 h-7 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-3 text-white\">{value.title}</h4>\n                <p className=\"text-gray-400 text-sm leading-relaxed\">{value.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center mt-16\">\n          <div className=\"backdrop-blur-sm bg-gradient-to-br from-primary/5 to-emerald-400/5 border border-primary/20 rounded-2xl p-8 md:p-10\">\n            <p className=\"text-gray-300 mb-6 text-xl font-medium\">\n              Join leading organizations trusting MetaWorks for their cybersecurity compliance\n            </p>\n            <p className=\"text-gray-400 mb-8 text-base max-w-2xl mx-auto\">\n              Transform your compliance journey with our AI-powered platform designed for the modern enterprise\n            </p>\n            <a \n              href=\"/#contact\" \n              className=\"inline-block py-4 px-10 rounded-lg font-semibold text-center bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-primary/30\"\n              data-testid=\"button-get-in-touch\"\n            >\n              Get in Touch\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9203},"client/src/components/landing/contact-section.tsx":{"content":"import React, { useState } from \"react\";\nimport { Mail, MessageSquare, User, Send, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const validateEmail = (email: string) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!validateEmail(formData.email)) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(\"/api/contact\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        setIsSubmitted(true);\n        setFormData({ name: \"\", email: \"\", message: \"\" });\n        toast({\n          title: \"Message Sent!\",\n          description: \"Thank you for contacting us. We'll get back to you soon.\"\n        });\n      } else {\n        throw new Error(\"Failed to send message\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-background relative\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-emerald-400 bg-clip-text text-transparent\">\n            Contact Us\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Have questions? We'd love to hear from you. Send us a message and we'll respond as soon as possible.\n          </p>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          {isSubmitted ? (\n            <div className=\"backdrop-blur-sm bg-gradient-to-br from-primary/10 to-emerald-400/10 border border-primary/20 rounded-2xl p-12 text-center\">\n              <CheckCircle className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-2xl font-bold mb-2 text-white\">Thank You!</h3>\n              <p className=\"text-gray-300 mb-6\">\n                Your message has been sent successfully. We'll get back to you shortly.\n              </p>\n              <button\n                onClick={() => setIsSubmitted(false)}\n                className=\"py-2 px-6 rounded-lg font-medium bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg hover:shadow-xl transition-all\"\n              >\n                Send Another Message\n              </button>\n            </div>\n          ) : (\n            <div className=\"backdrop-blur-sm bg-card/30 border border-primary/20 rounded-2xl p-8 md:p-12\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Name Field */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"w-4 h-4\" />\n                      Name *\n                    </div>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white\"\n                    placeholder=\"Your name\"\n                  />\n                </div>\n\n                {/* Email Field */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"w-4 h-4\" />\n                      Email *\n                    </div>\n                  </label>\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    required\n                    className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white\"\n                    placeholder=\"your.email@example.com\"\n                  />\n                </div>\n\n                {/* Message Field */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <MessageSquare className=\"w-4 h-4\" />\n                      Message *\n                    </div>\n                  </label>\n                  <textarea\n                    name=\"message\"\n                    value={formData.message}\n                    onChange={handleChange}\n                    required\n                    rows={6}\n                    className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white resize-none\"\n                    placeholder=\"Tell us how we can help you...\"\n                  />\n                </div>\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full py-3 px-6 rounded-lg font-medium bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 flex items-center justify-center gap-2\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"w-5 h-5\" />\n                      Send Message\n                    </>\n                  )}\n                </button>\n              </form>\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7293},"client/src/components/landing/demo-section.tsx":{"content":"import React, { useState } from \"react\";\nimport { Calendar, Mail, User, Send, CheckCircle, Sparkles } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function DemoSection() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const validateEmail = (email: string) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!validateEmail(formData.email)) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(\"/api/book-demo\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        setIsSubmitted(true);\n        setFormData({ name: \"\", email: \"\", company: \"\", message: \"\" });\n        toast({\n          title: \"Demo Request Sent!\",\n          description: \"We'll contact you shortly to schedule your demo.\"\n        });\n      } else {\n        throw new Error(\"Failed to submit demo request\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit request. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section id=\"demo\" className=\"py-20 bg-gradient-to-br from-primary/5 to-emerald-400/5 relative\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-gradient-to-r from-primary/20 to-emerald-400/20 border border-primary/30 mb-4\">\n            <Sparkles className=\"w-4 h-4 text-primary\" />\n            <span className=\"text-sm font-semibold text-primary\">Limited Spots Available</span>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-emerald-400 bg-clip-text text-transparent\">\n            Book Your Free Demo\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            See how Meta Works can transform your compliance process. Get a personalized walkthrough of our platform.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          {/* Benefits List */}\n          <div className=\"space-y-6\">\n            <h3 className=\"text-2xl font-bold text-white mb-6\">What You'll Get:</h3>\n            {[\n              {\n                title: \"Personalized Demo\",\n                description: \"30-minute customized walkthrough tailored to your organization's needs\"\n              },\n              {\n                title: \"Expert Consultation\",\n                description: \"Direct access to our compliance experts to answer your questions\"\n              },\n              {\n                title: \"ROI Analysis\",\n                description: \"See how much time and money you can save with our automation\"\n              },\n              {\n                title: \"Free Trial Access\",\n                description: \"Get started immediately with a 14-day free trial\"\n              }\n            ].map((benefit, index) => (\n              <div key={index} className=\"flex items-start gap-4\">\n                <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-primary to-emerald-400 flex items-center justify-center flex-shrink-0\">\n                  <CheckCircle className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <h4 className=\"text-lg font-semibold text-white mb-1\">{benefit.title}</h4>\n                  <p className=\"text-gray-400\">{benefit.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Form */}\n          <div>\n            {isSubmitted ? (\n              <div className=\"backdrop-blur-sm bg-gradient-to-br from-primary/10 to-emerald-400/10 border border-primary/20 rounded-2xl p-12 text-center\">\n                <CheckCircle className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n                <h3 className=\"text-2xl font-bold mb-2 text-white\">Request Received!</h3>\n                <p className=\"text-gray-300 mb-6\">\n                  Thank you for your interest. Our team will contact you within 24 hours to schedule your demo.\n                </p>\n                <button\n                  onClick={() => setIsSubmitted(false)}\n                  className=\"py-2 px-6 rounded-lg font-medium bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg hover:shadow-xl transition-all\"\n                >\n                  Book Another Demo\n                </button>\n              </div>\n            ) : (\n              <div className=\"backdrop-blur-sm bg-card/30 border border-primary/20 rounded-2xl p-8\">\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  {/* Name Field */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"w-4 h-4\" />\n                        Full Name *\n                      </div>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleChange}\n                      required\n                      className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white\"\n                      placeholder=\"John Doe\"\n                    />\n                  </div>\n\n                  {/* Email Field */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Mail className=\"w-4 h-4\" />\n                        Work Email *\n                      </div>\n                    </label>\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      required\n                      className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white\"\n                      placeholder=\"john@company.com\"\n                    />\n                  </div>\n\n                  {/* Company Field */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"w-4 h-4\" />\n                        Company Name\n                      </div>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"company\"\n                      value={formData.company}\n                      onChange={handleChange}\n                      className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white\"\n                      placeholder=\"Your Company\"\n                    />\n                  </div>\n\n                  {/* Message Field */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Additional Information\n                    </label>\n                    <textarea\n                      name=\"message\"\n                      value={formData.message}\n                      onChange={handleChange}\n                      rows={3}\n                      className=\"w-full px-4 py-3 rounded-lg bg-background border border-gray-700 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-colors focus:outline-none text-white resize-none\"\n                      placeholder=\"Tell us about your compliance needs (optional)\"\n                    />\n                  </div>\n\n                  {/* Submit Button */}\n                  <button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full py-3 px-6 rounded-lg font-medium bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 flex items-center justify-center gap-2\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                        Submitting...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"w-5 h-5\" />\n                        Request Demo\n                      </>\n                    )}\n                  </button>\n                </form>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10142},"client/src/components/landing/pricing-section.tsx":{"content":"import React from \"react\";\nimport { Check, Sparkles } from \"lucide-react\";\n\nconst pricingPlans = [\n  {\n    name: \"Basic\",\n    price: \"Custom Pricing\",\n    description: \"Perfect for small organizations starting their compliance journey\",\n    features: [\n      \"Up to 50 users\",\n      \"NCA ECC Framework assessment\",\n      \"Basic risk assessment\",\n      \"Policy template library\",\n      \"Email support\",\n      \"Quarterly compliance reports\",\n      \"Document storage (10GB)\"\n    ],\n    cta: \"Get Started\",\n    popular: false\n  },\n  {\n    name: \"Standard\",\n    price: \"Custom Pricing\",\n    description: \"Ideal for growing organizations with advanced compliance needs\",\n    features: [\n      \"Up to 200 users\",\n      \"All frameworks (NCA ECC, SAMA, PDPL, ISO 27001)\",\n      \"Advanced risk management\",\n      \"AI-powered policy generation\",\n      \"Priority support (24/7)\",\n      \"Monthly compliance reports\",\n      \"Document storage (50GB)\",\n      \"Virtual compliance consultant\",\n      \"Integration with security tools\"\n    ],\n    cta: \"Get Started\",\n    popular: true\n  },\n  {\n    name: \"Premium\",\n    price: \"Custom Pricing\",\n    description: \"Enterprise-grade solution with dedicated support\",\n    features: [\n      \"Unlimited users\",\n      \"All Standard features\",\n      \"Dedicated account manager\",\n      \"Custom framework support\",\n      \"White-label reports\",\n      \"Advanced analytics & BI\",\n      \"Unlimited document storage\",\n      \"On-premise deployment option\",\n      \"Custom integrations\",\n      \"SLA guarantee (99.9% uptime)\"\n    ],\n    cta: \"Contact Sales\",\n    popular: false\n  }\n];\n\nexport default function PricingSection() {\n  return (\n    <section id=\"pricing\" className=\"py-20 bg-background relative\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-emerald-400 bg-clip-text text-transparent\">\n            Transparent Pricing\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Choose the perfect plan for your organization's compliance needs\n          </p>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n          {pricingPlans.map((plan, index) => (\n            <div \n              key={index}\n              className={`relative backdrop-blur-sm rounded-2xl p-8 transition-all duration-300 hover:scale-105 ${\n                plan.popular \n                  ? 'bg-gradient-to-br from-primary/20 to-emerald-400/20 border-2 border-primary shadow-xl shadow-primary/30' \n                  : 'bg-card/30 border border-primary/20 hover:border-primary/50'\n              }`}\n            >\n              {plan.popular && (\n                <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                  <span className=\"inline-flex items-center gap-1 px-4 py-1 rounded-full bg-gradient-to-r from-primary to-emerald-400 text-white text-sm font-semibold\">\n                    <Sparkles className=\"w-4 h-4\" />\n                    Most Popular\n                  </span>\n                </div>\n              )}\n              \n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-2xl font-bold mb-2 text-white\">{plan.name}</h3>\n                <div className=\"text-3xl font-bold text-primary mb-2\">{plan.price}</div>\n                <p className=\"text-gray-400\">{plan.description}</p>\n              </div>\n\n              <ul className=\"space-y-3 mb-8\">\n                {plan.features.map((feature, featureIndex) => (\n                  <li key={featureIndex} className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-primary flex-shrink-0 mr-3 mt-0.5\" />\n                    <span className=\"text-gray-300\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              <a\n                href=\"/#demo\"\n                className={`block w-full py-3 px-6 rounded-lg font-medium text-center transition-all duration-300 ${\n                  plan.popular\n                    ? 'bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg hover:shadow-xl'\n                    : 'border border-primary/50 bg-background/30 text-primary hover:bg-primary/10'\n                }`}\n              >\n                {plan.cta}\n              </a>\n            </div>\n          ))}\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center space-y-6 mt-16\">\n          <div className=\"backdrop-blur-sm bg-gradient-to-br from-primary/10 to-emerald-400/10 border border-primary/20 rounded-2xl p-8 md:p-12\">\n            <h3 className=\"text-2xl md:text-3xl font-bold mb-4 text-white\">\n              Agentic Cybersecurity Workforce\n            </h3>\n            <p className=\"text-lg text-gray-300 max-w-4xl mx-auto mb-6\">\n              Empower your leadership team with AI-powered compliance intelligence designed for CTOs, CISOs, CIOs, \n              Compliance Officers, Risk Officers, and IT Managers. Get actionable insights, automated workflows, \n              and real-time compliance monitoring tailored to your role.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a \n                href=\"/#contact\" \n                className=\"inline-block py-3 px-8 rounded-lg font-medium text-center bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg transform transition-all duration-300 hover:scale-105 hover:shadow-xl\"\n                data-testid=\"button-request-demo\"\n              >\n                Request a Demo\n              </a>\n              <a \n                href=\"/about\" \n                className=\"inline-block py-3 px-8 rounded-lg font-medium text-center border border-primary/50 bg-background/30 text-primary shadow-md backdrop-blur-sm transition-all duration-300 hover:bg-primary/10\"\n                data-testid=\"link-learn-more\"\n              >\n                Learn More About Us\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6191},"client/src/components/landing/solution-section.tsx":{"content":"import React from \"react\";\nimport { Shield, Lock, FileCheck, Brain, Users, BarChart3, CheckCircle2 } from \"lucide-react\";\n\nconst solutionFeatures = [\n  {\n    icon: Shield,\n    title: \"Comprehensive Security Framework\",\n    description: \"Complete cybersecurity compliance aligned with Saudi Arabia's regulatory requirements including NCA ECC, SAMA, and PDPL frameworks.\"\n  },\n  {\n    icon: Brain,\n    title: \"AI-Powered Compliance\",\n    description: \"Leverage artificial intelligence to automate policy generation, risk assessment, and compliance monitoring, reducing manual effort by 80%.\"\n  },\n  {\n    icon: FileCheck,\n    title: \"Automated Policy Management\",\n    description: \"Generate, manage, and maintain compliance policies automatically mapped to regulatory controls with version control and audit trails.\"\n  },\n  {\n    icon: Lock,\n    title: \"Risk Assessment & Management\",\n    description: \"Interactive risk heatmaps, AI-based scoring, and real-time threat detection to visualize and manage your security posture effectively.\"\n  },\n  {\n    icon: Users,\n    title: \"Multi-User Collaboration\",\n    description: \"Role-based access control for admins, compliance officers, and team members with granular permissions and activity tracking.\"\n  },\n  {\n    icon: BarChart3,\n    title: \"Real-Time Reporting & Analytics\",\n    description: \"Comprehensive dashboards, exportable reports, and shareable compliance certificates for stakeholders and regulators.\"\n  }\n];\n\nconst benefits = [\n  \"Reduce compliance time from months to weeks\",\n  \"Automated evidence collection and documentation\",\n  \"24/7 virtual compliance consultant powered by AI\",\n  \"Continuous compliance monitoring and alerts\",\n  \"Secure document repository with encryption\",\n  \"Integration with existing security tools\"\n];\n\nexport default function SolutionSection() {\n  return (\n    <section id=\"solution\" className=\"py-20 bg-background/90 relative\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-emerald-400 bg-clip-text text-transparent\">\n            Our Solution\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            One-Click Cybersecurity Compliance Platform designed to simplify and automate your organization's compliance journey\n          </p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {solutionFeatures.map((feature, index) => (\n            <div \n              key={index}\n              className=\"backdrop-blur-sm bg-card/30 border border-primary/20 rounded-xl p-6 hover:border-primary/50 transition-all duration-300 hover:shadow-lg hover:shadow-primary/20\"\n            >\n              <div className=\"w-14 h-14 rounded-xl bg-gradient-to-br from-primary to-emerald-400 flex items-center justify-center mb-4\">\n                <feature.icon className=\"w-7 h-7 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n              <p className=\"text-gray-400 leading-relaxed\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"backdrop-blur-sm bg-gradient-to-br from-primary/10 to-emerald-400/10 border border-primary/20 rounded-2xl p-8 md:p-12\">\n          <h3 className=\"text-2xl md:text-3xl font-bold mb-8 text-center\">Key Benefits</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {benefits.map((benefit, index) => (\n              <div key={index} className=\"flex items-start space-x-3\">\n                <CheckCircle2 className=\"w-6 h-6 text-primary flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-200 text-lg\">{benefit}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center mt-12\">\n          <p className=\"text-gray-300 mb-6 text-lg\">\n            Ready to transform your compliance process?\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <a \n              href=\"/#demo\" \n              className=\"inline-block py-3 px-8 rounded-lg font-medium text-center bg-gradient-to-r from-primary to-emerald-400 text-white shadow-lg transform transition-all duration-300 hover:scale-105 hover:shadow-xl\"\n            >\n              Book a Demo\n            </a>\n            <a \n              href=\"/pricing\" \n              className=\"inline-block py-3 px-8 rounded-lg font-medium text-center border border-primary/50 bg-background/30 text-primary shadow-md backdrop-blur-sm transition-all duration-300 hover:bg-primary/10\"\n            >\n              View Pricing\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4970},"client/src/pages/about-page.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Header from \"@/components/layout/header\";\nimport AboutSection from \"@/components/landing/about-section\";\nimport Footer from \"@/components/landing/footer\";\nimport backgroundImage from \"@assets/metawork background.png\";\n\nexport default function AboutPage() {\n  return (\n    <>\n      <Helmet>\n        <title>About Us - Meta Works</title>\n      </Helmet>\n      <div className=\"min-h-screen text-foreground relative\">\n        <div \n          className=\"fixed top-0 left-0 right-0 bottom-0 -z-10 bg-cover bg-center\"\n          style={{\n            backgroundImage: `url(${backgroundImage})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat',\n            backgroundAttachment: 'fixed'\n          }}\n        />\n        <div className=\"fixed top-0 left-0 right-0 bottom-0 bg-black/40 -z-10\" />\n        \n        <Header />\n        <div className=\"pt-20\">\n          <AboutSection />\n        </div>\n        <Footer />\n      </div>\n    </>\n  );\n}\n","size_bytes":1083},"client/src/pages/pricing-page.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Header from \"@/components/layout/header\";\nimport PricingSection from \"@/components/landing/pricing-section\";\nimport Footer from \"@/components/landing/footer\";\nimport backgroundImage from \"@assets/metawork background.png\";\n\nexport default function PricingPage() {\n  return (\n    <>\n      <Helmet>\n        <title>Pricing - Meta Works</title>\n      </Helmet>\n      <div className=\"min-h-screen text-foreground relative\">\n        <div \n          className=\"fixed top-0 left-0 right-0 bottom-0 -z-10 bg-cover bg-center\"\n          style={{\n            backgroundImage: `url(${backgroundImage})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat',\n            backgroundAttachment: 'fixed'\n          }}\n        />\n        <div className=\"fixed top-0 left-0 right-0 bottom-0 bg-black/40 -z-10\" />\n        \n        <Header />\n        <div className=\"pt-20\">\n          <PricingSection />\n        </div>\n        <Footer />\n      </div>\n    </>\n  );\n}\n","size_bytes":1090},"client/src/pages/solution-page.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Header from \"@/components/layout/header\";\nimport SolutionSection from \"@/components/landing/solution-section\";\nimport Footer from \"@/components/landing/footer\";\nimport backgroundImage from \"@assets/metawork background.png\";\n\nexport default function SolutionPage() {\n  return (\n    <>\n      <Helmet>\n        <title>Our Solution - Meta Works</title>\n      </Helmet>\n      <div className=\"min-h-screen text-foreground relative\">\n        <div \n          className=\"fixed top-0 left-0 right-0 bottom-0 -z-10 bg-cover bg-center\"\n          style={{\n            backgroundImage: `url(${backgroundImage})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat',\n            backgroundAttachment: 'fixed'\n          }}\n        />\n        <div className=\"fixed top-0 left-0 right-0 bottom-0 bg-black/40 -z-10\" />\n        \n        <Header />\n        <div className=\"pt-20\">\n          <SolutionSection />\n        </div>\n        <Footer />\n      </div>\n    </>\n  );\n}\n","size_bytes":1099},"replit.md":{"content":"# MetaWorks - Cybersecurity Compliance Platform\n\n## Overview\n\nMetaWorks is a comprehensive SaaS-based cybersecurity compliance platform designed to help organizations achieve and maintain compliance across multiple frameworks including NCA ECC (Saudi National Cybersecurity Authority), SAMA CSF (Saudi Central Bank), ISO 27001, and PDPA (Personal Data Protection Act). The platform features an AI-powered virtual consultant, risk assessment tools, policy management, and real-time compliance scoring with interactive dashboards.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build Tools**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool for fast development and optimized production builds\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and caching\n\n**UI Components & Styling**\n- Tailwind CSS for utility-first styling with custom design tokens\n- shadcn/ui component library built on Radix UI primitives\n- Custom theme system with dark/light mode support via theme.json configuration\n- Professional variant with HSL color system for consistent theming\n\n**State Management**\n- React Context for authentication state (AuthContext)\n- TanStack Query for server-side data synchronization\n- Local component state with React hooks\n\n**Key Design Decisions**\n- Chose Vite over Create React App for superior development experience and build performance\n- Selected shadcn/ui for customizable, accessible components without runtime overhead\n- Implemented path aliases (@/, @shared/, @assets/) for cleaner imports\n\n### Backend Architecture\n\n**Server Framework**\n- Node.js with Express.js for RESTful API implementation\n- TypeScript throughout for type safety across frontend and backend\n- Modular API route structure under `/server/api` directory\n\n**Authentication & Authorization**\n- Dual authentication system:\n  - Clerk for modern OAuth-based authentication (admin features)\n  - Passport.js with Local Strategy for traditional username/password auth\n- Session management using express-session with custom storage\n- Role-based access control with user roles (admin/user) and access levels (trial/premium)\n\n**Database Layer**\n- PostgreSQL as the primary relational database\n- Drizzle ORM for type-safe database operations\n- Neon serverless PostgreSQL client with WebSocket support\n- Connection pooling for efficient database resource management\n- Database schema defined in `/shared/schema.ts` for sharing between client and server\n\n**API Architecture**\n- RESTful endpoints organized by resource type:\n  - `/api/frameworks` - Compliance framework management\n  - `/api/assessments` - Assessment creation and tracking\n  - `/api/risks` - Risk management and prediction\n  - `/api/policies` - Policy document management\n  - `/api/reports` - Compliance report generation\n  - `/api/onboarding` - User onboarding workflow\n  - `/api/gamification` - Badges and achievement system\n\n**File Management**\n- Multer for multipart/form-data handling\n- Separate storage directories for logos and documents\n- File metadata stored in database with physical files on disk\n- Support for document uploads (policies, evidence) and logo management\n\n**AI Integration**\n- OpenAI GPT-4o integration for:\n  - Risk prediction and analysis\n  - Automated remediation plan generation\n  - Control gap analysis\n  - Policy generation and enhancement\n- D-ID virtual agent integration for interactive AI consultant\n\n### Data Storage Solutions\n\n**Database Schema Design**\n\n**Core Entities**\n- Users: Authentication and profile information\n- Company Info: Organization details and configuration\n- Frameworks: Compliance framework definitions (NCA ECC, SAMA, ISO 27001, PDPL)\n- Domains: Framework organizational structure\n- Subdomains: Granular control groupings\n- Controls: Individual compliance requirements\n\n**Assessment System**\n- Assessments: Compliance evaluation sessions\n- Assessment Results: Control-by-control evaluation results\n- Assessment Risks: Risk identification linked to assessments\n- Remediation Tasks: Action items for compliance gaps\n\n**Risk Management**\n- Risks: General risk register with 47 predefined IT/cybersecurity risks\n- Risk categories: Strategic, Operational, Compliance\n- Inherent and residual risk levels\n- Mitigation tracking with target dates\n\n**Policy Management**\n- Policy Categories: Organizational structure for policies\n- Policy Templates: Reusable policy frameworks\n- Generated Policies: AI-created customized policies\n- File attachments for evidence and documentation\n\n**Gamification & Onboarding**\n- Onboarding Steps: Structured user journey\n- User Progress: Step completion tracking\n- Badges: Achievement system\n- User Game Stats: Points and progress metrics\n\n**Reporting**\n- Compliance Reports: Generated assessment reports\n- Report Share Links: Secure sharing with expiration\n\n### Authentication and Authorization Mechanisms\n\n**Clerk Integration**\n- OAuth-based authentication for modern user experience\n- Public metadata for role assignment (admin/user)\n- JWT token handling on client-side\n- Custom hooks for Clerk user state management\n\n**Passport.js Strategy**\n- Local username/password authentication\n- Scrypt-based password hashing with salt\n- Session-based authentication with server-side storage\n- Timing-safe password comparison to prevent timing attacks\n\n**Authorization Model**\n- Role-based access control (RBAC)\n- Protected route components for both auth systems\n- Separate admin and user dashboards\n- API endpoint protection with authentication middleware\n\n**Session Management**\n- Express-session with custom storage adapter\n- 24-hour session expiration\n- Secure cookie configuration for production\n- Trust proxy settings for deployment behind reverse proxies\n\n### External Dependencies\n\n**Third-Party Services**\n\n**Authentication**\n- Clerk: Modern authentication platform with OAuth support\n  - Used for: Admin access, user management, role-based permissions\n  - Integration: @clerk/clerk-react SDK\n\n**AI & ML Services**\n- OpenAI API: GPT-4o model integration\n  - Used for: Risk prediction, policy generation, compliance analysis\n  - Features: JSON response format, low temperature for consistency\n- D-ID Virtual Agent: Interactive AI avatar\n  - Used for: Virtual cybersecurity consultant interface\n  - API endpoints for creating talks and streaming responses\n\n**Database**\n- Neon Serverless PostgreSQL\n  - Connection string via DATABASE_URL environment variable\n  - WebSocket support for real-time capabilities\n  - Configured with connection pooling (max 10 connections)\n\n**Build & Development Tools**\n- Vite: Frontend build tooling and dev server\n- Drizzle Kit: Database migration management\n- ESBuild: Server-side bundling for production\n\n**UI Component Libraries**\n- Radix UI: Headless accessible components (30+ component packages)\n- Lucide React: Icon library\n- React Hook Form: Form state management with Zod validation\n- Recharts: Data visualization (implied by dashboard features)\n\n**File Processing**\n- Multer: Multipart form data handling for file uploads\n- fs-extra: Enhanced file system operations\n\n**Deployment Considerations**\n- Vercel-ready configuration with custom build settings\n- Support for Netlify or any Node.js cloud platform\n- Static asset serving with fallback routing\n- Environment variable configuration for API keys and database connections","size_bytes":7474},"server/api/book-demo.ts":{"content":"import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\nconst demoRequestSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  company: z.string().optional(),\n  message: z.string().optional()\n});\n\nrouter.post('/api/book-demo', async (req: Request, res: Response) => {\n  try {\n    const validatedData = demoRequestSchema.parse(req.body);\n    \n    console.log('=== Demo Request Submission ===');\n    console.log('Name:', validatedData.name);\n    console.log('Email:', validatedData.email);\n    console.log('Company:', validatedData.company || 'Not provided');\n    console.log('Message:', validatedData.message || 'Not provided');\n    console.log('Timestamp:', new Date().toISOString());\n    console.log('================================');\n    \n    res.status(200).json({ \n      success: true, \n      message: 'Demo request submitted successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        success: false, \n        errors: error.errors \n      });\n    }\n    \n    console.error('Error processing demo request:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to process demo request'\n    });\n  }\n});\n\nexport default router;\n","size_bytes":1341},"server/api/contact.ts":{"content":"import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\nconst contactSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  message: z.string().min(1, \"Message is required\")\n});\n\nrouter.post('/api/contact', async (req: Request, res: Response) => {\n  try {\n    const validatedData = contactSchema.parse(req.body);\n    \n    console.log('=== Contact Form Submission ===');\n    console.log('Name:', validatedData.name);\n    console.log('Email:', validatedData.email);\n    console.log('Message:', validatedData.message);\n    console.log('Timestamp:', new Date().toISOString());\n    console.log('================================');\n    \n    res.status(200).json({ \n      success: true, \n      message: 'Contact form submitted successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        success: false, \n        errors: error.errors \n      });\n    }\n    \n    console.error('Error processing contact form:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to process contact form'\n    });\n  }\n});\n\nexport default router;\n","size_bytes":1228}},"version":1}